/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSession.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef PduSession_H_
#define PduSession_H_

#include "CSB_JsonParser.h"
#include "PlmnId.h"
#include "Snssai.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PduSession : public jsonParser::jsonParser<PduSession> {
public:
  explicit PduSession() {
    // constructor
    m_Dnn = "";

    m_DnnFlag = staticjson::Flags::Default;
    m_DnnOutFlag.reset(new unsigned);
    *m_DnnOutFlag.get() = 0;
    m_SmfInstanceId = "";

    m_SmfInstanceIdFlag = staticjson::Flags::Default;
    m_SmfInstanceIdOutFlag.reset(new unsigned);
    *m_SmfInstanceIdOutFlag.get() = 0;

    m_PlmnIdFlag = staticjson::Flags::Default;
    m_PlmnIdOutFlag.reset(new unsigned);
    *m_PlmnIdOutFlag.get() = 0;

    m_SingleNssaiFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SingleNssaiOutFlag.reset(new unsigned);
    *m_SingleNssaiOutFlag.get() = 0;
  };
  virtual ~PduSession(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Dnn SmfInstanceId PlmnId SingleNssai
    h->add_property("dnn", &this->m_Dnn, m_DnnFlag);
    h->add_property("smfInstanceId", &this->m_SmfInstanceId,
                    m_SmfInstanceIdFlag);
    h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);
    h->add_optional_property("singleNssai", &this->m_SingleNssai,
                             m_SingleNssaiFlag, m_SingleNssaiOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const PduSession &obj) {

    o << "Dnn : " << obj.m_Dnn << std::endl;

    o << "SmfInstanceId : " << obj.m_SmfInstanceId << std::endl;

    o << "PlmnId : " << obj.m_PlmnId << std::endl;

    o << "SingleNssai, optional flag is : " << *m_SingleNssaiOutFlag
      << ", content is : " << obj.m_SingleNssai << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// PduSession members vars : Dnn SmfInstanceId PlmnId SingleNssai

  std::string getDnn() const { return m_Dnn; }
  void setDnn(std::string const &value) { m_Dnn = value; }

  std::string getSmfInstanceId() const { return m_SmfInstanceId; }
  void setSmfInstanceId(std::string const &value) { m_SmfInstanceId = value; }

  PlmnId getPlmnId() const { return m_PlmnId; }
  void setPlmnId(PlmnId const &value) { m_PlmnId = value; }

  Snssai getSingleNssai() const { return m_SingleNssai; }
  void setSingleNssai(Snssai const &value) { m_SingleNssai = value; }

public:
  std::string m_Dnn;

  unsigned m_DnnFlag;
  shared_ptr<unsigned> m_DnnOutFlag;
  std::string m_SmfInstanceId;

  unsigned m_SmfInstanceIdFlag;
  shared_ptr<unsigned> m_SmfInstanceIdOutFlag;
  PlmnId m_PlmnId;

  unsigned m_PlmnIdFlag;
  shared_ptr<unsigned> m_PlmnIdOutFlag;
  Snssai m_SingleNssai;

  unsigned m_SingleNssaiFlag;
  shared_ptr<unsigned> m_SingleNssaiOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSession_H_ */
