/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IdTranslationResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




IdTranslationResult::IdTranslationResult()
{
    m_SupportedFeatures = utility::conversions::to_string_t("");
    m_SupportedFeaturesIsSet = false;
    m_Supi = utility::conversions::to_string_t("");
    m_SupiIsSet = false;
    m_Gpsi = utility::conversions::to_string_t("");
    m_GpsiIsSet = false;
}

IdTranslationResult::~IdTranslationResult()
{
}

void IdTranslationResult::validate()
{
    // TODO: implement validation
}

web::json::value IdTranslationResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupportedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("supportedFeatures")] = ModelBase::toJson(m_SupportedFeatures);
    }
    if(m_SupiIsSet)
    {
        val[utility::conversions::to_string_t("supi")] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiIsSet)
    {
        val[utility::conversions::to_string_t("gpsi")] = ModelBase::toJson(m_Gpsi);
    }

    return val;
}

bool IdTranslationResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("supportedFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supportedFeatures"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedFeatures);
            setSupportedFeatures(refVal_supportedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supi;
            ok &= ModelBase::fromJson(fieldValue, refVal_supi);
            setSupi(refVal_supi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gpsi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gpsi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_gpsi;
            ok &= ModelBase::fromJson(fieldValue, refVal_gpsi);
            setGpsi(refVal_gpsi);
        }
    }
    return ok;
}

void IdTranslationResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SupportedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportedFeatures"), m_SupportedFeatures));
    }
    if(m_SupiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supi"), m_Supi));
    }
    if(m_GpsiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gpsi"), m_Gpsi));
    }
}

bool IdTranslationResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("supportedFeatures")))
    {
        utility::string_t refVal_supportedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportedFeatures")), refVal_supportedFeatures );
        setSupportedFeatures(refVal_supportedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supi")))
    {
        utility::string_t refVal_supi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supi")), refVal_supi );
        setSupi(refVal_supi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gpsi")))
    {
        utility::string_t refVal_gpsi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gpsi")), refVal_gpsi );
        setGpsi(refVal_gpsi);
    }
    return ok;
}

utility::string_t IdTranslationResult::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void IdTranslationResult::setSupportedFeatures(const utility::string_t& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}

bool IdTranslationResult::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}

void IdTranslationResult::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}
utility::string_t IdTranslationResult::getSupi() const
{
    return m_Supi;
}

void IdTranslationResult::setSupi(const utility::string_t& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}

bool IdTranslationResult::supiIsSet() const
{
    return m_SupiIsSet;
}

void IdTranslationResult::unsetSupi()
{
    m_SupiIsSet = false;
}
utility::string_t IdTranslationResult::getGpsi() const
{
    return m_Gpsi;
}

void IdTranslationResult::setGpsi(const utility::string_t& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}

bool IdTranslationResult::gpsiIsSet() const
{
    return m_GpsiIsSet;
}

void IdTranslationResult::unsetGpsi()
{
    m_GpsiIsSet = false;
}
}
}
}
}


