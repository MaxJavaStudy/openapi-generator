/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WirelineServiceAreaRestriction.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




WirelineServiceAreaRestriction::WirelineServiceAreaRestriction()
{
    m_RestrictionTypeIsSet = false;
    m_AreasIsSet = false;
}

WirelineServiceAreaRestriction::~WirelineServiceAreaRestriction()
{
}

void WirelineServiceAreaRestriction::validate()
{
    // TODO: implement validation
}

web::json::value WirelineServiceAreaRestriction::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RestrictionTypeIsSet)
    {
        val[utility::conversions::to_string_t("restrictionType")] = ModelBase::toJson(m_RestrictionType);
    }
    if(m_AreasIsSet)
    {
        val[utility::conversions::to_string_t("areas")] = ModelBase::toJson(m_Areas);
    }

    return val;
}

bool WirelineServiceAreaRestriction::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("restrictionType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("restrictionType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RestrictionType> refVal_restrictionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_restrictionType);
            setRestrictionType(refVal_restrictionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("areas")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("areas"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WirelineArea>> refVal_areas;
            ok &= ModelBase::fromJson(fieldValue, refVal_areas);
            setAreas(refVal_areas);
        }
    }
    return ok;
}

void WirelineServiceAreaRestriction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_RestrictionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("restrictionType"), m_RestrictionType));
    }
    if(m_AreasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("areas"), m_Areas));
    }
}

bool WirelineServiceAreaRestriction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("restrictionType")))
    {
        std::shared_ptr<RestrictionType> refVal_restrictionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("restrictionType")), refVal_restrictionType );
        setRestrictionType(refVal_restrictionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("areas")))
    {
        std::vector<std::shared_ptr<WirelineArea>> refVal_areas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("areas")), refVal_areas );
        setAreas(refVal_areas);
    }
    return ok;
}

std::shared_ptr<RestrictionType> WirelineServiceAreaRestriction::getRestrictionType() const
{
    return m_RestrictionType;
}

void WirelineServiceAreaRestriction::setRestrictionType(const std::shared_ptr<RestrictionType>& value)
{
    m_RestrictionType = value;
    m_RestrictionTypeIsSet = true;
}

bool WirelineServiceAreaRestriction::restrictionTypeIsSet() const
{
    return m_RestrictionTypeIsSet;
}

void WirelineServiceAreaRestriction::unsetRestrictionType()
{
    m_RestrictionTypeIsSet = false;
}
std::vector<std::shared_ptr<WirelineArea>>& WirelineServiceAreaRestriction::getAreas()
{
    return m_Areas;
}

void WirelineServiceAreaRestriction::setAreas(const std::vector<std::shared_ptr<WirelineArea>>& value)
{
    m_Areas = value;
    m_AreasIsSet = true;
}

bool WirelineServiceAreaRestriction::areasIsSet() const
{
    return m_AreasIsSet;
}

void WirelineServiceAreaRestriction::unsetAreas()
{
    m_AreasIsSet = false;
}
}
}
}
}


