/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RacsFailureReport.h
 *
 *
 */

#ifndef RacsFailureReport_H_
#define RacsFailureReport_H_

#include "RacsFailureCode.h"
#include "jsonParser/jsonParser.hpp"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class RacsFailureReport : public jsonParser::jsonParser<RacsFailureReport> {
public:
  explicit RacsFailureReport() {
    // constructor

    m_RacsIdsFlag = staticjson::Flags::Default;

    m_FailureCodeFlag = staticjson::Flags::Default;
  };
  virtual ~RacsFailureReport(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : RacsIds FailureCode
    h->add_property("racsIds", &this->m_RacsIds, m_RacsIdsFlag);
    h->add_property("failureCode", &this->m_FailureCode, m_FailureCodeFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const RacsFailureReport &obj) {
    o << convert2string(std::string("RacsIds"), obj.m_RacsIds) << std::endl;

    o << "FailureCode : " << obj.m_FailureCode << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// RacsFailureReport members vars : RacsIds FailureCode

  std::vector<std::string> &getRacsIds() { return m_RacsIds; }
  void setRacsIds(std::vector<std::string> const &value) { m_RacsIds = value; }

  RacsFailureCode getFailureCode() const { return m_FailureCode; }
  void setFailureCode(RacsFailureCode const &value) { m_FailureCode = value; }

public:
  std::vector<std::string> m_RacsIds;

  unsigned m_RacsIdsFlag;
  RacsFailureCode m_FailureCode;

  unsigned m_FailureCodeFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RacsFailureReport_H_ */
