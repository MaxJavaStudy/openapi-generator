/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SmsfRegistration.h
 *
 * 
 */

#ifndef SmsfRegistration_H_
#define SmsfRegistration_H_


#include "NetworkNodeDiameterAddress.h"
#include "ContextInfo.h"
#include <string>
#include "PlmnId.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  SmsfRegistration
{
public:
    SmsfRegistration();
    virtual ~SmsfRegistration();

    void validate();

    /////////////////////////////////////////////
    /// SmsfRegistration members

    /// <summary>
    /// 
    /// </summary>
    std::string getSmsfInstanceId() const;
    void setSmsfInstanceId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getSmsfSetId() const;
    void setSmsfSetId(std::string const& value);
    bool smsfSetIdIsSet() const;
    void unsetSmsfSetId();
    /// <summary>
    /// 
    /// </summary>
    std::string getSupportedFeatures() const;
    void setSupportedFeatures(std::string const& value);
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();
    /// <summary>
    /// 
    /// </summary>
    PlmnId getPlmnId() const;
    void setPlmnId(PlmnId const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getSmsfMAPAddress() const;
    void setSmsfMAPAddress(std::string const& value);
    bool smsfMAPAddressIsSet() const;
    void unsetSmsfMAPAddress();
    /// <summary>
    /// 
    /// </summary>
    NetworkNodeDiameterAddress getSmsfDiameterAddress() const;
    void setSmsfDiameterAddress(NetworkNodeDiameterAddress const& value);
    bool smsfDiameterAddressIsSet() const;
    void unsetSmsfDiameterAddress();
    /// <summary>
    /// 
    /// </summary>
    std::string getRegistrationTime() const;
    void setRegistrationTime(std::string const& value);
    bool registrationTimeIsSet() const;
    void unsetRegistrationTime();
    /// <summary>
    /// 
    /// </summary>
    ContextInfo getContextInfo() const;
    void setContextInfo(ContextInfo const& value);
    bool contextInfoIsSet() const;
    void unsetContextInfo();

    friend void to_json(nlohmann::json& j, const SmsfRegistration& o);
    friend void from_json(const nlohmann::json& j, SmsfRegistration& o);
protected:
    std::string m_SmsfInstanceId;

    std::string m_SmsfSetId;
    bool m_SmsfSetIdIsSet;
    std::string m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
    PlmnId m_PlmnId;

    std::string m_SmsfMAPAddress;
    bool m_SmsfMAPAddressIsSet;
    NetworkNodeDiameterAddress m_SmsfDiameterAddress;
    bool m_SmsfDiameterAddressIsSet;
    std::string m_RegistrationTime;
    bool m_RegistrationTimeIsSet;
    ContextInfo m_ContextInfo;
    bool m_ContextInfoIsSet;
};

}
}
}
}

#endif /* SmsfRegistration_H_ */
