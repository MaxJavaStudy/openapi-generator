/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ServiceTypeUnrelatedClass.h
 *
 * 
 */

#ifndef ServiceTypeUnrelatedClass_H_
#define ServiceTypeUnrelatedClass_H_


#include "GeographicArea.h"
#include "CodeWordInd.h"
#include <string>
#include "ValidTimePeriod.h"
#include "PrivacyCheckRelatedAction.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  ServiceTypeUnrelatedClass: public jsonParser::jsonParser<ServiceTypeUnrelatedClass>
{
public:
    explicit ServiceTypeUnrelatedClass(){
        // constructor
        m_ServiceType = 0;
        
            m_ServiceTypeFlag = staticjson::Flags::Default;

            m_AllowedGeographicAreaFlag = (staticjson::Flags::Optional);

            m_PrivacyCheckRelatedActionFlag = (staticjson::Flags::Optional);

            m_CodeWordIndFlag = (staticjson::Flags::Optional);

            m_ValidTimePeriodFlag = (staticjson::Flags::Optional);

            m_CodeWordListFlag = (staticjson::Flags::Optional);
    };
    virtual ~ServiceTypeUnrelatedClass(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : ServiceType AllowedGeographicArea PrivacyCheckRelatedAction CodeWordInd ValidTimePeriod CodeWordList 
        h->add_property("serviceType", &this->m_ServiceType, m_ServiceTypeFlag);
        h->add_property("allowedGeographicArea", &this->m_AllowedGeographicArea, m_AllowedGeographicAreaFlag);
        h->add_property("privacyCheckRelatedAction", &this->m_PrivacyCheckRelatedAction, m_PrivacyCheckRelatedActionFlag);
        h->add_property("codeWordInd", &this->m_CodeWordInd, m_CodeWordIndFlag);
        h->add_property("validTimePeriod", &this->m_ValidTimePeriod, m_ValidTimePeriodFlag);
        h->add_property("codeWordList", &this->m_CodeWordList, m_CodeWordListFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const ServiceTypeUnrelatedClass& obj)
    {
        
        o << "ServiceType : " << obj.m_ServiceType << std::endl;
        o<< convert2string(std::string("AllowedGeographicArea"), obj.m_AllowedGeographicArea) <<std::endl;
       
        o << "PrivacyCheckRelatedAction : " << obj.m_PrivacyCheckRelatedAction << std::endl;

        o << "CodeWordInd : " << obj.m_CodeWordInd << std::endl;

        o << "ValidTimePeriod : " << obj.m_ValidTimePeriod << std::endl;
        o<< convert2string(std::string("CodeWordList"), obj.m_CodeWordList) <<std::endl;
       
     
        return o;
    }

    /////////////////////////////////////////////
    /// ServiceTypeUnrelatedClass members vars : ServiceType AllowedGeographicArea PrivacyCheckRelatedAction CodeWordInd ValidTimePeriod CodeWordList 

    int32_t  getServiceType() const
    {
        return m_ServiceType;
    }
    void  setServiceType(int32_t const value)
    {
        m_ServiceType = value;
    }

std::vector<GeographicArea>&  getAllowedGeographicArea()
    {
        return m_AllowedGeographicArea;
    }
    void  setAllowedGeographicArea(std::vector<GeographicArea> const& value)
    {
        m_AllowedGeographicArea = value;
    }

PrivacyCheckRelatedAction  getPrivacyCheckRelatedAction() const
    {
        return m_PrivacyCheckRelatedAction;
    }
    void  setPrivacyCheckRelatedAction(PrivacyCheckRelatedAction const& value)
    {
        m_PrivacyCheckRelatedAction = value;
    }

CodeWordInd  getCodeWordInd() const
    {
        return m_CodeWordInd;
    }
    void  setCodeWordInd(CodeWordInd const& value)
    {
        m_CodeWordInd = value;
    }

ValidTimePeriod  getValidTimePeriod() const
    {
        return m_ValidTimePeriod;
    }
    void  setValidTimePeriod(ValidTimePeriod const& value)
    {
        m_ValidTimePeriod = value;
    }

std::vector<std::string>&  getCodeWordList()
    {
        return m_CodeWordList;
    }
    void  setCodeWordList(std::vector<std::string> const& value)
    {
        m_CodeWordList = value;
    }



    
public:
    int32_t m_ServiceType;
    
    unsigned m_ServiceTypeFlag;
    std::vector<GeographicArea> m_AllowedGeographicArea;
    
    unsigned m_AllowedGeographicAreaFlag;
    PrivacyCheckRelatedAction m_PrivacyCheckRelatedAction;
    
    unsigned m_PrivacyCheckRelatedActionFlag;
    CodeWordInd m_CodeWordInd;
    
    unsigned m_CodeWordIndFlag;
    ValidTimePeriod m_ValidTimePeriod;
    
    unsigned m_ValidTimePeriodFlag;
    std::vector<std::string> m_CodeWordList;
    
    unsigned m_CodeWordListFlag;
  
};
}
}
}
}

#endif /* ServiceTypeUnrelatedClass_H_ */
