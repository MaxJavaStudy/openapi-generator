/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PgwInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PgwInfo::PgwInfo()
{
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_PgwFqdn = utility::conversions::to_string_t("");
    m_PgwFqdnIsSet = false;
    m_PlmnIdIsSet = false;
    m_EpdgInd = false;
    m_EpdgIndIsSet = false;
}

PgwInfo::~PgwInfo()
{
}

void PgwInfo::validate()
{
    // TODO: implement validation
}

web::json::value PgwInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t("dnn")] = ModelBase::toJson(m_Dnn);
    }
    if(m_PgwFqdnIsSet)
    {
        val[utility::conversions::to_string_t("pgwFqdn")] = ModelBase::toJson(m_PgwFqdn);
    }
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t("plmnId")] = ModelBase::toJson(m_PlmnId);
    }
    if(m_EpdgIndIsSet)
    {
        val[utility::conversions::to_string_t("epdgInd")] = ModelBase::toJson(m_EpdgInd);
    }

    return val;
}

bool PgwInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("dnn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnn);
            setDnn(refVal_dnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pgwFqdn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pgwFqdn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pgwFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_pgwFqdn);
            setPgwFqdn(refVal_pgwFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plmnId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plmnId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_plmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_plmnId);
            setPlmnId(refVal_plmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("epdgInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("epdgInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_epdgInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_epdgInd);
            setEpdgInd(refVal_epdgInd);
        }
    }
    return ok;
}

void PgwInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnn"), m_Dnn));
    }
    if(m_PgwFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pgwFqdn"), m_PgwFqdn));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plmnId"), m_PlmnId));
    }
    if(m_EpdgIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("epdgInd"), m_EpdgInd));
    }
}

bool PgwInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dnn")))
    {
        utility::string_t refVal_dnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnn")), refVal_dnn );
        setDnn(refVal_dnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pgwFqdn")))
    {
        utility::string_t refVal_pgwFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pgwFqdn")), refVal_pgwFqdn );
        setPgwFqdn(refVal_pgwFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plmnId")))
    {
        std::shared_ptr<PlmnId> refVal_plmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plmnId")), refVal_plmnId );
        setPlmnId(refVal_plmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("epdgInd")))
    {
        bool refVal_epdgInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("epdgInd")), refVal_epdgInd );
        setEpdgInd(refVal_epdgInd);
    }
    return ok;
}

utility::string_t PgwInfo::getDnn() const
{
    return m_Dnn;
}

void PgwInfo::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool PgwInfo::dnnIsSet() const
{
    return m_DnnIsSet;
}

void PgwInfo::unsetDnn()
{
    m_DnnIsSet = false;
}
utility::string_t PgwInfo::getPgwFqdn() const
{
    return m_PgwFqdn;
}

void PgwInfo::setPgwFqdn(const utility::string_t& value)
{
    m_PgwFqdn = value;
    m_PgwFqdnIsSet = true;
}

bool PgwInfo::pgwFqdnIsSet() const
{
    return m_PgwFqdnIsSet;
}

void PgwInfo::unsetPgwFqdn()
{
    m_PgwFqdnIsSet = false;
}
std::shared_ptr<PlmnId> PgwInfo::getPlmnId() const
{
    return m_PlmnId;
}

void PgwInfo::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool PgwInfo::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void PgwInfo::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
bool PgwInfo::isEpdgInd() const
{
    return m_EpdgInd;
}

void PgwInfo::setEpdgInd(bool value)
{
    m_EpdgInd = value;
    m_EpdgIndIsSet = true;
}

bool PgwInfo::epdgIndIsSet() const
{
    return m_EpdgIndIsSet;
}

void PgwInfo::unsetEpdgInd()
{
    m_EpdgIndIsSet = false;
}
}
}
}
}


