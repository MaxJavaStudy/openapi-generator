/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AccessAndMobilitySubscriptionData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AccessAndMobilitySubscriptionData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AccessAndMobilitySubscriptionData_H_


#include "../ModelBase.h"

#include "SorInfo.h"
#include "CoreNetworkType.h"
#include "ExpectedUeBehaviourData.h"
#include "UpuInfo.h"
#include "Area.h"
#include "OdbPacketServices.h"
#include "WirelineServiceAreaRestriction.h"
#include "CagData.h"
#include "PtwParameters.h"
#include "RatType.h"
#include "SorUpdateIndicator.h"
#include "TraceData.h"
#include <vector>
#include "MdtUserConsent.h"
#include "EdrxParameters.h"
#include "Nssai.h"
#include "EcRestrictionDataWb.h"
#include "AmbrRm.h"
#include "MdtConfiguration.h"
#include "ServiceAreaRestriction.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include "WirelineArea.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AccessAndMobilitySubscriptionData
    : public ModelBase
{
public:
    AccessAndMobilitySubscriptionData();
    virtual ~AccessAndMobilitySubscriptionData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AccessAndMobilitySubscriptionData members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupportedFeatures() const;
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

    void setSupportedFeatures(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getGpsis();
    bool gpsisIsSet() const;
    void unsetGpsis();

    void setGpsis(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getInternalGroupIds();
    bool internalGroupIdsIsSet() const;
    void unsetInternalGroupIds();

    void setInternalGroupIds(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<utility::string_t>>& getSharedVnGroupDataIds();
    bool sharedVnGroupDataIdsIsSet() const;
    void unsetSharedVnGroupDataIds();

    void setSharedVnGroupDataIds(const std::map<utility::string_t, std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AmbrRm> getSubscribedUeAmbr() const;
    bool subscribedUeAmbrIsSet() const;
    void unsetSubscribedUeAmbr();

    void setSubscribedUeAmbr(const std::shared_ptr<AmbrRm>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Nssai> getNssai() const;
    bool nssaiIsSet() const;
    void unsetNssai();

    void setNssai(const std::shared_ptr<Nssai>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RatType>>& getRatRestrictions();
    bool ratRestrictionsIsSet() const;
    void unsetRatRestrictions();

    void setRatRestrictions(const std::vector<std::shared_ptr<RatType>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Area>>& getForbiddenAreas();
    bool forbiddenAreasIsSet() const;
    void unsetForbiddenAreas();

    void setForbiddenAreas(const std::vector<std::shared_ptr<Area>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServiceAreaRestriction> getServiceAreaRestriction() const;
    bool serviceAreaRestrictionIsSet() const;
    void unsetServiceAreaRestriction();

    void setServiceAreaRestriction(const std::shared_ptr<ServiceAreaRestriction>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CoreNetworkType>>& getCoreNetworkTypeRestrictions();
    bool coreNetworkTypeRestrictionsIsSet() const;
    void unsetCoreNetworkTypeRestrictions();

    void setCoreNetworkTypeRestrictions(const std::vector<std::shared_ptr<CoreNetworkType>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRfspIndex() const;
    bool rfspIndexIsSet() const;
    void unsetRfspIndex();

    void setRfspIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSubsRegTimer() const;
    bool subsRegTimerIsSet() const;
    void unsetSubsRegTimer();

    void setSubsRegTimer(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getUeUsageType() const;
    bool ueUsageTypeIsSet() const;
    void unsetUeUsageType();

    void setUeUsageType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isMpsPriority() const;
    bool mpsPriorityIsSet() const;
    void unsetMpsPriority();

    void setMpsPriority(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isMcsPriority() const;
    bool mcsPriorityIsSet() const;
    void unsetMcsPriority();

    void setMcsPriority(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getActiveTime() const;
    bool activeTimeIsSet() const;
    void unsetActiveTime();

    void setActiveTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SorInfo> getSorInfo() const;
    bool sorInfoIsSet() const;
    void unsetSorInfo();

    void setSorInfo(const std::shared_ptr<SorInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSorInfoExpectInd() const;
    bool sorInfoExpectIndIsSet() const;
    void unsetSorInfoExpectInd();

    void setSorInfoExpectInd(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSorafRetrieval() const;
    bool sorafRetrievalIsSet() const;
    void unsetSorafRetrieval();

    void setSorafRetrieval(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SorUpdateIndicator>>& getSorUpdateIndicatorList();
    bool sorUpdateIndicatorListIsSet() const;
    void unsetSorUpdateIndicatorList();

    void setSorUpdateIndicatorList(const std::vector<std::shared_ptr<SorUpdateIndicator>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UpuInfo> getUpuInfo() const;
    bool upuInfoIsSet() const;
    void unsetUpuInfo();

    void setUpuInfo(const std::shared_ptr<UpuInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isMicoAllowed() const;
    bool micoAllowedIsSet() const;
    void unsetMicoAllowed();

    void setMicoAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getSharedAmDataIds();
    bool sharedAmDataIdsIsSet() const;
    void unsetSharedAmDataIds();

    void setSharedAmDataIds(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OdbPacketServices> getOdbPacketServices() const;
    bool odbPacketServicesIsSet() const;
    void unsetOdbPacketServices();

    void setOdbPacketServices(const std::shared_ptr<OdbPacketServices>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getSubscribedDnnList();
    bool subscribedDnnListIsSet() const;
    void unsetSubscribedDnnList();

    void setSubscribedDnnList(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getServiceGapTime() const;
    bool serviceGapTimeIsSet() const;
    void unsetServiceGapTime();

    void setServiceGapTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MdtUserConsent> getMdtUserConsent() const;
    bool mdtUserConsentIsSet() const;
    void unsetMdtUserConsent();

    void setMdtUserConsent(const std::shared_ptr<MdtUserConsent>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MdtConfiguration> getMdtConfiguration() const;
    bool mdtConfigurationIsSet() const;
    void unsetMdtConfiguration();

    void setMdtConfiguration(const std::shared_ptr<MdtConfiguration>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TraceData> getTraceData() const;
    bool traceDataIsSet() const;
    void unsetTraceData();

    void setTraceData(const std::shared_ptr<TraceData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CagData> getCagData() const;
    bool cagDataIsSet() const;
    void unsetCagData();

    void setCagData(const std::shared_ptr<CagData>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStnSr() const;
    bool stnSrIsSet() const;
    void unsetStnSr();

    void setStnSr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCMsisdn() const;
    bool cMsisdnIsSet() const;
    void unsetCMsisdn();

    void setCMsisdn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNbIoTUePriority() const;
    bool nbIoTUePriorityIsSet() const;
    void unsetNbIoTUePriority();

    void setNbIoTUePriority(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isNssaiInclusionAllowed() const;
    bool nssaiInclusionAllowedIsSet() const;
    void unsetNssaiInclusionAllowed();

    void setNssaiInclusionAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRgWirelineCharacteristics() const;
    bool rgWirelineCharacteristicsIsSet() const;
    void unsetRgWirelineCharacteristics();

    void setRgWirelineCharacteristics(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EcRestrictionDataWb> getEcRestrictionDataWb() const;
    bool ecRestrictionDataWbIsSet() const;
    void unsetEcRestrictionDataWb();

    void setEcRestrictionDataWb(const std::shared_ptr<EcRestrictionDataWb>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEcRestrictionDataNb() const;
    bool ecRestrictionDataNbIsSet() const;
    void unsetEcRestrictionDataNb();

    void setEcRestrictionDataNb(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExpectedUeBehaviourData> getExpectedUeBehaviourList() const;
    bool expectedUeBehaviourListIsSet() const;
    void unsetExpectedUeBehaviourList();

    void setExpectedUeBehaviourList(const std::shared_ptr<ExpectedUeBehaviourData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RatType>>& getPrimaryRatRestrictions();
    bool primaryRatRestrictionsIsSet() const;
    void unsetPrimaryRatRestrictions();

    void setPrimaryRatRestrictions(const std::vector<std::shared_ptr<RatType>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RatType>>& getSecondaryRatRestrictions();
    bool secondaryRatRestrictionsIsSet() const;
    void unsetSecondaryRatRestrictions();

    void setSecondaryRatRestrictions(const std::vector<std::shared_ptr<RatType>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<EdrxParameters>>& getEdrxParametersList();
    bool edrxParametersListIsSet() const;
    void unsetEdrxParametersList();

    void setEdrxParametersList(const std::vector<std::shared_ptr<EdrxParameters>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PtwParameters>>& getPtwParametersList();
    bool ptwParametersListIsSet() const;
    void unsetPtwParametersList();

    void setPtwParametersList(const std::vector<std::shared_ptr<PtwParameters>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIabOperationAllowed() const;
    bool iabOperationAllowedIsSet() const;
    void unsetIabOperationAllowed();

    void setIabOperationAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<WirelineArea>>& getWirelineForbiddenAreas();
    bool wirelineForbiddenAreasIsSet() const;
    void unsetWirelineForbiddenAreas();

    void setWirelineForbiddenAreas(const std::vector<std::shared_ptr<WirelineArea>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<WirelineServiceAreaRestriction> getWirelineServiceAreaRestriction() const;
    bool wirelineServiceAreaRestrictionIsSet() const;
    void unsetWirelineServiceAreaRestriction();

    void setWirelineServiceAreaRestriction(const std::shared_ptr<WirelineServiceAreaRestriction>& value);


protected:
    utility::string_t m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_Gpsis;
    bool m_GpsisIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_InternalGroupIds;
    bool m_InternalGroupIdsIsSet;
    std::map<utility::string_t, std::shared_ptr<utility::string_t>> m_SharedVnGroupDataIds;
    bool m_SharedVnGroupDataIdsIsSet;
    std::shared_ptr<AmbrRm> m_SubscribedUeAmbr;
    bool m_SubscribedUeAmbrIsSet;
    std::shared_ptr<Nssai> m_Nssai;
    bool m_NssaiIsSet;
    std::vector<std::shared_ptr<RatType>> m_RatRestrictions;
    bool m_RatRestrictionsIsSet;
    std::vector<std::shared_ptr<Area>> m_ForbiddenAreas;
    bool m_ForbiddenAreasIsSet;
    std::shared_ptr<ServiceAreaRestriction> m_ServiceAreaRestriction;
    bool m_ServiceAreaRestrictionIsSet;
    std::vector<std::shared_ptr<CoreNetworkType>> m_CoreNetworkTypeRestrictions;
    bool m_CoreNetworkTypeRestrictionsIsSet;
    int32_t m_RfspIndex;
    bool m_RfspIndexIsSet;
    int32_t m_SubsRegTimer;
    bool m_SubsRegTimerIsSet;
    int32_t m_UeUsageType;
    bool m_UeUsageTypeIsSet;
    bool m_MpsPriority;
    bool m_MpsPriorityIsSet;
    bool m_McsPriority;
    bool m_McsPriorityIsSet;
    int32_t m_ActiveTime;
    bool m_ActiveTimeIsSet;
    std::shared_ptr<SorInfo> m_SorInfo;
    bool m_SorInfoIsSet;
    bool m_SorInfoExpectInd;
    bool m_SorInfoExpectIndIsSet;
    bool m_SorafRetrieval;
    bool m_SorafRetrievalIsSet;
    std::vector<std::shared_ptr<SorUpdateIndicator>> m_SorUpdateIndicatorList;
    bool m_SorUpdateIndicatorListIsSet;
    std::shared_ptr<UpuInfo> m_UpuInfo;
    bool m_UpuInfoIsSet;
    bool m_MicoAllowed;
    bool m_MicoAllowedIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_SharedAmDataIds;
    bool m_SharedAmDataIdsIsSet;
    std::shared_ptr<OdbPacketServices> m_OdbPacketServices;
    bool m_OdbPacketServicesIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_SubscribedDnnList;
    bool m_SubscribedDnnListIsSet;
    int32_t m_ServiceGapTime;
    bool m_ServiceGapTimeIsSet;
    std::shared_ptr<MdtUserConsent> m_MdtUserConsent;
    bool m_MdtUserConsentIsSet;
    std::shared_ptr<MdtConfiguration> m_MdtConfiguration;
    bool m_MdtConfigurationIsSet;
    std::shared_ptr<TraceData> m_TraceData;
    bool m_TraceDataIsSet;
    std::shared_ptr<CagData> m_CagData;
    bool m_CagDataIsSet;
    utility::string_t m_StnSr;
    bool m_StnSrIsSet;
    utility::string_t m_CMsisdn;
    bool m_CMsisdnIsSet;
    int32_t m_NbIoTUePriority;
    bool m_NbIoTUePriorityIsSet;
    bool m_NssaiInclusionAllowed;
    bool m_NssaiInclusionAllowedIsSet;
    utility::string_t m_RgWirelineCharacteristics;
    bool m_RgWirelineCharacteristicsIsSet;
    std::shared_ptr<EcRestrictionDataWb> m_EcRestrictionDataWb;
    bool m_EcRestrictionDataWbIsSet;
    bool m_EcRestrictionDataNb;
    bool m_EcRestrictionDataNbIsSet;
    std::shared_ptr<ExpectedUeBehaviourData> m_ExpectedUeBehaviourList;
    bool m_ExpectedUeBehaviourListIsSet;
    std::vector<std::shared_ptr<RatType>> m_PrimaryRatRestrictions;
    bool m_PrimaryRatRestrictionsIsSet;
    std::vector<std::shared_ptr<RatType>> m_SecondaryRatRestrictions;
    bool m_SecondaryRatRestrictionsIsSet;
    std::vector<std::shared_ptr<EdrxParameters>> m_EdrxParametersList;
    bool m_EdrxParametersListIsSet;
    std::vector<std::shared_ptr<PtwParameters>> m_PtwParametersList;
    bool m_PtwParametersListIsSet;
    bool m_IabOperationAllowed;
    bool m_IabOperationAllowedIsSet;
    std::vector<std::shared_ptr<WirelineArea>> m_WirelineForbiddenAreas;
    bool m_WirelineForbiddenAreasIsSet;
    std::shared_ptr<WirelineServiceAreaRestriction> m_WirelineServiceAreaRestriction;
    bool m_WirelineServiceAreaRestrictionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AccessAndMobilitySubscriptionData_H_ */
