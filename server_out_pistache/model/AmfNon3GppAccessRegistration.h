/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AmfNon3GppAccessRegistration.h
 *
 * 
 */

#ifndef AmfNon3GppAccessRegistration_H_
#define AmfNon3GppAccessRegistration_H_


#include "ImsVoPs.h"
#include "ContextInfo.h"
#include "RatType.h"
#include <string>
#include "BackupAmfInfo.h"
#include "VgmlcAddress.h"
#include <vector>
#include "Guami.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AmfNon3GppAccessRegistration
{
public:
    AmfNon3GppAccessRegistration();
    virtual ~AmfNon3GppAccessRegistration();

    void validate();

    /////////////////////////////////////////////
    /// AmfNon3GppAccessRegistration members

    /// <summary>
    /// 
    /// </summary>
    std::string getAmfInstanceId() const;
    void setAmfInstanceId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getSupportedFeatures() const;
    void setSupportedFeatures(std::string const& value);
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();
    /// <summary>
    /// 
    /// </summary>
    bool isPurgeFlag() const;
    void setPurgeFlag(bool const value);
    bool purgeFlagIsSet() const;
    void unsetPurgeFlag();
    /// <summary>
    /// 
    /// </summary>
    std::string getPei() const;
    void setPei(std::string const& value);
    bool peiIsSet() const;
    void unsetPei();
    /// <summary>
    /// 
    /// </summary>
    ImsVoPs getImsVoPs() const;
    void setImsVoPs(ImsVoPs const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDeregCallbackUri() const;
    void setDeregCallbackUri(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getAmfServiceNameDereg() const;
    void setAmfServiceNameDereg(std::string const& value);
    bool amfServiceNameDeregIsSet() const;
    void unsetAmfServiceNameDereg();
    /// <summary>
    /// 
    /// </summary>
    std::string getPcscfRestorationCallbackUri() const;
    void setPcscfRestorationCallbackUri(std::string const& value);
    bool pcscfRestorationCallbackUriIsSet() const;
    void unsetPcscfRestorationCallbackUri();
    /// <summary>
    /// 
    /// </summary>
    std::string getAmfServiceNamePcscfRest() const;
    void setAmfServiceNamePcscfRest(std::string const& value);
    bool amfServiceNamePcscfRestIsSet() const;
    void unsetAmfServiceNamePcscfRest();
    /// <summary>
    /// 
    /// </summary>
    Guami getGuami() const;
    void setGuami(Guami const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<BackupAmfInfo>& getBackupAmfInfo();
    void setBackupAmfInfo(std::vector<BackupAmfInfo> const& value);
    bool backupAmfInfoIsSet() const;
    void unsetBackupAmfInfo();
    /// <summary>
    /// 
    /// </summary>
    RatType getRatType() const;
    void setRatType(RatType const& value);
    /// <summary>
    /// 
    /// </summary>
    bool isUrrpIndicator() const;
    void setUrrpIndicator(bool const value);
    bool urrpIndicatorIsSet() const;
    void unsetUrrpIndicator();
    /// <summary>
    /// 
    /// </summary>
    std::string getAmfEeSubscriptionId() const;
    void setAmfEeSubscriptionId(std::string const& value);
    bool amfEeSubscriptionIdIsSet() const;
    void unsetAmfEeSubscriptionId();
    /// <summary>
    /// 
    /// </summary>
    std::string getRegistrationTime() const;
    void setRegistrationTime(std::string const& value);
    bool registrationTimeIsSet() const;
    void unsetRegistrationTime();
    /// <summary>
    /// 
    /// </summary>
    VgmlcAddress getVgmlcAddress() const;
    void setVgmlcAddress(VgmlcAddress const& value);
    bool vgmlcAddressIsSet() const;
    void unsetVgmlcAddress();
    /// <summary>
    /// 
    /// </summary>
    ContextInfo getContextInfo() const;
    void setContextInfo(ContextInfo const& value);
    bool contextInfoIsSet() const;
    void unsetContextInfo();

    friend void to_json(nlohmann::json& j, const AmfNon3GppAccessRegistration& o);
    friend void from_json(const nlohmann::json& j, AmfNon3GppAccessRegistration& o);
protected:
    std::string m_AmfInstanceId;

    std::string m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
    bool m_PurgeFlag;
    bool m_PurgeFlagIsSet;
    std::string m_Pei;
    bool m_PeiIsSet;
    ImsVoPs m_ImsVoPs;

    std::string m_DeregCallbackUri;

    std::string m_AmfServiceNameDereg;
    bool m_AmfServiceNameDeregIsSet;
    std::string m_PcscfRestorationCallbackUri;
    bool m_PcscfRestorationCallbackUriIsSet;
    std::string m_AmfServiceNamePcscfRest;
    bool m_AmfServiceNamePcscfRestIsSet;
    Guami m_Guami;

    std::vector<BackupAmfInfo> m_BackupAmfInfo;
    bool m_BackupAmfInfoIsSet;
    RatType m_RatType;

    bool m_UrrpIndicator;
    bool m_UrrpIndicatorIsSet;
    std::string m_AmfEeSubscriptionId;
    bool m_AmfEeSubscriptionIdIsSet;
    std::string m_RegistrationTime;
    bool m_RegistrationTimeIsSet;
    VgmlcAddress m_VgmlcAddress;
    bool m_VgmlcAddressIsSet;
    ContextInfo m_ContextInfo;
    bool m_ContextInfoIsSet;
};

}
}
}
}

#endif /* AmfNon3GppAccessRegistration_H_ */
