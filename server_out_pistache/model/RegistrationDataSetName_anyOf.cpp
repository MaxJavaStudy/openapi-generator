/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RegistrationDataSetName_anyOf.h"
#include <stdexcept>
#include <sstream>

namespace org {
namespace openapitools {
namespace server {
namespace model {

RegistrationDataSetName_anyOf::RegistrationDataSetName_anyOf()
{
    
}

RegistrationDataSetName_anyOf::~RegistrationDataSetName_anyOf()
{
}

void RegistrationDataSetName_anyOf::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RegistrationDataSetName_anyOf& o)
{
    j = nlohmann::json();
    
    switch (o.getValue())
    {
        case RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::AMF_3GPP:
            j = "AMF_3GPP";
            break;
        case RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::AMF_NON_3GPP:
            j = "AMF_NON_3GPP";
            break;
        case RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::SMF_PDU_SESSIONS:
            j = "SMF_PDU_SESSIONS";
            break;
        case RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::SMSF_3GPP:
            j = "SMSF_3GPP";
            break;
        case RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::SMSF_NON_3GPP:
            j = "SMSF_NON_3GPP";
            break;
    }
}

void from_json(const nlohmann::json& j, RegistrationDataSetName_anyOf& o)
{
    
    auto s = j.get<std::string>();
    if (s == "AMF_3GPP") {
     o.setValue(RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::AMF_3GPP);
    } 
    else if (s == "AMF_NON_3GPP") {
     o.setValue(RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::AMF_NON_3GPP);
    } 
    else if (s == "SMF_PDU_SESSIONS") {
     o.setValue(RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::SMF_PDU_SESSIONS);
    } 
    else if (s == "SMSF_3GPP") {
     o.setValue(RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::SMSF_3GPP);
    } 
    else if (s == "SMSF_NON_3GPP") {
     o.setValue(RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf::SMSF_NON_3GPP);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf";
     throw std::invalid_argument(ss.str());
    } 

}

RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf RegistrationDataSetName_anyOf::getValue() const
{
    return m_value;
}
void RegistrationDataSetName_anyOf::setValue(RegistrationDataSetName_anyOf::eRegistrationDataSetName_anyOf value)
{
    m_value = value;
}

}
}
}
}

