/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AreaScope.h
 *
 * 
 */

#ifndef AreaScope_H_
#define AreaScope_H_


#include <string>
#include <map>
#include <vector>
#include "TacInfo.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  AreaScope: public jsonParser::jsonParser<AreaScope>
{
public:
    explicit AreaScope(){
        // constructor
        
            m_EutraCellIdListFlag = (staticjson::Flags::Optional);

            m_NrCellIdListFlag = (staticjson::Flags::Optional);

            m_TacListFlag = (staticjson::Flags::Optional);

            m_TacInfoPerPlmnFlag = (staticjson::Flags::Optional);
    };
    virtual ~AreaScope(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : EutraCellIdList NrCellIdList TacList TacInfoPerPlmn 
        h->add_property("eutraCellIdList", &this->m_EutraCellIdList, m_EutraCellIdListFlag);
        h->add_property("nrCellIdList", &this->m_NrCellIdList, m_NrCellIdListFlag);
        h->add_property("tacList", &this->m_TacList, m_TacListFlag);
        h->add_property("tacInfoPerPlmn", &this->m_TacInfoPerPlmn, m_TacInfoPerPlmnFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const AreaScope& obj)
    {
                o<< convert2string(std::string("EutraCellIdList"), obj.m_EutraCellIdList) <<std::endl;
               o<< convert2string(std::string("NrCellIdList"), obj.m_NrCellIdList) <<std::endl;
               o<< convert2string(std::string("TacList"), obj.m_TacList) <<std::endl;
               o<< convert2string(std::string("TacInfoPerPlmn"), obj.m_TacInfoPerPlmn) <<std::endl;
       
     
        return o;
    }

    /////////////////////////////////////////////
    /// AreaScope members vars : EutraCellIdList NrCellIdList TacList TacInfoPerPlmn 

    std::vector<std::string>&  getEutraCellIdList()
    {
        return m_EutraCellIdList;
    }
    void  setEutraCellIdList(std::vector<std::string> const& value)
    {
        m_EutraCellIdList = value;
    }

std::vector<std::string>&  getNrCellIdList()
    {
        return m_NrCellIdList;
    }
    void  setNrCellIdList(std::vector<std::string> const& value)
    {
        m_NrCellIdList = value;
    }

std::vector<std::string>&  getTacList()
    {
        return m_TacList;
    }
    void  setTacList(std::vector<std::string> const& value)
    {
        m_TacList = value;
    }

std::map<std::string, TacInfo>&  getTacInfoPerPlmn()
    {
        return m_TacInfoPerPlmn;
    }
    void  setTacInfoPerPlmn(std::map<std::string, TacInfo> const& value)
    {
        m_TacInfoPerPlmn = value;
    }



    
public:
    std::vector<std::string> m_EutraCellIdList;
    
    unsigned m_EutraCellIdListFlag;
    std::vector<std::string> m_NrCellIdList;
    
    unsigned m_NrCellIdListFlag;
    std::vector<std::string> m_TacList;
    
    unsigned m_TacListFlag;
    std::map<std::string, TacInfo> m_TacInfoPerPlmn;
    
    unsigned m_TacInfoPerPlmnFlag;
  
};
}
}
}
}

#endif /* AreaScope_H_ */
