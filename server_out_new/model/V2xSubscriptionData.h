/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * V2xSubscriptionData.h
 *
 * 
 */

#ifndef V2xSubscriptionData_H_
#define V2xSubscriptionData_H_


#include "NrV2xAuth.h"
#include "LteV2xAuth.h"
#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  V2xSubscriptionData: public jsonParser::jsonParser<V2xSubscriptionData>
{
public:
    explicit V2xSubscriptionData(){
        // constructor
        
            m_NrV2xServicesAuthFlag = (staticjson::Flags::Optional);

            m_LteV2xServicesAuthFlag = (staticjson::Flags::Optional);
m_NrUePc5Ambr = "";
        
            m_NrUePc5AmbrFlag = (staticjson::Flags::Optional);
m_LtePc5Ambr = "";
        
            m_LtePc5AmbrFlag = (staticjson::Flags::Optional);
    };
    virtual ~V2xSubscriptionData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : NrV2xServicesAuth LteV2xServicesAuth NrUePc5Ambr LtePc5Ambr 
        h->add_property("nrV2xServicesAuth", &this->m_NrV2xServicesAuth, m_NrV2xServicesAuthFlag);
        h->add_property("lteV2xServicesAuth", &this->m_LteV2xServicesAuth, m_LteV2xServicesAuthFlag);
        h->add_property("nrUePc5Ambr", &this->m_NrUePc5Ambr, m_NrUePc5AmbrFlag);
        h->add_property("ltePc5Ambr", &this->m_LtePc5Ambr, m_LtePc5AmbrFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const V2xSubscriptionData& obj)
    {
        
        o << "NrV2xServicesAuth : " << obj.m_NrV2xServicesAuth << std::endl;

        o << "LteV2xServicesAuth : " << obj.m_LteV2xServicesAuth << std::endl;

        o << "NrUePc5Ambr : " << obj.m_NrUePc5Ambr << std::endl;

        o << "LtePc5Ambr : " << obj.m_LtePc5Ambr << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// V2xSubscriptionData members vars : NrV2xServicesAuth LteV2xServicesAuth NrUePc5Ambr LtePc5Ambr 

    NrV2xAuth  getNrV2xServicesAuth() const
    {
        return m_NrV2xServicesAuth;
    }
    void  setNrV2xServicesAuth(NrV2xAuth const& value)
    {
        m_NrV2xServicesAuth = value;
    }

LteV2xAuth  getLteV2xServicesAuth() const
    {
        return m_LteV2xServicesAuth;
    }
    void  setLteV2xServicesAuth(LteV2xAuth const& value)
    {
        m_LteV2xServicesAuth = value;
    }

std::string  getNrUePc5Ambr() const
    {
        return m_NrUePc5Ambr;
    }
    void  setNrUePc5Ambr(std::string const& value)
    {
        m_NrUePc5Ambr = value;
    }

std::string  getLtePc5Ambr() const
    {
        return m_LtePc5Ambr;
    }
    void  setLtePc5Ambr(std::string const& value)
    {
        m_LtePc5Ambr = value;
    }



    
public:
    NrV2xAuth m_NrV2xServicesAuth;
    
    unsigned m_NrV2xServicesAuthFlag;
    LteV2xAuth m_LteV2xServicesAuth;
    
    unsigned m_LteV2xServicesAuthFlag;
    std::string m_NrUePc5Ambr;
    
    unsigned m_NrUePc5AmbrFlag;
    std::string m_LtePc5Ambr;
    
    unsigned m_LtePc5AmbrFlag;
  
};
}
}
}
}

#endif /* V2xSubscriptionData_H_ */
