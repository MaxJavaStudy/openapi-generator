/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ContextInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ContextInfo::ContextInfo()
{
    m_OrigHeadersIsSet = false;
}

ContextInfo::~ContextInfo()
{
}

void ContextInfo::validate()
{
    // TODO: implement validation
}

web::json::value ContextInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OrigHeadersIsSet)
    {
        val[utility::conversions::to_string_t("origHeaders")] = ModelBase::toJson(m_OrigHeaders);
    }

    return val;
}

bool ContextInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("origHeaders")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origHeaders"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_origHeaders;
            ok &= ModelBase::fromJson(fieldValue, refVal_origHeaders);
            setOrigHeaders(refVal_origHeaders);
        }
    }
    return ok;
}

void ContextInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_OrigHeadersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origHeaders"), m_OrigHeaders));
    }
}

bool ContextInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("origHeaders")))
    {
        std::vector<utility::string_t> refVal_origHeaders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origHeaders")), refVal_origHeaders );
        setOrigHeaders(refVal_origHeaders);
    }
    return ok;
}

std::vector<utility::string_t>& ContextInfo::getOrigHeaders()
{
    return m_OrigHeaders;
}

void ContextInfo::setOrigHeaders(const std::vector<utility::string_t>& value)
{
    m_OrigHeaders = value;
    m_OrigHeadersIsSet = true;
}

bool ContextInfo::origHeadersIsSet() const
{
    return m_OrigHeadersIsSet;
}

void ContextInfo::unsetOrigHeaders()
{
    m_OrigHeadersIsSet = false;
}
}
}
}
}


