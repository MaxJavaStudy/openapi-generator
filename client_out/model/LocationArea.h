/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LocationArea.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LocationArea_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LocationArea_H_


#include "../ModelBase.h"

#include "CivicAddress.h"
#include "GeographicArea.h"
#include "NetworkAreaInfo.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  LocationArea
    : public ModelBase
{
public:
    LocationArea();
    virtual ~LocationArea();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LocationArea members

    /// <summary>
    /// Identifies a list of geographic area of the user where the UE is located.
    /// </summary>
    std::vector<std::shared_ptr<GeographicArea>>& getGeographicAreas();
    bool geographicAreasIsSet() const;
    void unsetGeographicAreas();

    void setGeographicAreas(const std::vector<std::shared_ptr<GeographicArea>>& value);

    /// <summary>
    /// Identifies a list of civic addresses of the user where the UE is located.
    /// </summary>
    std::vector<std::shared_ptr<CivicAddress>>& getCivicAddresses();
    bool civicAddressesIsSet() const;
    void unsetCivicAddresses();

    void setCivicAddresses(const std::vector<std::shared_ptr<CivicAddress>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetworkAreaInfo> getNwAreaInfo() const;
    bool nwAreaInfoIsSet() const;
    void unsetNwAreaInfo();

    void setNwAreaInfo(const std::shared_ptr<NetworkAreaInfo>& value);


protected:
    std::vector<std::shared_ptr<GeographicArea>> m_GeographicAreas;
    bool m_GeographicAreasIsSet;
    std::vector<std::shared_ptr<CivicAddress>> m_CivicAddresses;
    bool m_CivicAddressesIsSet;
    std::shared_ptr<NetworkAreaInfo> m_NwAreaInfo;
    bool m_NwAreaInfoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LocationArea_H_ */
