/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TraceData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TraceData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TraceData_H_


#include "../ModelBase.h"

#include "TraceDepth.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  TraceData
    : public ModelBase
{
public:
    TraceData();
    virtual ~TraceData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TraceData members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTraceRef() const;
    bool traceRefIsSet() const;
    void unsetTraceRef();

    void setTraceRef(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TraceDepth> getTraceDepth() const;
    bool traceDepthIsSet() const;
    void unsetTraceDepth();

    void setTraceDepth(const std::shared_ptr<TraceDepth>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNeTypeList() const;
    bool neTypeListIsSet() const;
    void unsetNeTypeList();

    void setNeTypeList(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEventList() const;
    bool eventListIsSet() const;
    void unsetEventList();

    void setEventList(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCollectionEntityIpv4Addr() const;
    bool collectionEntityIpv4AddrIsSet() const;
    void unsetCollectionEntityIpv4Addr();

    void setCollectionEntityIpv4Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCollectionEntityIpv6Addr() const;
    bool collectionEntityIpv6AddrIsSet() const;
    void unsetCollectionEntityIpv6Addr();

    void setCollectionEntityIpv6Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInterfaceList() const;
    bool interfaceListIsSet() const;
    void unsetInterfaceList();

    void setInterfaceList(const utility::string_t& value);


protected:
    utility::string_t m_TraceRef;
    bool m_TraceRefIsSet;
    std::shared_ptr<TraceDepth> m_TraceDepth;
    bool m_TraceDepthIsSet;
    utility::string_t m_NeTypeList;
    bool m_NeTypeListIsSet;
    utility::string_t m_EventList;
    bool m_EventListIsSet;
    utility::string_t m_CollectionEntityIpv4Addr;
    bool m_CollectionEntityIpv4AddrIsSet;
    utility::string_t m_CollectionEntityIpv6Addr;
    bool m_CollectionEntityIpv6AddrIsSet;
    utility::string_t m_InterfaceList;
    bool m_InterfaceListIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TraceData_H_ */
