/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GlobalRanNodeId.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalRanNodeId_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalRanNodeId_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "GNbId.h"
#include "PlmnId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  GlobalRanNodeId
    : public ModelBase
{
public:
    GlobalRanNodeId();
    virtual ~GlobalRanNodeId();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GlobalRanNodeId members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getPlmnId() const;
    bool plmnIdIsSet() const;
    void unsetPlmnId();

    void setPlmnId(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getN3IwfId() const;
    bool n3IwfIdIsSet() const;
    void unsetN3IwfId();

    void setN3IwfId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GNbId> getGNbId() const;
    bool gNbIdIsSet() const;
    void unsetGNbId();

    void setGNbId(const std::shared_ptr<GNbId>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNgeNbId() const;
    bool ngeNbIdIsSet() const;
    void unsetNgeNbId();

    void setNgeNbId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWagfId() const;
    bool wagfIdIsSet() const;
    void unsetWagfId();

    void setWagfId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTngfId() const;
    bool tngfIdIsSet() const;
    void unsetTngfId();

    void setTngfId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNid() const;
    bool nidIsSet() const;
    void unsetNid();

    void setNid(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getENbId() const;
    bool eNbIdIsSet() const;
    void unsetENbId();

    void setENbId(const utility::string_t& value);


protected:
    std::shared_ptr<PlmnId> m_PlmnId;
    bool m_PlmnIdIsSet;
    utility::string_t m_N3IwfId;
    bool m_N3IwfIdIsSet;
    std::shared_ptr<GNbId> m_GNbId;
    bool m_GNbIdIsSet;
    utility::string_t m_NgeNbId;
    bool m_NgeNbIdIsSet;
    utility::string_t m_WagfId;
    bool m_WagfIdIsSet;
    utility::string_t m_TngfId;
    bool m_TngfIdIsSet;
    utility::string_t m_Nid;
    bool m_NidIsSet;
    utility::string_t m_ENbId;
    bool m_ENbIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalRanNodeId_H_ */
