/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UnrelatedClass.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef UnrelatedClass_H_
#define UnrelatedClass_H_

#include "CSB_JsonParser.h"
#include "DefaultUnrelatedClass.h"
#include "ExternalUnrelatedClass.h"
#include "ServiceTypeUnrelatedClass.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UnrelatedClass : public jsonParser::jsonParser<UnrelatedClass> {
public:
  explicit UnrelatedClass() {
    // constructor

    m_DefaultUnrelatedClassFlag = staticjson::Flags::Default;
    m_DefaultUnrelatedClassOutFlag.reset(new unsigned);
    *m_DefaultUnrelatedClassOutFlag.get() = 0;

    m_ExternalUnrelatedClassFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ExternalUnrelatedClassOutFlag.reset(new unsigned);
    *m_ExternalUnrelatedClassOutFlag.get() = 0;

    m_ServiceTypeUnrelatedClassesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ServiceTypeUnrelatedClassesOutFlag.reset(new unsigned);
    *m_ServiceTypeUnrelatedClassesOutFlag.get() = 0;
  };
  virtual ~UnrelatedClass(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DefaultUnrelatedClass
    // ExternalUnrelatedClass ServiceTypeUnrelatedClasses
    h->add_property("defaultUnrelatedClass", &this->m_DefaultUnrelatedClass,
                    m_DefaultUnrelatedClassFlag);
    h->add_optional_property(
        "externalUnrelatedClass", &this->m_ExternalUnrelatedClass,
        m_ExternalUnrelatedClassFlag, m_ExternalUnrelatedClassOutFlag);
    h->add_optional_property("serviceTypeUnrelatedClasses",
                             &this->m_ServiceTypeUnrelatedClasses,
                             m_ServiceTypeUnrelatedClassesFlag,
                             m_ServiceTypeUnrelatedClassesOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const UnrelatedClass &obj) {

    o << "DefaultUnrelatedClass : " << obj.m_DefaultUnrelatedClass << std::endl;

    o << "ExternalUnrelatedClass, optional flag is : "
      << *m_ExternalUnrelatedClassOutFlag
      << ", content is : " << obj.m_ExternalUnrelatedClass << std::endl;
    o << "ServiceTypeUnrelatedClasses, optional flag is : "
      << *m_ServiceTypeUnrelatedClassesOutFlag << std::endl;
    o << convert2string(std::string("ServiceTypeUnrelatedClasses"),
                        obj.m_ServiceTypeUnrelatedClasses)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UnrelatedClass members vars : DefaultUnrelatedClass ExternalUnrelatedClass
  /// ServiceTypeUnrelatedClasses

  DefaultUnrelatedClass getDefaultUnrelatedClass() const {
    return m_DefaultUnrelatedClass;
  }
  void setDefaultUnrelatedClass(DefaultUnrelatedClass const &value) {
    m_DefaultUnrelatedClass = value;
  }

  ExternalUnrelatedClass getExternalUnrelatedClass() const {
    return m_ExternalUnrelatedClass;
  }
  void setExternalUnrelatedClass(ExternalUnrelatedClass const &value) {
    m_ExternalUnrelatedClass = value;
  }

  std::vector<ServiceTypeUnrelatedClass> &getServiceTypeUnrelatedClasses() {
    return m_ServiceTypeUnrelatedClasses;
  }
  void setServiceTypeUnrelatedClasses(
      std::vector<ServiceTypeUnrelatedClass> const &value) {
    m_ServiceTypeUnrelatedClasses = value;
  }

public:
  DefaultUnrelatedClass m_DefaultUnrelatedClass;

  unsigned m_DefaultUnrelatedClassFlag;
  shared_ptr<unsigned> m_DefaultUnrelatedClassOutFlag;
  ExternalUnrelatedClass m_ExternalUnrelatedClass;

  unsigned m_ExternalUnrelatedClassFlag;
  shared_ptr<unsigned> m_ExternalUnrelatedClassOutFlag;
  std::vector<ServiceTypeUnrelatedClass> m_ServiceTypeUnrelatedClasses;

  unsigned m_ServiceTypeUnrelatedClassesFlag;
  shared_ptr<unsigned> m_ServiceTypeUnrelatedClassesOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UnrelatedClass_H_ */
