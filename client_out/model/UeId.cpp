/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UeId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UeId::UeId()
{
    m_Supi = utility::conversions::to_string_t("");
    m_SupiIsSet = false;
    m_GpsiListIsSet = false;
}

UeId::~UeId()
{
}

void UeId::validate()
{
    // TODO: implement validation
}

web::json::value UeId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupiIsSet)
    {
        val[utility::conversions::to_string_t("supi")] = ModelBase::toJson(m_Supi);
    }
    if(m_GpsiListIsSet)
    {
        val[utility::conversions::to_string_t("gpsiList")] = ModelBase::toJson(m_GpsiList);
    }

    return val;
}

bool UeId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("supi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supi;
            ok &= ModelBase::fromJson(fieldValue, refVal_supi);
            setSupi(refVal_supi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gpsiList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gpsiList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_gpsiList;
            ok &= ModelBase::fromJson(fieldValue, refVal_gpsiList);
            setGpsiList(refVal_gpsiList);
        }
    }
    return ok;
}

void UeId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SupiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supi"), m_Supi));
    }
    if(m_GpsiListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gpsiList"), m_GpsiList));
    }
}

bool UeId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("supi")))
    {
        utility::string_t refVal_supi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supi")), refVal_supi );
        setSupi(refVal_supi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gpsiList")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_gpsiList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gpsiList")), refVal_gpsiList );
        setGpsiList(refVal_gpsiList);
    }
    return ok;
}

utility::string_t UeId::getSupi() const
{
    return m_Supi;
}

void UeId::setSupi(const utility::string_t& value)
{
    m_Supi = value;
    m_SupiIsSet = true;
}

bool UeId::supiIsSet() const
{
    return m_SupiIsSet;
}

void UeId::unsetSupi()
{
    m_SupiIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& UeId::getGpsiList()
{
    return m_GpsiList;
}

void UeId::setGpsiList(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_GpsiList = value;
    m_GpsiListIsSet = true;
}

bool UeId::gpsiListIsSet() const
{
    return m_GpsiListIsSet;
}

void UeId::unsetGpsiList()
{
    m_GpsiListIsSet = false;
}
}
}
}
}


