/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ScheduledCommunicationTime.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef ScheduledCommunicationTime_H_
#define ScheduledCommunicationTime_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ScheduledCommunicationTime
    : public jsonParser::jsonParser<ScheduledCommunicationTime> {
public:
  explicit ScheduledCommunicationTime() {
    // constructor

    m_DaysOfWeekFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DaysOfWeekOutFlag.reset(new unsigned);
    *m_DaysOfWeekOutFlag.get() = 0;
    m_TimeOfDayStart = "";

    m_TimeOfDayStartFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_TimeOfDayStartOutFlag.reset(new unsigned);
    *m_TimeOfDayStartOutFlag.get() = 0;
    m_TimeOfDayEnd = "";

    m_TimeOfDayEndFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_TimeOfDayEndOutFlag.reset(new unsigned);
    *m_TimeOfDayEndOutFlag.get() = 0;
  };
  virtual ~ScheduledCommunicationTime(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DaysOfWeek TimeOfDayStart
    // TimeOfDayEnd
    h->add_optional_property("daysOfWeek", &this->m_DaysOfWeek,
                             m_DaysOfWeekFlag, m_DaysOfWeekOutFlag);
    h->add_optional_property("timeOfDayStart", &this->m_TimeOfDayStart,
                             m_TimeOfDayStartFlag, m_TimeOfDayStartOutFlag);
    h->add_optional_property("timeOfDayEnd", &this->m_TimeOfDayEnd,
                             m_TimeOfDayEndFlag, m_TimeOfDayEndOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const ScheduledCommunicationTime &obj) {
    o << "DaysOfWeek, optional flag is : " << *m_DaysOfWeekOutFlag << std::endl;
    o << convert2string(std::string("DaysOfWeek"), obj.m_DaysOfWeek)
      << std::endl;

    o << "TimeOfDayStart, optional flag is : " << *m_TimeOfDayStartOutFlag
      << ", content is : " << obj.m_TimeOfDayStart << std::endl;

    o << "TimeOfDayEnd, optional flag is : " << *m_TimeOfDayEndOutFlag
      << ", content is : " << obj.m_TimeOfDayEnd << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// ScheduledCommunicationTime members vars : DaysOfWeek TimeOfDayStart
  /// TimeOfDayEnd

  std::vector<int32_t> &getDaysOfWeek() { return m_DaysOfWeek; }
  void setDaysOfWeek(std::vector<int32_t> const value) { m_DaysOfWeek = value; }

  std::string getTimeOfDayStart() const { return m_TimeOfDayStart; }
  void setTimeOfDayStart(std::string const &value) { m_TimeOfDayStart = value; }

  std::string getTimeOfDayEnd() const { return m_TimeOfDayEnd; }
  void setTimeOfDayEnd(std::string const &value) { m_TimeOfDayEnd = value; }

public:
  std::vector<int32_t> m_DaysOfWeek;

  unsigned m_DaysOfWeekFlag;
  shared_ptr<unsigned> m_DaysOfWeekOutFlag;
  std::string m_TimeOfDayStart;

  unsigned m_TimeOfDayStartFlag;
  shared_ptr<unsigned> m_TimeOfDayStartOutFlag;
  std::string m_TimeOfDayEnd;

  unsigned m_TimeOfDayEndFlag;
  shared_ptr<unsigned> m_TimeOfDayEndOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ScheduledCommunicationTime_H_ */
