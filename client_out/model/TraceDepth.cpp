/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TraceDepth.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TraceDepth::TraceDepth()
{
}

TraceDepth::~TraceDepth()
{
}

void TraceDepth::validate()
{
    // TODO: implement validation
}

web::json::value TraceDepth::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eTraceDepth::TraceDepth_MINIMUM) val = web::json::value::string(U(MINIMUM));
    if (m_value == eTraceDepth::TraceDepth_MEDIUM) val = web::json::value::string(U(MEDIUM));
    if (m_value == eTraceDepth::TraceDepth_MAXIMUM) val = web::json::value::string(U(MAXIMUM));
    if (m_value == eTraceDepth::TraceDepth_MINIMUM_WO_VENDOR_EXTENSION) val = web::json::value::string(U(MINIMUM_WO_VENDOR_EXTENSION));
    if (m_value == eTraceDepth::TraceDepth_MEDIUM_WO_VENDOR_EXTENSION) val = web::json::value::string(U(MEDIUM_WO_VENDOR_EXTENSION));
    if (m_value == eTraceDepth::TraceDepth_MAXIMUM_WO_VENDOR_EXTENSION) val = web::json::value::string(U(MAXIMUM_WO_VENDOR_EXTENSION));

    return val;
}

bool TraceDepth::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(MINIMUM)) m_value = eTraceDepth::TraceDepth_MINIMUM;
    if (s == utility::conversions::to_string_t(MEDIUM)) m_value = eTraceDepth::TraceDepth_MEDIUM;
    if (s == utility::conversions::to_string_t(MAXIMUM)) m_value = eTraceDepth::TraceDepth_MAXIMUM;
    if (s == utility::conversions::to_string_t(MINIMUM_WO_VENDOR_EXTENSION)) m_value = eTraceDepth::TraceDepth_MINIMUM_WO_VENDOR_EXTENSION;
    if (s == utility::conversions::to_string_t(MEDIUM_WO_VENDOR_EXTENSION)) m_value = eTraceDepth::TraceDepth_MEDIUM_WO_VENDOR_EXTENSION;
    if (s == utility::conversions::to_string_t(MAXIMUM_WO_VENDOR_EXTENSION)) m_value = eTraceDepth::TraceDepth_MAXIMUM_WO_VENDOR_EXTENSION;
    return true;
}

void TraceDepth::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eTraceDepth::TraceDepth_MINIMUM) s = utility::conversions::to_string_t(MINIMUM);
    if (m_value == eTraceDepth::TraceDepth_MEDIUM) s = utility::conversions::to_string_t(MEDIUM);
    if (m_value == eTraceDepth::TraceDepth_MAXIMUM) s = utility::conversions::to_string_t(MAXIMUM);
    if (m_value == eTraceDepth::TraceDepth_MINIMUM_WO_VENDOR_EXTENSION) s = utility::conversions::to_string_t(MINIMUM_WO_VENDOR_EXTENSION);
    if (m_value == eTraceDepth::TraceDepth_MEDIUM_WO_VENDOR_EXTENSION) s = utility::conversions::to_string_t(MEDIUM_WO_VENDOR_EXTENSION);
    if (m_value == eTraceDepth::TraceDepth_MAXIMUM_WO_VENDOR_EXTENSION) s = utility::conversions::to_string_t(MAXIMUM_WO_VENDOR_EXTENSION);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool TraceDepth::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eTraceDepth v;

        
        if (s == utility::conversions::to_string_t(MINIMUM)) v = eTraceDepth::TraceDepth_MINIMUM;
        if (s == utility::conversions::to_string_t(MEDIUM)) v = eTraceDepth::TraceDepth_MEDIUM;
        if (s == utility::conversions::to_string_t(MAXIMUM)) v = eTraceDepth::TraceDepth_MAXIMUM;
        if (s == utility::conversions::to_string_t(MINIMUM_WO_VENDOR_EXTENSION)) v = eTraceDepth::TraceDepth_MINIMUM_WO_VENDOR_EXTENSION;
        if (s == utility::conversions::to_string_t(MEDIUM_WO_VENDOR_EXTENSION)) v = eTraceDepth::TraceDepth_MEDIUM_WO_VENDOR_EXTENSION;
        if (s == utility::conversions::to_string_t(MAXIMUM_WO_VENDOR_EXTENSION)) v = eTraceDepth::TraceDepth_MAXIMUM_WO_VENDOR_EXTENSION;

        setValue(v);
    }
    return ok;
}

TraceDepth::eTraceDepth TraceDepth::getValue() const
{
   return m_value;
}

void TraceDepth::setValue(TraceDepth::eTraceDepth const value)
{
   m_value = value;
}


}
}
}
}


