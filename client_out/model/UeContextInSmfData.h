/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UeContextInSmfData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UeContextInSmfData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UeContextInSmfData_H_


#include "../ModelBase.h"

#include "PgwInfo.h"
#include "EmergencyInfo.h"
#include <map>
#include <vector>
#include "PduSession.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  UeContextInSmfData
    : public ModelBase
{
public:
    UeContextInSmfData();
    virtual ~UeContextInSmfData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UeContextInSmfData members

    /// <summary>
    /// A map (list of key-value pairs where PduSessionId serves as key) of PduSessions
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<PduSession>>& getPduSessions();
    bool pduSessionsIsSet() const;
    void unsetPduSessions();

    void setPduSessions(const std::map<utility::string_t, std::shared_ptr<PduSession>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PgwInfo>>& getPgwInfo();
    bool pgwInfoIsSet() const;
    void unsetPgwInfo();

    void setPgwInfo(const std::vector<std::shared_ptr<PgwInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EmergencyInfo> getEmergencyInfo() const;
    bool emergencyInfoIsSet() const;
    void unsetEmergencyInfo();

    void setEmergencyInfo(const std::shared_ptr<EmergencyInfo>& value);


protected:
    std::map<utility::string_t, std::shared_ptr<PduSession>> m_PduSessions;
    bool m_PduSessionsIsSet;
    std::vector<std::shared_ptr<PgwInfo>> m_PgwInfo;
    bool m_PgwInfoIsSet;
    std::shared_ptr<EmergencyInfo> m_EmergencyInfo;
    bool m_EmergencyInfoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UeContextInSmfData_H_ */
