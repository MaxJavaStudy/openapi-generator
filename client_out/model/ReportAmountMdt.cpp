/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReportAmountMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReportAmountMdt::ReportAmountMdt()
{
}

ReportAmountMdt::~ReportAmountMdt()
{
}

void ReportAmountMdt::validate()
{
    // TODO: implement validation
}

web::json::value ReportAmountMdt::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eReportAmountMdt::ReportAmountMdt__1) val = web::json::value::string(U(1));
    if (m_value == eReportAmountMdt::ReportAmountMdt__2) val = web::json::value::string(U(2));
    if (m_value == eReportAmountMdt::ReportAmountMdt__4) val = web::json::value::string(U(4));
    if (m_value == eReportAmountMdt::ReportAmountMdt__8) val = web::json::value::string(U(8));
    if (m_value == eReportAmountMdt::ReportAmountMdt__16) val = web::json::value::string(U(16));
    if (m_value == eReportAmountMdt::ReportAmountMdt__32) val = web::json::value::string(U(32));
    if (m_value == eReportAmountMdt::ReportAmountMdt__64) val = web::json::value::string(U(64));
    if (m_value == eReportAmountMdt::ReportAmountMdt_INFINITY) val = web::json::value::string(U(infinity));

    return val;
}

bool ReportAmountMdt::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(1)) m_value = eReportAmountMdt::ReportAmountMdt__1;
    if (s == utility::conversions::to_string_t(2)) m_value = eReportAmountMdt::ReportAmountMdt__2;
    if (s == utility::conversions::to_string_t(4)) m_value = eReportAmountMdt::ReportAmountMdt__4;
    if (s == utility::conversions::to_string_t(8)) m_value = eReportAmountMdt::ReportAmountMdt__8;
    if (s == utility::conversions::to_string_t(16)) m_value = eReportAmountMdt::ReportAmountMdt__16;
    if (s == utility::conversions::to_string_t(32)) m_value = eReportAmountMdt::ReportAmountMdt__32;
    if (s == utility::conversions::to_string_t(64)) m_value = eReportAmountMdt::ReportAmountMdt__64;
    if (s == utility::conversions::to_string_t(infinity)) m_value = eReportAmountMdt::ReportAmountMdt_INFINITY;
    return true;
}

void ReportAmountMdt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eReportAmountMdt::ReportAmountMdt__1) s = utility::conversions::to_string_t(1);
    if (m_value == eReportAmountMdt::ReportAmountMdt__2) s = utility::conversions::to_string_t(2);
    if (m_value == eReportAmountMdt::ReportAmountMdt__4) s = utility::conversions::to_string_t(4);
    if (m_value == eReportAmountMdt::ReportAmountMdt__8) s = utility::conversions::to_string_t(8);
    if (m_value == eReportAmountMdt::ReportAmountMdt__16) s = utility::conversions::to_string_t(16);
    if (m_value == eReportAmountMdt::ReportAmountMdt__32) s = utility::conversions::to_string_t(32);
    if (m_value == eReportAmountMdt::ReportAmountMdt__64) s = utility::conversions::to_string_t(64);
    if (m_value == eReportAmountMdt::ReportAmountMdt_INFINITY) s = utility::conversions::to_string_t(infinity);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool ReportAmountMdt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eReportAmountMdt v;

        
        if (s == utility::conversions::to_string_t(1)) v = eReportAmountMdt::ReportAmountMdt__1;
        if (s == utility::conversions::to_string_t(2)) v = eReportAmountMdt::ReportAmountMdt__2;
        if (s == utility::conversions::to_string_t(4)) v = eReportAmountMdt::ReportAmountMdt__4;
        if (s == utility::conversions::to_string_t(8)) v = eReportAmountMdt::ReportAmountMdt__8;
        if (s == utility::conversions::to_string_t(16)) v = eReportAmountMdt::ReportAmountMdt__16;
        if (s == utility::conversions::to_string_t(32)) v = eReportAmountMdt::ReportAmountMdt__32;
        if (s == utility::conversions::to_string_t(64)) v = eReportAmountMdt::ReportAmountMdt__64;
        if (s == utility::conversions::to_string_t(infinity)) v = eReportAmountMdt::ReportAmountMdt_INFINITY;

        setValue(v);
    }
    return ok;
}

ReportAmountMdt::eReportAmountMdt ReportAmountMdt::getValue() const
{
   return m_value;
}

void ReportAmountMdt::setValue(ReportAmountMdt::eReportAmountMdt const value)
{
   m_value = value;
}


}
}
}
}


