/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PrivacyCheckRelatedAction.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PrivacyCheckRelatedAction::PrivacyCheckRelatedAction()
{
}

PrivacyCheckRelatedAction::~PrivacyCheckRelatedAction()
{
}

void PrivacyCheckRelatedAction::validate()
{
    // TODO: implement validation
}

web::json::value PrivacyCheckRelatedAction::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_NOT_ALLOWED) val = web::json::value::string(U(LOCATION_NOT_ALLOWED));
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITH_NOTIFICATION) val = web::json::value::string(U(LOCATION_ALLOWED_WITH_NOTIFICATION));
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_NOTIFICATION) val = web::json::value::string(U(LOCATION_ALLOWED_WITHOUT_NOTIFICATION));
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_RESPONSE) val = web::json::value::string(U(LOCATION_ALLOWED_WITHOUT_RESPONSE));
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_RESTRICTED_WITHOUT_RESPONSE) val = web::json::value::string(U(LOCATION_RESTRICTED_WITHOUT_RESPONSE));

    return val;
}

bool PrivacyCheckRelatedAction::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(LOCATION_NOT_ALLOWED)) m_value = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_NOT_ALLOWED;
    if (s == utility::conversions::to_string_t(LOCATION_ALLOWED_WITH_NOTIFICATION)) m_value = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITH_NOTIFICATION;
    if (s == utility::conversions::to_string_t(LOCATION_ALLOWED_WITHOUT_NOTIFICATION)) m_value = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_NOTIFICATION;
    if (s == utility::conversions::to_string_t(LOCATION_ALLOWED_WITHOUT_RESPONSE)) m_value = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_RESPONSE;
    if (s == utility::conversions::to_string_t(LOCATION_RESTRICTED_WITHOUT_RESPONSE)) m_value = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_RESTRICTED_WITHOUT_RESPONSE;
    return true;
}

void PrivacyCheckRelatedAction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_NOT_ALLOWED) s = utility::conversions::to_string_t(LOCATION_NOT_ALLOWED);
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITH_NOTIFICATION) s = utility::conversions::to_string_t(LOCATION_ALLOWED_WITH_NOTIFICATION);
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_NOTIFICATION) s = utility::conversions::to_string_t(LOCATION_ALLOWED_WITHOUT_NOTIFICATION);
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_RESPONSE) s = utility::conversions::to_string_t(LOCATION_ALLOWED_WITHOUT_RESPONSE);
    if (m_value == ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_RESTRICTED_WITHOUT_RESPONSE) s = utility::conversions::to_string_t(LOCATION_RESTRICTED_WITHOUT_RESPONSE);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool PrivacyCheckRelatedAction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        ePrivacyCheckRelatedAction v;

        
        if (s == utility::conversions::to_string_t(LOCATION_NOT_ALLOWED)) v = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_NOT_ALLOWED;
        if (s == utility::conversions::to_string_t(LOCATION_ALLOWED_WITH_NOTIFICATION)) v = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITH_NOTIFICATION;
        if (s == utility::conversions::to_string_t(LOCATION_ALLOWED_WITHOUT_NOTIFICATION)) v = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_NOTIFICATION;
        if (s == utility::conversions::to_string_t(LOCATION_ALLOWED_WITHOUT_RESPONSE)) v = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_ALLOWED_WITHOUT_RESPONSE;
        if (s == utility::conversions::to_string_t(LOCATION_RESTRICTED_WITHOUT_RESPONSE)) v = ePrivacyCheckRelatedAction::PrivacyCheckRelatedAction_RESTRICTED_WITHOUT_RESPONSE;

        setValue(v);
    }
    return ok;
}

PrivacyCheckRelatedAction::ePrivacyCheckRelatedAction PrivacyCheckRelatedAction::getValue() const
{
   return m_value;
}

void PrivacyCheckRelatedAction::setValue(PrivacyCheckRelatedAction::ePrivacyCheckRelatedAction const value)
{
   m_value = value;
}


}
}
}
}


