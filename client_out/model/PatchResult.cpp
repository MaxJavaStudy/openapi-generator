/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PatchResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PatchResult::PatchResult()
{
    m_ReportIsSet = false;
}

PatchResult::~PatchResult()
{
}

void PatchResult::validate()
{
    // TODO: implement validation
}

web::json::value PatchResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReportIsSet)
    {
        val[utility::conversions::to_string_t("report")] = ModelBase::toJson(m_Report);
    }

    return val;
}

bool PatchResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("report")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("report"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReportItem>> refVal_report;
            ok &= ModelBase::fromJson(fieldValue, refVal_report);
            setReport(refVal_report);
        }
    }
    return ok;
}

void PatchResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("report"), m_Report));
    }
}

bool PatchResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("report")))
    {
        std::vector<std::shared_ptr<ReportItem>> refVal_report;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("report")), refVal_report );
        setReport(refVal_report);
    }
    return ok;
}

std::vector<std::shared_ptr<ReportItem>>& PatchResult::getReport()
{
    return m_Report;
}

void PatchResult::setReport(const std::vector<std::shared_ptr<ReportItem>>& value)
{
    m_Report = value;
    m_ReportIsSet = true;
}

bool PatchResult::reportIsSet() const
{
    return m_ReportIsSet;
}

void PatchResult::unsetReport()
{
    m_ReportIsSet = false;
}
}
}
}
}


