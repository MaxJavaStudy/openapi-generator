/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LteV2xAuth.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




LteV2xAuth::LteV2xAuth()
{
    m_VehicleUeAuthIsSet = false;
    m_PedestrianUeAuthIsSet = false;
}

LteV2xAuth::~LteV2xAuth()
{
}

void LteV2xAuth::validate()
{
    // TODO: implement validation
}

web::json::value LteV2xAuth::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VehicleUeAuthIsSet)
    {
        val[utility::conversions::to_string_t("vehicleUeAuth")] = ModelBase::toJson(m_VehicleUeAuth);
    }
    if(m_PedestrianUeAuthIsSet)
    {
        val[utility::conversions::to_string_t("pedestrianUeAuth")] = ModelBase::toJson(m_PedestrianUeAuth);
    }

    return val;
}

bool LteV2xAuth::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("vehicleUeAuth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vehicleUeAuth"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UeAuth> refVal_vehicleUeAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_vehicleUeAuth);
            setVehicleUeAuth(refVal_vehicleUeAuth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pedestrianUeAuth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pedestrianUeAuth"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UeAuth> refVal_pedestrianUeAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_pedestrianUeAuth);
            setPedestrianUeAuth(refVal_pedestrianUeAuth);
        }
    }
    return ok;
}

void LteV2xAuth::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_VehicleUeAuthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vehicleUeAuth"), m_VehicleUeAuth));
    }
    if(m_PedestrianUeAuthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pedestrianUeAuth"), m_PedestrianUeAuth));
    }
}

bool LteV2xAuth::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("vehicleUeAuth")))
    {
        std::shared_ptr<UeAuth> refVal_vehicleUeAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vehicleUeAuth")), refVal_vehicleUeAuth );
        setVehicleUeAuth(refVal_vehicleUeAuth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pedestrianUeAuth")))
    {
        std::shared_ptr<UeAuth> refVal_pedestrianUeAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pedestrianUeAuth")), refVal_pedestrianUeAuth );
        setPedestrianUeAuth(refVal_pedestrianUeAuth);
    }
    return ok;
}

std::shared_ptr<UeAuth> LteV2xAuth::getVehicleUeAuth() const
{
    return m_VehicleUeAuth;
}

void LteV2xAuth::setVehicleUeAuth(const std::shared_ptr<UeAuth>& value)
{
    m_VehicleUeAuth = value;
    m_VehicleUeAuthIsSet = true;
}

bool LteV2xAuth::vehicleUeAuthIsSet() const
{
    return m_VehicleUeAuthIsSet;
}

void LteV2xAuth::unsetVehicleUeAuth()
{
    m_VehicleUeAuthIsSet = false;
}
std::shared_ptr<UeAuth> LteV2xAuth::getPedestrianUeAuth() const
{
    return m_PedestrianUeAuth;
}

void LteV2xAuth::setPedestrianUeAuth(const std::shared_ptr<UeAuth>& value)
{
    m_PedestrianUeAuth = value;
    m_PedestrianUeAuthIsSet = true;
}

bool LteV2xAuth::pedestrianUeAuthIsSet() const
{
    return m_PedestrianUeAuthIsSet;
}

void LteV2xAuth::unsetPedestrianUeAuth()
{
    m_PedestrianUeAuthIsSet = false;
}
}
}
}
}


