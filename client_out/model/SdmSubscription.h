/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SdmSubscription.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SdmSubscription_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SdmSubscription_H_


#include "../ModelBase.h"

#include "SubscriptionDataSets.h"
#include "ContextInfo.h"
#include <cpprest/details/basic_types.h>
#include "PlmnId.h"
#include "Snssai.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SdmSubscription
    : public ModelBase
{
public:
    SdmSubscription();
    virtual ~SdmSubscription();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SdmSubscription members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNfInstanceId() const;
    bool nfInstanceIdIsSet() const;
    void unsetNfInstanceId();

    void setNfInstanceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isImplicitUnsubscribe() const;
    bool implicitUnsubscribeIsSet() const;
    void unsetImplicitUnsubscribe();

    void setImplicitUnsubscribe(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpires() const;
    bool expiresIsSet() const;
    void unsetExpires();

    void setExpires(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCallbackReference() const;
    bool callbackReferenceIsSet() const;
    void unsetCallbackReference();

    void setCallbackReference(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAmfServiceName() const;
    bool amfServiceNameIsSet() const;
    void unsetAmfServiceName();

    void setAmfServiceName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getMonitoredResourceUris();
    bool monitoredResourceUrisIsSet() const;
    void unsetMonitoredResourceUris();

    void setMonitoredResourceUris(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Snssai> getSingleNssai() const;
    bool singleNssaiIsSet() const;
    void unsetSingleNssai();

    void setSingleNssai(const std::shared_ptr<Snssai>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDnn() const;
    bool dnnIsSet() const;
    void unsetDnn();

    void setDnn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubscriptionId() const;
    bool subscriptionIdIsSet() const;
    void unsetSubscriptionId();

    void setSubscriptionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getPlmnId() const;
    bool plmnIdIsSet() const;
    void unsetPlmnId();

    void setPlmnId(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isImmediateReport() const;
    bool immediateReportIsSet() const;
    void unsetImmediateReport();

    void setImmediateReport(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SubscriptionDataSets> getReport() const;
    bool reportIsSet() const;
    void unsetReport();

    void setReport(const std::shared_ptr<SubscriptionDataSets>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupportedFeatures() const;
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

    void setSupportedFeatures(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ContextInfo> getContextInfo() const;
    bool contextInfoIsSet() const;
    void unsetContextInfo();

    void setContextInfo(const std::shared_ptr<ContextInfo>& value);


protected:
    utility::string_t m_NfInstanceId;
    bool m_NfInstanceIdIsSet;
    bool m_ImplicitUnsubscribe;
    bool m_ImplicitUnsubscribeIsSet;
    utility::datetime m_Expires;
    bool m_ExpiresIsSet;
    utility::string_t m_CallbackReference;
    bool m_CallbackReferenceIsSet;
    utility::string_t m_AmfServiceName;
    bool m_AmfServiceNameIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_MonitoredResourceUris;
    bool m_MonitoredResourceUrisIsSet;
    std::shared_ptr<Snssai> m_SingleNssai;
    bool m_SingleNssaiIsSet;
    utility::string_t m_Dnn;
    bool m_DnnIsSet;
    utility::string_t m_SubscriptionId;
    bool m_SubscriptionIdIsSet;
    std::shared_ptr<PlmnId> m_PlmnId;
    bool m_PlmnIdIsSet;
    bool m_ImmediateReport;
    bool m_ImmediateReportIsSet;
    std::shared_ptr<SubscriptionDataSets> m_Report;
    bool m_ReportIsSet;
    utility::string_t m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
    std::shared_ptr<ContextInfo> m_ContextInfo;
    bool m_ContextInfoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SdmSubscription_H_ */
