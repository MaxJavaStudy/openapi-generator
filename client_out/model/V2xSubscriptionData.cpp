/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "V2xSubscriptionData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




V2xSubscriptionData::V2xSubscriptionData()
{
    m_NrV2xServicesAuthIsSet = false;
    m_LteV2xServicesAuthIsSet = false;
    m_NrUePc5Ambr = utility::conversions::to_string_t("");
    m_NrUePc5AmbrIsSet = false;
    m_LtePc5Ambr = utility::conversions::to_string_t("");
    m_LtePc5AmbrIsSet = false;
}

V2xSubscriptionData::~V2xSubscriptionData()
{
}

void V2xSubscriptionData::validate()
{
    // TODO: implement validation
}

web::json::value V2xSubscriptionData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NrV2xServicesAuthIsSet)
    {
        val[utility::conversions::to_string_t("nrV2xServicesAuth")] = ModelBase::toJson(m_NrV2xServicesAuth);
    }
    if(m_LteV2xServicesAuthIsSet)
    {
        val[utility::conversions::to_string_t("lteV2xServicesAuth")] = ModelBase::toJson(m_LteV2xServicesAuth);
    }
    if(m_NrUePc5AmbrIsSet)
    {
        val[utility::conversions::to_string_t("nrUePc5Ambr")] = ModelBase::toJson(m_NrUePc5Ambr);
    }
    if(m_LtePc5AmbrIsSet)
    {
        val[utility::conversions::to_string_t("ltePc5Ambr")] = ModelBase::toJson(m_LtePc5Ambr);
    }

    return val;
}

bool V2xSubscriptionData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("nrV2xServicesAuth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nrV2xServicesAuth"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NrV2xAuth> refVal_nrV2xServicesAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_nrV2xServicesAuth);
            setNrV2xServicesAuth(refVal_nrV2xServicesAuth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lteV2xServicesAuth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lteV2xServicesAuth"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LteV2xAuth> refVal_lteV2xServicesAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_lteV2xServicesAuth);
            setLteV2xServicesAuth(refVal_lteV2xServicesAuth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nrUePc5Ambr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nrUePc5Ambr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nrUePc5Ambr;
            ok &= ModelBase::fromJson(fieldValue, refVal_nrUePc5Ambr);
            setNrUePc5Ambr(refVal_nrUePc5Ambr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ltePc5Ambr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ltePc5Ambr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ltePc5Ambr;
            ok &= ModelBase::fromJson(fieldValue, refVal_ltePc5Ambr);
            setLtePc5Ambr(refVal_ltePc5Ambr);
        }
    }
    return ok;
}

void V2xSubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NrV2xServicesAuthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nrV2xServicesAuth"), m_NrV2xServicesAuth));
    }
    if(m_LteV2xServicesAuthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lteV2xServicesAuth"), m_LteV2xServicesAuth));
    }
    if(m_NrUePc5AmbrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nrUePc5Ambr"), m_NrUePc5Ambr));
    }
    if(m_LtePc5AmbrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ltePc5Ambr"), m_LtePc5Ambr));
    }
}

bool V2xSubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("nrV2xServicesAuth")))
    {
        std::shared_ptr<NrV2xAuth> refVal_nrV2xServicesAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nrV2xServicesAuth")), refVal_nrV2xServicesAuth );
        setNrV2xServicesAuth(refVal_nrV2xServicesAuth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lteV2xServicesAuth")))
    {
        std::shared_ptr<LteV2xAuth> refVal_lteV2xServicesAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lteV2xServicesAuth")), refVal_lteV2xServicesAuth );
        setLteV2xServicesAuth(refVal_lteV2xServicesAuth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nrUePc5Ambr")))
    {
        utility::string_t refVal_nrUePc5Ambr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nrUePc5Ambr")), refVal_nrUePc5Ambr );
        setNrUePc5Ambr(refVal_nrUePc5Ambr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ltePc5Ambr")))
    {
        utility::string_t refVal_ltePc5Ambr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ltePc5Ambr")), refVal_ltePc5Ambr );
        setLtePc5Ambr(refVal_ltePc5Ambr);
    }
    return ok;
}

std::shared_ptr<NrV2xAuth> V2xSubscriptionData::getNrV2xServicesAuth() const
{
    return m_NrV2xServicesAuth;
}

void V2xSubscriptionData::setNrV2xServicesAuth(const std::shared_ptr<NrV2xAuth>& value)
{
    m_NrV2xServicesAuth = value;
    m_NrV2xServicesAuthIsSet = true;
}

bool V2xSubscriptionData::nrV2xServicesAuthIsSet() const
{
    return m_NrV2xServicesAuthIsSet;
}

void V2xSubscriptionData::unsetNrV2xServicesAuth()
{
    m_NrV2xServicesAuthIsSet = false;
}
std::shared_ptr<LteV2xAuth> V2xSubscriptionData::getLteV2xServicesAuth() const
{
    return m_LteV2xServicesAuth;
}

void V2xSubscriptionData::setLteV2xServicesAuth(const std::shared_ptr<LteV2xAuth>& value)
{
    m_LteV2xServicesAuth = value;
    m_LteV2xServicesAuthIsSet = true;
}

bool V2xSubscriptionData::lteV2xServicesAuthIsSet() const
{
    return m_LteV2xServicesAuthIsSet;
}

void V2xSubscriptionData::unsetLteV2xServicesAuth()
{
    m_LteV2xServicesAuthIsSet = false;
}
utility::string_t V2xSubscriptionData::getNrUePc5Ambr() const
{
    return m_NrUePc5Ambr;
}

void V2xSubscriptionData::setNrUePc5Ambr(const utility::string_t& value)
{
    m_NrUePc5Ambr = value;
    m_NrUePc5AmbrIsSet = true;
}

bool V2xSubscriptionData::nrUePc5AmbrIsSet() const
{
    return m_NrUePc5AmbrIsSet;
}

void V2xSubscriptionData::unsetNrUePc5Ambr()
{
    m_NrUePc5AmbrIsSet = false;
}
utility::string_t V2xSubscriptionData::getLtePc5Ambr() const
{
    return m_LtePc5Ambr;
}

void V2xSubscriptionData::setLtePc5Ambr(const utility::string_t& value)
{
    m_LtePc5Ambr = value;
    m_LtePc5AmbrIsSet = true;
}

bool V2xSubscriptionData::ltePc5AmbrIsSet() const
{
    return m_LtePc5AmbrIsSet;
}

void V2xSubscriptionData::unsetLtePc5Ambr()
{
    m_LtePc5AmbrIsSet = false;
}
}
}
}
}


