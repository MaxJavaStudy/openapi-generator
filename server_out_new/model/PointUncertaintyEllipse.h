/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PointUncertaintyEllipse.h
 *
 * 
 */

#ifndef PointUncertaintyEllipse_H_
#define PointUncertaintyEllipse_H_


#include "GeographicalCoordinates.h"
#include "UncertaintyEllipse.h"
#include "GADShape.h"
#include "PointUncertaintyEllipse_allOf.h"
#include "SupportedGADShapes.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  PointUncertaintyEllipse: public jsonParser::jsonParser<PointUncertaintyEllipse>
{
public:
    explicit PointUncertaintyEllipse(){
        // constructor
        
            m_ShapeFlag = staticjson::Flags::Default;

            m_PointFlag = staticjson::Flags::Default;

            m_UncertaintyEllipseFlag = staticjson::Flags::Default;
m_Confidence = 0;
        
            m_ConfidenceFlag = staticjson::Flags::Default;
    };
    virtual ~PointUncertaintyEllipse(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : Shape Point UncertaintyEllipse Confidence 
        h->add_property("shape", &this->m_Shape, m_ShapeFlag);
        h->add_property("point", &this->m_Point, m_PointFlag);
        h->add_property("uncertaintyEllipse", &this->m_UncertaintyEllipse, m_UncertaintyEllipseFlag);
        h->add_property("confidence", &this->m_Confidence, m_ConfidenceFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const PointUncertaintyEllipse& obj)
    {
        
        o << "Shape : " << obj.m_Shape << std::endl;

        o << "Point : " << obj.m_Point << std::endl;

        o << "UncertaintyEllipse : " << obj.m_UncertaintyEllipse << std::endl;

        o << "Confidence : " << obj.m_Confidence << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// PointUncertaintyEllipse members vars : Shape Point UncertaintyEllipse Confidence 

    SupportedGADShapes  getShape() const
    {
        return m_Shape;
    }
    void  setShape(SupportedGADShapes const& value)
    {
        m_Shape = value;
    }

GeographicalCoordinates  getPoint() const
    {
        return m_Point;
    }
    void  setPoint(GeographicalCoordinates const& value)
    {
        m_Point = value;
    }

UncertaintyEllipse  getUncertaintyEllipse() const
    {
        return m_UncertaintyEllipse;
    }
    void  setUncertaintyEllipse(UncertaintyEllipse const& value)
    {
        m_UncertaintyEllipse = value;
    }

int32_t  getConfidence() const
    {
        return m_Confidence;
    }
    void  setConfidence(int32_t const value)
    {
        m_Confidence = value;
    }



    
public:
    SupportedGADShapes m_Shape;
    
    unsigned m_ShapeFlag;
    GeographicalCoordinates m_Point;
    
    unsigned m_PointFlag;
    UncertaintyEllipse m_UncertaintyEllipse;
    
    unsigned m_UncertaintyEllipseFlag;
    int32_t m_Confidence;
    
    unsigned m_ConfidenceFlag;
  
};
}
}
}
}

#endif /* PointUncertaintyEllipse_H_ */
