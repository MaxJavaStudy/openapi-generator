/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmsManagementSubscriptionData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SmsManagementSubscriptionData_H_
#define SmsManagementSubscriptionData_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SmsManagementSubscriptionData
    : public jsonParser::jsonParser<SmsManagementSubscriptionData> {
public:
  explicit SmsManagementSubscriptionData() {
    // constructor
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SupportedFeaturesOutFlag.reset(new unsigned);
    *m_SupportedFeaturesOutFlag.get() = 0;
    m_MtSmsSubscribed = false;

    m_MtSmsSubscribedFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MtSmsSubscribedOutFlag.reset(new unsigned);
    *m_MtSmsSubscribedOutFlag.get() = 0;
    m_MtSmsBarringAll = false;

    m_MtSmsBarringAllFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MtSmsBarringAllOutFlag.reset(new unsigned);
    *m_MtSmsBarringAllOutFlag.get() = 0;
    m_MtSmsBarringRoaming = false;

    m_MtSmsBarringRoamingFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MtSmsBarringRoamingOutFlag.reset(new unsigned);
    *m_MtSmsBarringRoamingOutFlag.get() = 0;
    m_MoSmsSubscribed = false;

    m_MoSmsSubscribedFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MoSmsSubscribedOutFlag.reset(new unsigned);
    *m_MoSmsSubscribedOutFlag.get() = 0;
    m_MoSmsBarringAll = false;

    m_MoSmsBarringAllFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MoSmsBarringAllOutFlag.reset(new unsigned);
    *m_MoSmsBarringAllOutFlag.get() = 0;
    m_MoSmsBarringRoaming = false;

    m_MoSmsBarringRoamingFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MoSmsBarringRoamingOutFlag.reset(new unsigned);
    *m_MoSmsBarringRoamingOutFlag.get() = 0;

    m_SharedSmsMngDataIdsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedSmsMngDataIdsOutFlag.reset(new unsigned);
    *m_SharedSmsMngDataIdsOutFlag.get() = 0;
  };
  virtual ~SmsManagementSubscriptionData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SupportedFeatures MtSmsSubscribed
    // MtSmsBarringAll MtSmsBarringRoaming MoSmsSubscribed MoSmsBarringAll
    // MoSmsBarringRoaming SharedSmsMngDataIds
    h->add_optional_property("supportedFeatures", &this->m_SupportedFeatures,
                             m_SupportedFeaturesFlag,
                             m_SupportedFeaturesOutFlag);
    h->add_optional_property("mtSmsSubscribed", &this->m_MtSmsSubscribed,
                             m_MtSmsSubscribedFlag, m_MtSmsSubscribedOutFlag);
    h->add_optional_property("mtSmsBarringAll", &this->m_MtSmsBarringAll,
                             m_MtSmsBarringAllFlag, m_MtSmsBarringAllOutFlag);
    h->add_optional_property(
        "mtSmsBarringRoaming", &this->m_MtSmsBarringRoaming,
        m_MtSmsBarringRoamingFlag, m_MtSmsBarringRoamingOutFlag);
    h->add_optional_property("moSmsSubscribed", &this->m_MoSmsSubscribed,
                             m_MoSmsSubscribedFlag, m_MoSmsSubscribedOutFlag);
    h->add_optional_property("moSmsBarringAll", &this->m_MoSmsBarringAll,
                             m_MoSmsBarringAllFlag, m_MoSmsBarringAllOutFlag);
    h->add_optional_property(
        "moSmsBarringRoaming", &this->m_MoSmsBarringRoaming,
        m_MoSmsBarringRoamingFlag, m_MoSmsBarringRoamingOutFlag);
    h->add_optional_property(
        "sharedSmsMngDataIds", &this->m_SharedSmsMngDataIds,
        m_SharedSmsMngDataIdsFlag, m_SharedSmsMngDataIdsOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const SmsManagementSubscriptionData &obj) {

    o << "SupportedFeatures, optional flag is : " << *m_SupportedFeaturesOutFlag
      << ", content is : " << obj.m_SupportedFeatures << std::endl;

    o << "MtSmsSubscribed, optional flag is : " << *m_MtSmsSubscribedOutFlag
      << ", content is : " << obj.m_MtSmsSubscribed << std::endl;

    o << "MtSmsBarringAll, optional flag is : " << *m_MtSmsBarringAllOutFlag
      << ", content is : " << obj.m_MtSmsBarringAll << std::endl;

    o << "MtSmsBarringRoaming, optional flag is : "
      << *m_MtSmsBarringRoamingOutFlag
      << ", content is : " << obj.m_MtSmsBarringRoaming << std::endl;

    o << "MoSmsSubscribed, optional flag is : " << *m_MoSmsSubscribedOutFlag
      << ", content is : " << obj.m_MoSmsSubscribed << std::endl;

    o << "MoSmsBarringAll, optional flag is : " << *m_MoSmsBarringAllOutFlag
      << ", content is : " << obj.m_MoSmsBarringAll << std::endl;

    o << "MoSmsBarringRoaming, optional flag is : "
      << *m_MoSmsBarringRoamingOutFlag
      << ", content is : " << obj.m_MoSmsBarringRoaming << std::endl;
    o << "SharedSmsMngDataIds, optional flag is : "
      << *m_SharedSmsMngDataIdsOutFlag << std::endl;
    o << convert2string(std::string("SharedSmsMngDataIds"),
                        obj.m_SharedSmsMngDataIds)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SmsManagementSubscriptionData members vars : SupportedFeatures
  /// MtSmsSubscribed MtSmsBarringAll MtSmsBarringRoaming MoSmsSubscribed
  /// MoSmsBarringAll MoSmsBarringRoaming SharedSmsMngDataIds

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

  bool isMtSmsSubscribed() const { return m_MtSmsSubscribed; }
  void setMtSmsSubscribed(bool const value) { m_MtSmsSubscribed = value; }

  bool isMtSmsBarringAll() const { return m_MtSmsBarringAll; }
  void setMtSmsBarringAll(bool const value) { m_MtSmsBarringAll = value; }

  bool isMtSmsBarringRoaming() const { return m_MtSmsBarringRoaming; }
  void setMtSmsBarringRoaming(bool const value) {
    m_MtSmsBarringRoaming = value;
  }

  bool isMoSmsSubscribed() const { return m_MoSmsSubscribed; }
  void setMoSmsSubscribed(bool const value) { m_MoSmsSubscribed = value; }

  bool isMoSmsBarringAll() const { return m_MoSmsBarringAll; }
  void setMoSmsBarringAll(bool const value) { m_MoSmsBarringAll = value; }

  bool isMoSmsBarringRoaming() const { return m_MoSmsBarringRoaming; }
  void setMoSmsBarringRoaming(bool const value) {
    m_MoSmsBarringRoaming = value;
  }

  std::vector<std::string> &getSharedSmsMngDataIds() {
    return m_SharedSmsMngDataIds;
  }
  void setSharedSmsMngDataIds(std::vector<std::string> const &value) {
    m_SharedSmsMngDataIds = value;
  }

public:
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
  shared_ptr<unsigned> m_SupportedFeaturesOutFlag;
  bool m_MtSmsSubscribed;

  unsigned m_MtSmsSubscribedFlag;
  shared_ptr<unsigned> m_MtSmsSubscribedOutFlag;
  bool m_MtSmsBarringAll;

  unsigned m_MtSmsBarringAllFlag;
  shared_ptr<unsigned> m_MtSmsBarringAllOutFlag;
  bool m_MtSmsBarringRoaming;

  unsigned m_MtSmsBarringRoamingFlag;
  shared_ptr<unsigned> m_MtSmsBarringRoamingOutFlag;
  bool m_MoSmsSubscribed;

  unsigned m_MoSmsSubscribedFlag;
  shared_ptr<unsigned> m_MoSmsSubscribedOutFlag;
  bool m_MoSmsBarringAll;

  unsigned m_MoSmsBarringAllFlag;
  shared_ptr<unsigned> m_MoSmsBarringAllOutFlag;
  bool m_MoSmsBarringRoaming;

  unsigned m_MoSmsBarringRoamingFlag;
  shared_ptr<unsigned> m_MoSmsBarringRoamingOutFlag;
  std::vector<std::string> m_SharedSmsMngDataIds;

  unsigned m_SharedSmsMngDataIdsFlag;
  shared_ptr<unsigned> m_SharedSmsMngDataIdsOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmsManagementSubscriptionData_H_ */
