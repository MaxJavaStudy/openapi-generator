/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LocationArea.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




LocationArea::LocationArea()
{
    m_GeographicAreasIsSet = false;
    m_CivicAddressesIsSet = false;
    m_NwAreaInfoIsSet = false;
}

LocationArea::~LocationArea()
{
}

void LocationArea::validate()
{
    // TODO: implement validation
}

web::json::value LocationArea::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GeographicAreasIsSet)
    {
        val[utility::conversions::to_string_t("geographicAreas")] = ModelBase::toJson(m_GeographicAreas);
    }
    if(m_CivicAddressesIsSet)
    {
        val[utility::conversions::to_string_t("civicAddresses")] = ModelBase::toJson(m_CivicAddresses);
    }
    if(m_NwAreaInfoIsSet)
    {
        val[utility::conversions::to_string_t("nwAreaInfo")] = ModelBase::toJson(m_NwAreaInfo);
    }

    return val;
}

bool LocationArea::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("geographicAreas")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("geographicAreas"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GeographicArea>> refVal_geographicAreas;
            ok &= ModelBase::fromJson(fieldValue, refVal_geographicAreas);
            setGeographicAreas(refVal_geographicAreas);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("civicAddresses")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("civicAddresses"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CivicAddress>> refVal_civicAddresses;
            ok &= ModelBase::fromJson(fieldValue, refVal_civicAddresses);
            setCivicAddresses(refVal_civicAddresses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nwAreaInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nwAreaInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NetworkAreaInfo> refVal_nwAreaInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_nwAreaInfo);
            setNwAreaInfo(refVal_nwAreaInfo);
        }
    }
    return ok;
}

void LocationArea::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_GeographicAreasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("geographicAreas"), m_GeographicAreas));
    }
    if(m_CivicAddressesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("civicAddresses"), m_CivicAddresses));
    }
    if(m_NwAreaInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nwAreaInfo"), m_NwAreaInfo));
    }
}

bool LocationArea::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("geographicAreas")))
    {
        std::vector<std::shared_ptr<GeographicArea>> refVal_geographicAreas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("geographicAreas")), refVal_geographicAreas );
        setGeographicAreas(refVal_geographicAreas);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("civicAddresses")))
    {
        std::vector<std::shared_ptr<CivicAddress>> refVal_civicAddresses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("civicAddresses")), refVal_civicAddresses );
        setCivicAddresses(refVal_civicAddresses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nwAreaInfo")))
    {
        std::shared_ptr<NetworkAreaInfo> refVal_nwAreaInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nwAreaInfo")), refVal_nwAreaInfo );
        setNwAreaInfo(refVal_nwAreaInfo);
    }
    return ok;
}

std::vector<std::shared_ptr<GeographicArea>>& LocationArea::getGeographicAreas()
{
    return m_GeographicAreas;
}

void LocationArea::setGeographicAreas(const std::vector<std::shared_ptr<GeographicArea>>& value)
{
    m_GeographicAreas = value;
    m_GeographicAreasIsSet = true;
}

bool LocationArea::geographicAreasIsSet() const
{
    return m_GeographicAreasIsSet;
}

void LocationArea::unsetGeographicAreas()
{
    m_GeographicAreasIsSet = false;
}
std::vector<std::shared_ptr<CivicAddress>>& LocationArea::getCivicAddresses()
{
    return m_CivicAddresses;
}

void LocationArea::setCivicAddresses(const std::vector<std::shared_ptr<CivicAddress>>& value)
{
    m_CivicAddresses = value;
    m_CivicAddressesIsSet = true;
}

bool LocationArea::civicAddressesIsSet() const
{
    return m_CivicAddressesIsSet;
}

void LocationArea::unsetCivicAddresses()
{
    m_CivicAddressesIsSet = false;
}
std::shared_ptr<NetworkAreaInfo> LocationArea::getNwAreaInfo() const
{
    return m_NwAreaInfo;
}

void LocationArea::setNwAreaInfo(const std::shared_ptr<NetworkAreaInfo>& value)
{
    m_NwAreaInfo = value;
    m_NwAreaInfoIsSet = true;
}

bool LocationArea::nwAreaInfoIsSet() const
{
    return m_NwAreaInfoIsSet;
}

void LocationArea::unsetNwAreaInfo()
{
    m_NwAreaInfoIsSet = false;
}
}
}
}
}


