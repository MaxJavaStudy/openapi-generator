/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TraceDataResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TraceDataResponse::TraceDataResponse()
{
    m_TraceDataIsSet = false;
    m_SharedTraceDataId = utility::conversions::to_string_t("");
    m_SharedTraceDataIdIsSet = false;
}

TraceDataResponse::~TraceDataResponse()
{
}

void TraceDataResponse::validate()
{
    // TODO: implement validation
}

web::json::value TraceDataResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TraceDataIsSet)
    {
        val[utility::conversions::to_string_t("traceData")] = ModelBase::toJson(m_TraceData);
    }
    if(m_SharedTraceDataIdIsSet)
    {
        val[utility::conversions::to_string_t("sharedTraceDataId")] = ModelBase::toJson(m_SharedTraceDataId);
    }

    return val;
}

bool TraceDataResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("traceData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traceData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TraceData> refVal_traceData;
            ok &= ModelBase::fromJson(fieldValue, refVal_traceData);
            setTraceData(refVal_traceData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedTraceDataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedTraceDataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sharedTraceDataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedTraceDataId);
            setSharedTraceDataId(refVal_sharedTraceDataId);
        }
    }
    return ok;
}

void TraceDataResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TraceDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceData"), m_TraceData));
    }
    if(m_SharedTraceDataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedTraceDataId"), m_SharedTraceDataId));
    }
}

bool TraceDataResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("traceData")))
    {
        std::shared_ptr<TraceData> refVal_traceData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceData")), refVal_traceData );
        setTraceData(refVal_traceData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedTraceDataId")))
    {
        utility::string_t refVal_sharedTraceDataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedTraceDataId")), refVal_sharedTraceDataId );
        setSharedTraceDataId(refVal_sharedTraceDataId);
    }
    return ok;
}

std::shared_ptr<TraceData> TraceDataResponse::getTraceData() const
{
    return m_TraceData;
}

void TraceDataResponse::setTraceData(const std::shared_ptr<TraceData>& value)
{
    m_TraceData = value;
    m_TraceDataIsSet = true;
}

bool TraceDataResponse::traceDataIsSet() const
{
    return m_TraceDataIsSet;
}

void TraceDataResponse::unsetTraceData()
{
    m_TraceDataIsSet = false;
}
utility::string_t TraceDataResponse::getSharedTraceDataId() const
{
    return m_SharedTraceDataId;
}

void TraceDataResponse::setSharedTraceDataId(const utility::string_t& value)
{
    m_SharedTraceDataId = value;
    m_SharedTraceDataIdIsSet = true;
}

bool TraceDataResponse::sharedTraceDataIdIsSet() const
{
    return m_SharedTraceDataIdIsSet;
}

void TraceDataResponse::unsetSharedTraceDataId()
{
    m_SharedTraceDataIdIsSet = false;
}
}
}
}
}


