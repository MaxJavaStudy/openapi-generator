/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GeographicArea.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GeographicArea_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GeographicArea_H_


#include "../ModelBase.h"

#include "PointUncertaintyCircle.h"
#include "Point.h"
#include "PointUncertaintyEllipse.h"
#include "GeographicalCoordinates.h"
#include "PointAltitude.h"
#include "UncertaintyEllipse.h"
#include "EllipsoidArc.h"
#include "PointAltitudeUncertainty.h"
#include "Polygon.h"
#include <vector>
#include "SupportedGADShapes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  GeographicArea
    : public ModelBase
{
public:
    GeographicArea();
    virtual ~GeographicArea();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GeographicArea members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SupportedGADShapes> getShape() const;
    bool shapeIsSet() const;
    void unsetShape();

    void setShape(const std::shared_ptr<SupportedGADShapes>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GeographicalCoordinates> getPoint() const;
    bool pointIsSet() const;
    void unsetPoint();

    void setPoint(const std::shared_ptr<GeographicalCoordinates>& value);

    /// <summary>
    /// 
    /// </summary>
    float getUncertainty() const;
    bool uncertaintyIsSet() const;
    void unsetUncertainty();

    void setUncertainty(float value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UncertaintyEllipse> getUncertaintyEllipse() const;
    bool uncertaintyEllipseIsSet() const;
    void unsetUncertaintyEllipse();

    void setUncertaintyEllipse(const std::shared_ptr<UncertaintyEllipse>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getConfidence() const;
    bool confidenceIsSet() const;
    void unsetConfidence();

    void setConfidence(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<GeographicalCoordinates>>& getPointList();
    bool pointListIsSet() const;
    void unsetPointList();

    void setPointList(const std::vector<std::shared_ptr<GeographicalCoordinates>>& value);

    /// <summary>
    /// 
    /// </summary>
    double getAltitude() const;
    bool altitudeIsSet() const;
    void unsetAltitude();

    void setAltitude(double value);

    /// <summary>
    /// 
    /// </summary>
    float getUncertaintyAltitude() const;
    bool uncertaintyAltitudeIsSet() const;
    void unsetUncertaintyAltitude();

    void setUncertaintyAltitude(float value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getInnerRadius() const;
    bool innerRadiusIsSet() const;
    void unsetInnerRadius();

    void setInnerRadius(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    float getUncertaintyRadius() const;
    bool uncertaintyRadiusIsSet() const;
    void unsetUncertaintyRadius();

    void setUncertaintyRadius(float value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getOffsetAngle() const;
    bool offsetAngleIsSet() const;
    void unsetOffsetAngle();

    void setOffsetAngle(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getIncludedAngle() const;
    bool includedAngleIsSet() const;
    void unsetIncludedAngle();

    void setIncludedAngle(int32_t value);


protected:
    std::shared_ptr<SupportedGADShapes> m_Shape;
    bool m_ShapeIsSet;
    std::shared_ptr<GeographicalCoordinates> m_Point;
    bool m_PointIsSet;
    float m_Uncertainty;
    bool m_UncertaintyIsSet;
    std::shared_ptr<UncertaintyEllipse> m_UncertaintyEllipse;
    bool m_UncertaintyEllipseIsSet;
    int32_t m_Confidence;
    bool m_ConfidenceIsSet;
    std::vector<std::shared_ptr<GeographicalCoordinates>> m_PointList;
    bool m_PointListIsSet;
    double m_Altitude;
    bool m_AltitudeIsSet;
    float m_UncertaintyAltitude;
    bool m_UncertaintyAltitudeIsSet;
    int32_t m_InnerRadius;
    bool m_InnerRadiusIsSet;
    float m_UncertaintyRadius;
    bool m_UncertaintyRadiusIsSet;
    int32_t m_OffsetAngle;
    bool m_OffsetAngleIsSet;
    int32_t m_IncludedAngle;
    bool m_IncludedAngleIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GeographicArea_H_ */
