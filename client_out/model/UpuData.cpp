/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpuData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UpuData::UpuData()
{
    m_SecPacket = utility::conversions::to_string_t("");
    m_SecPacketIsSet = false;
    m_DefaultConfNssaiIsSet = false;
    m_RoutingId = utility::conversions::to_string_t("");
    m_RoutingIdIsSet = false;
}

UpuData::~UpuData()
{
}

void UpuData::validate()
{
    // TODO: implement validation
}

web::json::value UpuData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SecPacketIsSet)
    {
        val[utility::conversions::to_string_t("secPacket")] = ModelBase::toJson(m_SecPacket);
    }
    if(m_DefaultConfNssaiIsSet)
    {
        val[utility::conversions::to_string_t("defaultConfNssai")] = ModelBase::toJson(m_DefaultConfNssai);
    }
    if(m_RoutingIdIsSet)
    {
        val[utility::conversions::to_string_t("routingId")] = ModelBase::toJson(m_RoutingId);
    }

    return val;
}

bool UpuData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("secPacket")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secPacket"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_secPacket;
            ok &= ModelBase::fromJson(fieldValue, refVal_secPacket);
            setSecPacket(refVal_secPacket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultConfNssai")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultConfNssai"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Snssai>> refVal_defaultConfNssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultConfNssai);
            setDefaultConfNssai(refVal_defaultConfNssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("routingId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("routingId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_routingId;
            ok &= ModelBase::fromJson(fieldValue, refVal_routingId);
            setRoutingId(refVal_routingId);
        }
    }
    return ok;
}

void UpuData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SecPacketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secPacket"), m_SecPacket));
    }
    if(m_DefaultConfNssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultConfNssai"), m_DefaultConfNssai));
    }
    if(m_RoutingIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("routingId"), m_RoutingId));
    }
}

bool UpuData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("secPacket")))
    {
        utility::string_t refVal_secPacket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secPacket")), refVal_secPacket );
        setSecPacket(refVal_secPacket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultConfNssai")))
    {
        std::vector<std::shared_ptr<Snssai>> refVal_defaultConfNssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultConfNssai")), refVal_defaultConfNssai );
        setDefaultConfNssai(refVal_defaultConfNssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("routingId")))
    {
        utility::string_t refVal_routingId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("routingId")), refVal_routingId );
        setRoutingId(refVal_routingId);
    }
    return ok;
}

utility::string_t UpuData::getSecPacket() const
{
    return m_SecPacket;
}

void UpuData::setSecPacket(const utility::string_t& value)
{
    m_SecPacket = value;
    m_SecPacketIsSet = true;
}

bool UpuData::secPacketIsSet() const
{
    return m_SecPacketIsSet;
}

void UpuData::unsetSecPacket()
{
    m_SecPacketIsSet = false;
}
std::vector<std::shared_ptr<Snssai>>& UpuData::getDefaultConfNssai()
{
    return m_DefaultConfNssai;
}

void UpuData::setDefaultConfNssai(const std::vector<std::shared_ptr<Snssai>>& value)
{
    m_DefaultConfNssai = value;
    m_DefaultConfNssaiIsSet = true;
}

bool UpuData::defaultConfNssaiIsSet() const
{
    return m_DefaultConfNssaiIsSet;
}

void UpuData::unsetDefaultConfNssai()
{
    m_DefaultConfNssaiIsSet = false;
}
utility::string_t UpuData::getRoutingId() const
{
    return m_RoutingId;
}

void UpuData::setRoutingId(const utility::string_t& value)
{
    m_RoutingId = value;
    m_RoutingIdIsSet = true;
}

bool UpuData::routingIdIsSet() const
{
    return m_RoutingIdIsSet;
}

void UpuData::unsetRoutingId()
{
    m_RoutingIdIsSet = false;
}
}
}
}
}


