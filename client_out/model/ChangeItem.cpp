/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ChangeItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ChangeItem::ChangeItem()
{
    m_OpIsSet = false;
    m_Path = utility::conversions::to_string_t("");
    m_PathIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_OrigValue = utility::conversions::to_string_t("");
    m_OrigValueIsSet = false;
    m_NewValue = utility::conversions::to_string_t("");
    m_NewValueIsSet = false;
}

ChangeItem::~ChangeItem()
{
}

void ChangeItem::validate()
{
    // TODO: implement validation
}

web::json::value ChangeItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OpIsSet)
    {
        val[utility::conversions::to_string_t("op")] = ModelBase::toJson(m_Op);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_OrigValueIsSet)
    {
        val[utility::conversions::to_string_t("origValue")] = ModelBase::toJson(m_OrigValue);
    }
    if(m_NewValueIsSet)
    {
        val[utility::conversions::to_string_t("newValue")] = ModelBase::toJson(m_NewValue);
    }

    return val;
}

bool ChangeItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("op")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("op"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ChangeType> refVal_op;
            ok &= ModelBase::fromJson(fieldValue, refVal_op);
            setOp(refVal_op);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("path"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_path;
            ok &= ModelBase::fromJson(fieldValue, refVal_path);
            setPath(refVal_path);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_origValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_origValue);
            setOrigValue(refVal_origValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("newValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("newValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_newValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_newValue);
            setNewValue(refVal_newValue);
        }
    }
    return ok;
}

void ChangeItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_OpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("op"), m_Op));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_OrigValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origValue"), m_OrigValue));
    }
    if(m_NewValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("newValue"), m_NewValue));
    }
}

bool ChangeItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("op")))
    {
        std::shared_ptr<ChangeType> refVal_op;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("op")), refVal_op );
        setOp(refVal_op);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        utility::string_t refVal_path;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("path")), refVal_path );
        setPath(refVal_path);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        utility::string_t refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origValue")))
    {
        utility::string_t refVal_origValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origValue")), refVal_origValue );
        setOrigValue(refVal_origValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("newValue")))
    {
        utility::string_t refVal_newValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("newValue")), refVal_newValue );
        setNewValue(refVal_newValue);
    }
    return ok;
}

std::shared_ptr<ChangeType> ChangeItem::getOp() const
{
    return m_Op;
}

void ChangeItem::setOp(const std::shared_ptr<ChangeType>& value)
{
    m_Op = value;
    m_OpIsSet = true;
}

bool ChangeItem::opIsSet() const
{
    return m_OpIsSet;
}

void ChangeItem::unsetOp()
{
    m_OpIsSet = false;
}
utility::string_t ChangeItem::getPath() const
{
    return m_Path;
}

void ChangeItem::setPath(const utility::string_t& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool ChangeItem::pathIsSet() const
{
    return m_PathIsSet;
}

void ChangeItem::unsetPath()
{
    m_PathIsSet = false;
}
utility::string_t ChangeItem::getFrom() const
{
    return m_From;
}

void ChangeItem::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool ChangeItem::fromIsSet() const
{
    return m_FromIsSet;
}

void ChangeItem::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t ChangeItem::getOrigValue() const
{
    return m_OrigValue;
}

void ChangeItem::setOrigValue(const utility::string_t& value)
{
    m_OrigValue = value;
    m_OrigValueIsSet = true;
}

bool ChangeItem::origValueIsSet() const
{
    return m_OrigValueIsSet;
}

void ChangeItem::unsetOrigValue()
{
    m_OrigValueIsSet = false;
}
utility::string_t ChangeItem::getNewValue() const
{
    return m_NewValue;
}

void ChangeItem::setNewValue(const utility::string_t& value)
{
    m_NewValue = value;
    m_NewValueIsSet = true;
}

bool ChangeItem::newValueIsSet() const
{
    return m_NewValueIsSet;
}

void ChangeItem::unsetNewValue()
{
    m_NewValueIsSet = false;
}
}
}
}
}


