/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Nssai.h
 *
 * 
 */

#ifndef Nssai_H_
#define Nssai_H_


#include <string>
#include <map>
#include "Snssai.h"
#include <vector>
#include "AdditionalSnssaiData.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  Nssai: public jsonParser::jsonParser<Nssai>
{
public:
    explicit Nssai(){
        // constructor
        m_SupportedFeatures = "";
        
            m_SupportedFeaturesFlag = (staticjson::Flags::Optional);

            m_DefaultSingleNssaisFlag = staticjson::Flags::Default;

            m_SingleNssaisFlag = (staticjson::Flags::Optional);
m_ProvisioningTime = "";
        
            m_ProvisioningTimeFlag = (staticjson::Flags::Optional);

            m_AdditionalSnssaiDataFlag = (staticjson::Flags::Optional);
    };
    virtual ~Nssai(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : SupportedFeatures DefaultSingleNssais SingleNssais ProvisioningTime AdditionalSnssaiData 
        h->add_property("supportedFeatures", &this->m_SupportedFeatures, m_SupportedFeaturesFlag);
        h->add_property("defaultSingleNssais", &this->m_DefaultSingleNssais, m_DefaultSingleNssaisFlag);
        h->add_property("singleNssais", &this->m_SingleNssais, m_SingleNssaisFlag);
        h->add_property("provisioningTime", &this->m_ProvisioningTime, m_ProvisioningTimeFlag);
        h->add_property("additionalSnssaiData", &this->m_AdditionalSnssaiData, m_AdditionalSnssaiDataFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const Nssai& obj)
    {
        
        o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;
        o<< convert2string(std::string("DefaultSingleNssais"), obj.m_DefaultSingleNssais) <<std::endl;
               o<< convert2string(std::string("SingleNssais"), obj.m_SingleNssais) <<std::endl;
       
        o << "ProvisioningTime : " << obj.m_ProvisioningTime << std::endl;
        o<< convert2string(std::string("AdditionalSnssaiData"), obj.m_AdditionalSnssaiData) <<std::endl;
       
     
        return o;
    }

    /////////////////////////////////////////////
    /// Nssai members vars : SupportedFeatures DefaultSingleNssais SingleNssais ProvisioningTime AdditionalSnssaiData 

    std::string  getSupportedFeatures() const
    {
        return m_SupportedFeatures;
    }
    void  setSupportedFeatures(std::string const& value)
    {
        m_SupportedFeatures = value;
    }

std::vector<Snssai>&  getDefaultSingleNssais()
    {
        return m_DefaultSingleNssais;
    }
    void  setDefaultSingleNssais(std::vector<Snssai> const& value)
    {
        m_DefaultSingleNssais = value;
    }

std::vector<Snssai>&  getSingleNssais()
    {
        return m_SingleNssais;
    }
    void  setSingleNssais(std::vector<Snssai> const& value)
    {
        m_SingleNssais = value;
    }

std::string  getProvisioningTime() const
    {
        return m_ProvisioningTime;
    }
    void  setProvisioningTime(std::string const& value)
    {
        m_ProvisioningTime = value;
    }

std::map<std::string, AdditionalSnssaiData>&  getAdditionalSnssaiData()
    {
        return m_AdditionalSnssaiData;
    }
    void  setAdditionalSnssaiData(std::map<std::string, AdditionalSnssaiData> const& value)
    {
        m_AdditionalSnssaiData = value;
    }



    
public:
    std::string m_SupportedFeatures;
    
    unsigned m_SupportedFeaturesFlag;
    std::vector<Snssai> m_DefaultSingleNssais;
    
    unsigned m_DefaultSingleNssaisFlag;
    std::vector<Snssai> m_SingleNssais;
    
    unsigned m_SingleNssaisFlag;
    std::string m_ProvisioningTime;
    
    unsigned m_ProvisioningTimeFlag;
    std::map<std::string, AdditionalSnssaiData> m_AdditionalSnssaiData;
    
    unsigned m_AdditionalSnssaiDataFlag;
  
};
}
}
}
}

#endif /* Nssai_H_ */
