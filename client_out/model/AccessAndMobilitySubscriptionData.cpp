/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AccessAndMobilitySubscriptionData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AccessAndMobilitySubscriptionData::AccessAndMobilitySubscriptionData()
{
    m_SupportedFeatures = utility::conversions::to_string_t("");
    m_SupportedFeaturesIsSet = false;
    m_GpsisIsSet = false;
    m_InternalGroupIdsIsSet = false;
    m_SharedVnGroupDataIdsIsSet = false;
    m_SubscribedUeAmbrIsSet = false;
    m_NssaiIsSet = false;
    m_RatRestrictionsIsSet = false;
    m_ForbiddenAreasIsSet = false;
    m_ServiceAreaRestrictionIsSet = false;
    m_CoreNetworkTypeRestrictionsIsSet = false;
    m_RfspIndex = 0;
    m_RfspIndexIsSet = false;
    m_SubsRegTimer = 0;
    m_SubsRegTimerIsSet = false;
    m_UeUsageType = 0;
    m_UeUsageTypeIsSet = false;
    m_MpsPriority = false;
    m_MpsPriorityIsSet = false;
    m_McsPriority = false;
    m_McsPriorityIsSet = false;
    m_ActiveTime = 0;
    m_ActiveTimeIsSet = false;
    m_SorInfoIsSet = false;
    m_SorInfoExpectInd = false;
    m_SorInfoExpectIndIsSet = false;
    m_SorafRetrieval = false;
    m_SorafRetrievalIsSet = false;
    m_SorUpdateIndicatorListIsSet = false;
    m_UpuInfoIsSet = false;
    m_MicoAllowed = false;
    m_MicoAllowedIsSet = false;
    m_SharedAmDataIdsIsSet = false;
    m_OdbPacketServicesIsSet = false;
    m_SubscribedDnnListIsSet = false;
    m_ServiceGapTime = 0;
    m_ServiceGapTimeIsSet = false;
    m_MdtUserConsentIsSet = false;
    m_MdtConfigurationIsSet = false;
    m_TraceDataIsSet = false;
    m_CagDataIsSet = false;
    m_StnSr = utility::conversions::to_string_t("");
    m_StnSrIsSet = false;
    m_CMsisdn = utility::conversions::to_string_t("");
    m_CMsisdnIsSet = false;
    m_NbIoTUePriority = 0;
    m_NbIoTUePriorityIsSet = false;
    m_NssaiInclusionAllowed = false;
    m_NssaiInclusionAllowedIsSet = false;
    m_RgWirelineCharacteristicsIsSet = false;
    m_EcRestrictionDataWbIsSet = false;
    m_EcRestrictionDataNb = false;
    m_EcRestrictionDataNbIsSet = false;
    m_ExpectedUeBehaviourListIsSet = false;
    m_PrimaryRatRestrictionsIsSet = false;
    m_SecondaryRatRestrictionsIsSet = false;
    m_EdrxParametersListIsSet = false;
    m_PtwParametersListIsSet = false;
    m_IabOperationAllowed = false;
    m_IabOperationAllowedIsSet = false;
    m_WirelineForbiddenAreasIsSet = false;
    m_WirelineServiceAreaRestrictionIsSet = false;
}

AccessAndMobilitySubscriptionData::~AccessAndMobilitySubscriptionData()
{
}

void AccessAndMobilitySubscriptionData::validate()
{
    // TODO: implement validation
}

web::json::value AccessAndMobilitySubscriptionData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupportedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("supportedFeatures")] = ModelBase::toJson(m_SupportedFeatures);
    }
    if(m_GpsisIsSet)
    {
        val[utility::conversions::to_string_t("gpsis")] = ModelBase::toJson(m_Gpsis);
    }
    if(m_InternalGroupIdsIsSet)
    {
        val[utility::conversions::to_string_t("internalGroupIds")] = ModelBase::toJson(m_InternalGroupIds);
    }
    if(m_SharedVnGroupDataIdsIsSet)
    {
        val[utility::conversions::to_string_t("sharedVnGroupDataIds")] = ModelBase::toJson(m_SharedVnGroupDataIds);
    }
    if(m_SubscribedUeAmbrIsSet)
    {
        val[utility::conversions::to_string_t("subscribedUeAmbr")] = ModelBase::toJson(m_SubscribedUeAmbr);
    }
    if(m_NssaiIsSet)
    {
        val[utility::conversions::to_string_t("nssai")] = ModelBase::toJson(m_Nssai);
    }
    if(m_RatRestrictionsIsSet)
    {
        val[utility::conversions::to_string_t("ratRestrictions")] = ModelBase::toJson(m_RatRestrictions);
    }
    if(m_ForbiddenAreasIsSet)
    {
        val[utility::conversions::to_string_t("forbiddenAreas")] = ModelBase::toJson(m_ForbiddenAreas);
    }
    if(m_ServiceAreaRestrictionIsSet)
    {
        val[utility::conversions::to_string_t("serviceAreaRestriction")] = ModelBase::toJson(m_ServiceAreaRestriction);
    }
    if(m_CoreNetworkTypeRestrictionsIsSet)
    {
        val[utility::conversions::to_string_t("coreNetworkTypeRestrictions")] = ModelBase::toJson(m_CoreNetworkTypeRestrictions);
    }
    if(m_RfspIndexIsSet)
    {
        val[utility::conversions::to_string_t("rfspIndex")] = ModelBase::toJson(m_RfspIndex);
    }
    if(m_SubsRegTimerIsSet)
    {
        val[utility::conversions::to_string_t("subsRegTimer")] = ModelBase::toJson(m_SubsRegTimer);
    }
    if(m_UeUsageTypeIsSet)
    {
        val[utility::conversions::to_string_t("ueUsageType")] = ModelBase::toJson(m_UeUsageType);
    }
    if(m_MpsPriorityIsSet)
    {
        val[utility::conversions::to_string_t("mpsPriority")] = ModelBase::toJson(m_MpsPriority);
    }
    if(m_McsPriorityIsSet)
    {
        val[utility::conversions::to_string_t("mcsPriority")] = ModelBase::toJson(m_McsPriority);
    }
    if(m_ActiveTimeIsSet)
    {
        val[utility::conversions::to_string_t("activeTime")] = ModelBase::toJson(m_ActiveTime);
    }
    if(m_SorInfoIsSet)
    {
        val[utility::conversions::to_string_t("sorInfo")] = ModelBase::toJson(m_SorInfo);
    }
    if(m_SorInfoExpectIndIsSet)
    {
        val[utility::conversions::to_string_t("sorInfoExpectInd")] = ModelBase::toJson(m_SorInfoExpectInd);
    }
    if(m_SorafRetrievalIsSet)
    {
        val[utility::conversions::to_string_t("sorafRetrieval")] = ModelBase::toJson(m_SorafRetrieval);
    }
    if(m_SorUpdateIndicatorListIsSet)
    {
        val[utility::conversions::to_string_t("sorUpdateIndicatorList")] = ModelBase::toJson(m_SorUpdateIndicatorList);
    }
    if(m_UpuInfoIsSet)
    {
        val[utility::conversions::to_string_t("upuInfo")] = ModelBase::toJson(m_UpuInfo);
    }
    if(m_MicoAllowedIsSet)
    {
        val[utility::conversions::to_string_t("micoAllowed")] = ModelBase::toJson(m_MicoAllowed);
    }
    if(m_SharedAmDataIdsIsSet)
    {
        val[utility::conversions::to_string_t("sharedAmDataIds")] = ModelBase::toJson(m_SharedAmDataIds);
    }
    if(m_OdbPacketServicesIsSet)
    {
        val[utility::conversions::to_string_t("odbPacketServices")] = ModelBase::toJson(m_OdbPacketServices);
    }
    if(m_SubscribedDnnListIsSet)
    {
        val[utility::conversions::to_string_t("subscribedDnnList")] = ModelBase::toJson(m_SubscribedDnnList);
    }
    if(m_ServiceGapTimeIsSet)
    {
        val[utility::conversions::to_string_t("serviceGapTime")] = ModelBase::toJson(m_ServiceGapTime);
    }
    if(m_MdtUserConsentIsSet)
    {
        val[utility::conversions::to_string_t("mdtUserConsent")] = ModelBase::toJson(m_MdtUserConsent);
    }
    if(m_MdtConfigurationIsSet)
    {
        val[utility::conversions::to_string_t("mdtConfiguration")] = ModelBase::toJson(m_MdtConfiguration);
    }
    if(m_TraceDataIsSet)
    {
        val[utility::conversions::to_string_t("traceData")] = ModelBase::toJson(m_TraceData);
    }
    if(m_CagDataIsSet)
    {
        val[utility::conversions::to_string_t("cagData")] = ModelBase::toJson(m_CagData);
    }
    if(m_StnSrIsSet)
    {
        val[utility::conversions::to_string_t("stnSr")] = ModelBase::toJson(m_StnSr);
    }
    if(m_CMsisdnIsSet)
    {
        val[utility::conversions::to_string_t("cMsisdn")] = ModelBase::toJson(m_CMsisdn);
    }
    if(m_NbIoTUePriorityIsSet)
    {
        val[utility::conversions::to_string_t("nbIoTUePriority")] = ModelBase::toJson(m_NbIoTUePriority);
    }
    if(m_NssaiInclusionAllowedIsSet)
    {
        val[utility::conversions::to_string_t("nssaiInclusionAllowed")] = ModelBase::toJson(m_NssaiInclusionAllowed);
    }
    if(m_RgWirelineCharacteristicsIsSet)
    {
        val[utility::conversions::to_string_t("rgWirelineCharacteristics")] = ModelBase::toJson(m_RgWirelineCharacteristics);
    }
    if(m_EcRestrictionDataWbIsSet)
    {
        val[utility::conversions::to_string_t("ecRestrictionDataWb")] = ModelBase::toJson(m_EcRestrictionDataWb);
    }
    if(m_EcRestrictionDataNbIsSet)
    {
        val[utility::conversions::to_string_t("ecRestrictionDataNb")] = ModelBase::toJson(m_EcRestrictionDataNb);
    }
    if(m_ExpectedUeBehaviourListIsSet)
    {
        val[utility::conversions::to_string_t("expectedUeBehaviourList")] = ModelBase::toJson(m_ExpectedUeBehaviourList);
    }
    if(m_PrimaryRatRestrictionsIsSet)
    {
        val[utility::conversions::to_string_t("primaryRatRestrictions")] = ModelBase::toJson(m_PrimaryRatRestrictions);
    }
    if(m_SecondaryRatRestrictionsIsSet)
    {
        val[utility::conversions::to_string_t("secondaryRatRestrictions")] = ModelBase::toJson(m_SecondaryRatRestrictions);
    }
    if(m_EdrxParametersListIsSet)
    {
        val[utility::conversions::to_string_t("edrxParametersList")] = ModelBase::toJson(m_EdrxParametersList);
    }
    if(m_PtwParametersListIsSet)
    {
        val[utility::conversions::to_string_t("ptwParametersList")] = ModelBase::toJson(m_PtwParametersList);
    }
    if(m_IabOperationAllowedIsSet)
    {
        val[utility::conversions::to_string_t("iabOperationAllowed")] = ModelBase::toJson(m_IabOperationAllowed);
    }
    if(m_WirelineForbiddenAreasIsSet)
    {
        val[utility::conversions::to_string_t("wirelineForbiddenAreas")] = ModelBase::toJson(m_WirelineForbiddenAreas);
    }
    if(m_WirelineServiceAreaRestrictionIsSet)
    {
        val[utility::conversions::to_string_t("wirelineServiceAreaRestriction")] = ModelBase::toJson(m_WirelineServiceAreaRestriction);
    }

    return val;
}

bool AccessAndMobilitySubscriptionData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("supportedFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supportedFeatures"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedFeatures);
            setSupportedFeatures(refVal_supportedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gpsis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gpsis"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_gpsis;
            ok &= ModelBase::fromJson(fieldValue, refVal_gpsis);
            setGpsis(refVal_gpsis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalGroupIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalGroupIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_internalGroupIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalGroupIds);
            setInternalGroupIds(refVal_internalGroupIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedVnGroupDataIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedVnGroupDataIds"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<utility::string_t>> refVal_sharedVnGroupDataIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedVnGroupDataIds);
            setSharedVnGroupDataIds(refVal_sharedVnGroupDataIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscribedUeAmbr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscribedUeAmbr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AmbrRm> refVal_subscribedUeAmbr;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscribedUeAmbr);
            setSubscribedUeAmbr(refVal_subscribedUeAmbr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nssai")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nssai"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Nssai> refVal_nssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_nssai);
            setNssai(refVal_nssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ratRestrictions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ratRestrictions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RatType>> refVal_ratRestrictions;
            ok &= ModelBase::fromJson(fieldValue, refVal_ratRestrictions);
            setRatRestrictions(refVal_ratRestrictions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("forbiddenAreas")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("forbiddenAreas"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Area>> refVal_forbiddenAreas;
            ok &= ModelBase::fromJson(fieldValue, refVal_forbiddenAreas);
            setForbiddenAreas(refVal_forbiddenAreas);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceAreaRestriction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("serviceAreaRestriction"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ServiceAreaRestriction> refVal_serviceAreaRestriction;
            ok &= ModelBase::fromJson(fieldValue, refVal_serviceAreaRestriction);
            setServiceAreaRestriction(refVal_serviceAreaRestriction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("coreNetworkTypeRestrictions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coreNetworkTypeRestrictions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CoreNetworkType>> refVal_coreNetworkTypeRestrictions;
            ok &= ModelBase::fromJson(fieldValue, refVal_coreNetworkTypeRestrictions);
            setCoreNetworkTypeRestrictions(refVal_coreNetworkTypeRestrictions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rfspIndex")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rfspIndex"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_rfspIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_rfspIndex);
            setRfspIndex(refVal_rfspIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subsRegTimer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subsRegTimer"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_subsRegTimer;
            ok &= ModelBase::fromJson(fieldValue, refVal_subsRegTimer);
            setSubsRegTimer(refVal_subsRegTimer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ueUsageType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ueUsageType"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ueUsageType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ueUsageType);
            setUeUsageType(refVal_ueUsageType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mpsPriority")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mpsPriority"));
        if(!fieldValue.is_null())
        {
            bool refVal_mpsPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_mpsPriority);
            setMpsPriority(refVal_mpsPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mcsPriority")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mcsPriority"));
        if(!fieldValue.is_null())
        {
            bool refVal_mcsPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_mcsPriority);
            setMcsPriority(refVal_mcsPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("activeTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("activeTime"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_activeTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_activeTime);
            setActiveTime(refVal_activeTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sorInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sorInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SorInfo> refVal_sorInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_sorInfo);
            setSorInfo(refVal_sorInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sorInfoExpectInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sorInfoExpectInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_sorInfoExpectInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_sorInfoExpectInd);
            setSorInfoExpectInd(refVal_sorInfoExpectInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sorafRetrieval")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sorafRetrieval"));
        if(!fieldValue.is_null())
        {
            bool refVal_sorafRetrieval;
            ok &= ModelBase::fromJson(fieldValue, refVal_sorafRetrieval);
            setSorafRetrieval(refVal_sorafRetrieval);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sorUpdateIndicatorList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sorUpdateIndicatorList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SorUpdateIndicator>> refVal_sorUpdateIndicatorList;
            ok &= ModelBase::fromJson(fieldValue, refVal_sorUpdateIndicatorList);
            setSorUpdateIndicatorList(refVal_sorUpdateIndicatorList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upuInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upuInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpuInfo> refVal_upuInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_upuInfo);
            setUpuInfo(refVal_upuInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("micoAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("micoAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_micoAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_micoAllowed);
            setMicoAllowed(refVal_micoAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedAmDataIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedAmDataIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_sharedAmDataIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedAmDataIds);
            setSharedAmDataIds(refVal_sharedAmDataIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("odbPacketServices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("odbPacketServices"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OdbPacketServices> refVal_odbPacketServices;
            ok &= ModelBase::fromJson(fieldValue, refVal_odbPacketServices);
            setOdbPacketServices(refVal_odbPacketServices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscribedDnnList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscribedDnnList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_subscribedDnnList;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscribedDnnList);
            setSubscribedDnnList(refVal_subscribedDnnList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("serviceGapTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("serviceGapTime"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_serviceGapTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_serviceGapTime);
            setServiceGapTime(refVal_serviceGapTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mdtUserConsent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mdtUserConsent"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MdtUserConsent> refVal_mdtUserConsent;
            ok &= ModelBase::fromJson(fieldValue, refVal_mdtUserConsent);
            setMdtUserConsent(refVal_mdtUserConsent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mdtConfiguration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mdtConfiguration"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MdtConfiguration> refVal_mdtConfiguration;
            ok &= ModelBase::fromJson(fieldValue, refVal_mdtConfiguration);
            setMdtConfiguration(refVal_mdtConfiguration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("traceData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traceData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TraceData> refVal_traceData;
            ok &= ModelBase::fromJson(fieldValue, refVal_traceData);
            setTraceData(refVal_traceData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cagData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cagData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CagData> refVal_cagData;
            ok &= ModelBase::fromJson(fieldValue, refVal_cagData);
            setCagData(refVal_cagData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stnSr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stnSr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_stnSr;
            ok &= ModelBase::fromJson(fieldValue, refVal_stnSr);
            setStnSr(refVal_stnSr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cMsisdn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cMsisdn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cMsisdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_cMsisdn);
            setCMsisdn(refVal_cMsisdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nbIoTUePriority")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nbIoTUePriority"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nbIoTUePriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_nbIoTUePriority);
            setNbIoTUePriority(refVal_nbIoTUePriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nssaiInclusionAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nssaiInclusionAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_nssaiInclusionAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_nssaiInclusionAllowed);
            setNssaiInclusionAllowed(refVal_nssaiInclusionAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rgWirelineCharacteristics")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rgWirelineCharacteristics"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rgWirelineCharacteristics;
            ok &= ModelBase::fromJson(fieldValue, refVal_rgWirelineCharacteristics);
            setRgWirelineCharacteristics(refVal_rgWirelineCharacteristics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ecRestrictionDataWb")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ecRestrictionDataWb"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EcRestrictionDataWb> refVal_ecRestrictionDataWb;
            ok &= ModelBase::fromJson(fieldValue, refVal_ecRestrictionDataWb);
            setEcRestrictionDataWb(refVal_ecRestrictionDataWb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ecRestrictionDataNb")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ecRestrictionDataNb"));
        if(!fieldValue.is_null())
        {
            bool refVal_ecRestrictionDataNb;
            ok &= ModelBase::fromJson(fieldValue, refVal_ecRestrictionDataNb);
            setEcRestrictionDataNb(refVal_ecRestrictionDataNb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expectedUeBehaviourList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expectedUeBehaviourList"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExpectedUeBehaviourData> refVal_expectedUeBehaviourList;
            ok &= ModelBase::fromJson(fieldValue, refVal_expectedUeBehaviourList);
            setExpectedUeBehaviourList(refVal_expectedUeBehaviourList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("primaryRatRestrictions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("primaryRatRestrictions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RatType>> refVal_primaryRatRestrictions;
            ok &= ModelBase::fromJson(fieldValue, refVal_primaryRatRestrictions);
            setPrimaryRatRestrictions(refVal_primaryRatRestrictions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondaryRatRestrictions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secondaryRatRestrictions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RatType>> refVal_secondaryRatRestrictions;
            ok &= ModelBase::fromJson(fieldValue, refVal_secondaryRatRestrictions);
            setSecondaryRatRestrictions(refVal_secondaryRatRestrictions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("edrxParametersList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("edrxParametersList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EdrxParameters>> refVal_edrxParametersList;
            ok &= ModelBase::fromJson(fieldValue, refVal_edrxParametersList);
            setEdrxParametersList(refVal_edrxParametersList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ptwParametersList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ptwParametersList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PtwParameters>> refVal_ptwParametersList;
            ok &= ModelBase::fromJson(fieldValue, refVal_ptwParametersList);
            setPtwParametersList(refVal_ptwParametersList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iabOperationAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iabOperationAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_iabOperationAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_iabOperationAllowed);
            setIabOperationAllowed(refVal_iabOperationAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wirelineForbiddenAreas")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wirelineForbiddenAreas"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WirelineArea>> refVal_wirelineForbiddenAreas;
            ok &= ModelBase::fromJson(fieldValue, refVal_wirelineForbiddenAreas);
            setWirelineForbiddenAreas(refVal_wirelineForbiddenAreas);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wirelineServiceAreaRestriction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wirelineServiceAreaRestriction"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WirelineServiceAreaRestriction> refVal_wirelineServiceAreaRestriction;
            ok &= ModelBase::fromJson(fieldValue, refVal_wirelineServiceAreaRestriction);
            setWirelineServiceAreaRestriction(refVal_wirelineServiceAreaRestriction);
        }
    }
    return ok;
}

void AccessAndMobilitySubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SupportedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportedFeatures"), m_SupportedFeatures));
    }
    if(m_GpsisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gpsis"), m_Gpsis));
    }
    if(m_InternalGroupIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalGroupIds"), m_InternalGroupIds));
    }
    if(m_SharedVnGroupDataIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedVnGroupDataIds"), m_SharedVnGroupDataIds));
    }
    if(m_SubscribedUeAmbrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscribedUeAmbr"), m_SubscribedUeAmbr));
    }
    if(m_NssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nssai"), m_Nssai));
    }
    if(m_RatRestrictionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ratRestrictions"), m_RatRestrictions));
    }
    if(m_ForbiddenAreasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("forbiddenAreas"), m_ForbiddenAreas));
    }
    if(m_ServiceAreaRestrictionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serviceAreaRestriction"), m_ServiceAreaRestriction));
    }
    if(m_CoreNetworkTypeRestrictionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coreNetworkTypeRestrictions"), m_CoreNetworkTypeRestrictions));
    }
    if(m_RfspIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rfspIndex"), m_RfspIndex));
    }
    if(m_SubsRegTimerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subsRegTimer"), m_SubsRegTimer));
    }
    if(m_UeUsageTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ueUsageType"), m_UeUsageType));
    }
    if(m_MpsPriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mpsPriority"), m_MpsPriority));
    }
    if(m_McsPriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mcsPriority"), m_McsPriority));
    }
    if(m_ActiveTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("activeTime"), m_ActiveTime));
    }
    if(m_SorInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sorInfo"), m_SorInfo));
    }
    if(m_SorInfoExpectIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sorInfoExpectInd"), m_SorInfoExpectInd));
    }
    if(m_SorafRetrievalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sorafRetrieval"), m_SorafRetrieval));
    }
    if(m_SorUpdateIndicatorListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sorUpdateIndicatorList"), m_SorUpdateIndicatorList));
    }
    if(m_UpuInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upuInfo"), m_UpuInfo));
    }
    if(m_MicoAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("micoAllowed"), m_MicoAllowed));
    }
    if(m_SharedAmDataIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedAmDataIds"), m_SharedAmDataIds));
    }
    if(m_OdbPacketServicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("odbPacketServices"), m_OdbPacketServices));
    }
    if(m_SubscribedDnnListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscribedDnnList"), m_SubscribedDnnList));
    }
    if(m_ServiceGapTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("serviceGapTime"), m_ServiceGapTime));
    }
    if(m_MdtUserConsentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mdtUserConsent"), m_MdtUserConsent));
    }
    if(m_MdtConfigurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mdtConfiguration"), m_MdtConfiguration));
    }
    if(m_TraceDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceData"), m_TraceData));
    }
    if(m_CagDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cagData"), m_CagData));
    }
    if(m_StnSrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stnSr"), m_StnSr));
    }
    if(m_CMsisdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cMsisdn"), m_CMsisdn));
    }
    if(m_NbIoTUePriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nbIoTUePriority"), m_NbIoTUePriority));
    }
    if(m_NssaiInclusionAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nssaiInclusionAllowed"), m_NssaiInclusionAllowed));
    }
    if(m_RgWirelineCharacteristicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rgWirelineCharacteristics"), m_RgWirelineCharacteristics));
    }
    if(m_EcRestrictionDataWbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ecRestrictionDataWb"), m_EcRestrictionDataWb));
    }
    if(m_EcRestrictionDataNbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ecRestrictionDataNb"), m_EcRestrictionDataNb));
    }
    if(m_ExpectedUeBehaviourListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expectedUeBehaviourList"), m_ExpectedUeBehaviourList));
    }
    if(m_PrimaryRatRestrictionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("primaryRatRestrictions"), m_PrimaryRatRestrictions));
    }
    if(m_SecondaryRatRestrictionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondaryRatRestrictions"), m_SecondaryRatRestrictions));
    }
    if(m_EdrxParametersListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("edrxParametersList"), m_EdrxParametersList));
    }
    if(m_PtwParametersListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ptwParametersList"), m_PtwParametersList));
    }
    if(m_IabOperationAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iabOperationAllowed"), m_IabOperationAllowed));
    }
    if(m_WirelineForbiddenAreasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wirelineForbiddenAreas"), m_WirelineForbiddenAreas));
    }
    if(m_WirelineServiceAreaRestrictionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wirelineServiceAreaRestriction"), m_WirelineServiceAreaRestriction));
    }
}

bool AccessAndMobilitySubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("supportedFeatures")))
    {
        utility::string_t refVal_supportedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportedFeatures")), refVal_supportedFeatures );
        setSupportedFeatures(refVal_supportedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gpsis")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_gpsis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gpsis")), refVal_gpsis );
        setGpsis(refVal_gpsis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalGroupIds")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_internalGroupIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalGroupIds")), refVal_internalGroupIds );
        setInternalGroupIds(refVal_internalGroupIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedVnGroupDataIds")))
    {
        std::map<utility::string_t, std::shared_ptr<utility::string_t>> refVal_sharedVnGroupDataIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedVnGroupDataIds")), refVal_sharedVnGroupDataIds );
        setSharedVnGroupDataIds(refVal_sharedVnGroupDataIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscribedUeAmbr")))
    {
        std::shared_ptr<AmbrRm> refVal_subscribedUeAmbr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscribedUeAmbr")), refVal_subscribedUeAmbr );
        setSubscribedUeAmbr(refVal_subscribedUeAmbr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nssai")))
    {
        std::shared_ptr<Nssai> refVal_nssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nssai")), refVal_nssai );
        setNssai(refVal_nssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ratRestrictions")))
    {
        std::vector<std::shared_ptr<RatType>> refVal_ratRestrictions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ratRestrictions")), refVal_ratRestrictions );
        setRatRestrictions(refVal_ratRestrictions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("forbiddenAreas")))
    {
        std::vector<std::shared_ptr<Area>> refVal_forbiddenAreas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("forbiddenAreas")), refVal_forbiddenAreas );
        setForbiddenAreas(refVal_forbiddenAreas);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceAreaRestriction")))
    {
        std::shared_ptr<ServiceAreaRestriction> refVal_serviceAreaRestriction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serviceAreaRestriction")), refVal_serviceAreaRestriction );
        setServiceAreaRestriction(refVal_serviceAreaRestriction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("coreNetworkTypeRestrictions")))
    {
        std::vector<std::shared_ptr<CoreNetworkType>> refVal_coreNetworkTypeRestrictions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("coreNetworkTypeRestrictions")), refVal_coreNetworkTypeRestrictions );
        setCoreNetworkTypeRestrictions(refVal_coreNetworkTypeRestrictions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rfspIndex")))
    {
        int32_t refVal_rfspIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rfspIndex")), refVal_rfspIndex );
        setRfspIndex(refVal_rfspIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subsRegTimer")))
    {
        int32_t refVal_subsRegTimer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subsRegTimer")), refVal_subsRegTimer );
        setSubsRegTimer(refVal_subsRegTimer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ueUsageType")))
    {
        int32_t refVal_ueUsageType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ueUsageType")), refVal_ueUsageType );
        setUeUsageType(refVal_ueUsageType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mpsPriority")))
    {
        bool refVal_mpsPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mpsPriority")), refVal_mpsPriority );
        setMpsPriority(refVal_mpsPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mcsPriority")))
    {
        bool refVal_mcsPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mcsPriority")), refVal_mcsPriority );
        setMcsPriority(refVal_mcsPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("activeTime")))
    {
        int32_t refVal_activeTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("activeTime")), refVal_activeTime );
        setActiveTime(refVal_activeTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sorInfo")))
    {
        std::shared_ptr<SorInfo> refVal_sorInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sorInfo")), refVal_sorInfo );
        setSorInfo(refVal_sorInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sorInfoExpectInd")))
    {
        bool refVal_sorInfoExpectInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sorInfoExpectInd")), refVal_sorInfoExpectInd );
        setSorInfoExpectInd(refVal_sorInfoExpectInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sorafRetrieval")))
    {
        bool refVal_sorafRetrieval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sorafRetrieval")), refVal_sorafRetrieval );
        setSorafRetrieval(refVal_sorafRetrieval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sorUpdateIndicatorList")))
    {
        std::vector<std::shared_ptr<SorUpdateIndicator>> refVal_sorUpdateIndicatorList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sorUpdateIndicatorList")), refVal_sorUpdateIndicatorList );
        setSorUpdateIndicatorList(refVal_sorUpdateIndicatorList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upuInfo")))
    {
        std::shared_ptr<UpuInfo> refVal_upuInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upuInfo")), refVal_upuInfo );
        setUpuInfo(refVal_upuInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("micoAllowed")))
    {
        bool refVal_micoAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("micoAllowed")), refVal_micoAllowed );
        setMicoAllowed(refVal_micoAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedAmDataIds")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_sharedAmDataIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedAmDataIds")), refVal_sharedAmDataIds );
        setSharedAmDataIds(refVal_sharedAmDataIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("odbPacketServices")))
    {
        std::shared_ptr<OdbPacketServices> refVal_odbPacketServices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("odbPacketServices")), refVal_odbPacketServices );
        setOdbPacketServices(refVal_odbPacketServices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscribedDnnList")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_subscribedDnnList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscribedDnnList")), refVal_subscribedDnnList );
        setSubscribedDnnList(refVal_subscribedDnnList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("serviceGapTime")))
    {
        int32_t refVal_serviceGapTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("serviceGapTime")), refVal_serviceGapTime );
        setServiceGapTime(refVal_serviceGapTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mdtUserConsent")))
    {
        std::shared_ptr<MdtUserConsent> refVal_mdtUserConsent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mdtUserConsent")), refVal_mdtUserConsent );
        setMdtUserConsent(refVal_mdtUserConsent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mdtConfiguration")))
    {
        std::shared_ptr<MdtConfiguration> refVal_mdtConfiguration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mdtConfiguration")), refVal_mdtConfiguration );
        setMdtConfiguration(refVal_mdtConfiguration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("traceData")))
    {
        std::shared_ptr<TraceData> refVal_traceData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceData")), refVal_traceData );
        setTraceData(refVal_traceData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cagData")))
    {
        std::shared_ptr<CagData> refVal_cagData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cagData")), refVal_cagData );
        setCagData(refVal_cagData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stnSr")))
    {
        utility::string_t refVal_stnSr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stnSr")), refVal_stnSr );
        setStnSr(refVal_stnSr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cMsisdn")))
    {
        utility::string_t refVal_cMsisdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cMsisdn")), refVal_cMsisdn );
        setCMsisdn(refVal_cMsisdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nbIoTUePriority")))
    {
        int32_t refVal_nbIoTUePriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nbIoTUePriority")), refVal_nbIoTUePriority );
        setNbIoTUePriority(refVal_nbIoTUePriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nssaiInclusionAllowed")))
    {
        bool refVal_nssaiInclusionAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nssaiInclusionAllowed")), refVal_nssaiInclusionAllowed );
        setNssaiInclusionAllowed(refVal_nssaiInclusionAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rgWirelineCharacteristics")))
    {
        utility::string_t refVal_rgWirelineCharacteristics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rgWirelineCharacteristics")), refVal_rgWirelineCharacteristics );
        setRgWirelineCharacteristics(refVal_rgWirelineCharacteristics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ecRestrictionDataWb")))
    {
        std::shared_ptr<EcRestrictionDataWb> refVal_ecRestrictionDataWb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ecRestrictionDataWb")), refVal_ecRestrictionDataWb );
        setEcRestrictionDataWb(refVal_ecRestrictionDataWb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ecRestrictionDataNb")))
    {
        bool refVal_ecRestrictionDataNb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ecRestrictionDataNb")), refVal_ecRestrictionDataNb );
        setEcRestrictionDataNb(refVal_ecRestrictionDataNb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expectedUeBehaviourList")))
    {
        std::shared_ptr<ExpectedUeBehaviourData> refVal_expectedUeBehaviourList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expectedUeBehaviourList")), refVal_expectedUeBehaviourList );
        setExpectedUeBehaviourList(refVal_expectedUeBehaviourList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("primaryRatRestrictions")))
    {
        std::vector<std::shared_ptr<RatType>> refVal_primaryRatRestrictions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("primaryRatRestrictions")), refVal_primaryRatRestrictions );
        setPrimaryRatRestrictions(refVal_primaryRatRestrictions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secondaryRatRestrictions")))
    {
        std::vector<std::shared_ptr<RatType>> refVal_secondaryRatRestrictions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondaryRatRestrictions")), refVal_secondaryRatRestrictions );
        setSecondaryRatRestrictions(refVal_secondaryRatRestrictions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("edrxParametersList")))
    {
        std::vector<std::shared_ptr<EdrxParameters>> refVal_edrxParametersList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("edrxParametersList")), refVal_edrxParametersList );
        setEdrxParametersList(refVal_edrxParametersList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ptwParametersList")))
    {
        std::vector<std::shared_ptr<PtwParameters>> refVal_ptwParametersList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ptwParametersList")), refVal_ptwParametersList );
        setPtwParametersList(refVal_ptwParametersList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iabOperationAllowed")))
    {
        bool refVal_iabOperationAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iabOperationAllowed")), refVal_iabOperationAllowed );
        setIabOperationAllowed(refVal_iabOperationAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wirelineForbiddenAreas")))
    {
        std::vector<std::shared_ptr<WirelineArea>> refVal_wirelineForbiddenAreas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wirelineForbiddenAreas")), refVal_wirelineForbiddenAreas );
        setWirelineForbiddenAreas(refVal_wirelineForbiddenAreas);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wirelineServiceAreaRestriction")))
    {
        std::shared_ptr<WirelineServiceAreaRestriction> refVal_wirelineServiceAreaRestriction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wirelineServiceAreaRestriction")), refVal_wirelineServiceAreaRestriction );
        setWirelineServiceAreaRestriction(refVal_wirelineServiceAreaRestriction);
    }
    return ok;
}

utility::string_t AccessAndMobilitySubscriptionData::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void AccessAndMobilitySubscriptionData::setSupportedFeatures(const utility::string_t& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}

bool AccessAndMobilitySubscriptionData::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& AccessAndMobilitySubscriptionData::getGpsis()
{
    return m_Gpsis;
}

void AccessAndMobilitySubscriptionData::setGpsis(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Gpsis = value;
    m_GpsisIsSet = true;
}

bool AccessAndMobilitySubscriptionData::gpsisIsSet() const
{
    return m_GpsisIsSet;
}

void AccessAndMobilitySubscriptionData::unsetGpsis()
{
    m_GpsisIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& AccessAndMobilitySubscriptionData::getInternalGroupIds()
{
    return m_InternalGroupIds;
}

void AccessAndMobilitySubscriptionData::setInternalGroupIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_InternalGroupIds = value;
    m_InternalGroupIdsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::internalGroupIdsIsSet() const
{
    return m_InternalGroupIdsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetInternalGroupIds()
{
    m_InternalGroupIdsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<utility::string_t>>& AccessAndMobilitySubscriptionData::getSharedVnGroupDataIds()
{
    return m_SharedVnGroupDataIds;
}

void AccessAndMobilitySubscriptionData::setSharedVnGroupDataIds(const std::map<utility::string_t, std::shared_ptr<utility::string_t>>& value)
{
    m_SharedVnGroupDataIds = value;
    m_SharedVnGroupDataIdsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::sharedVnGroupDataIdsIsSet() const
{
    return m_SharedVnGroupDataIdsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSharedVnGroupDataIds()
{
    m_SharedVnGroupDataIdsIsSet = false;
}
std::shared_ptr<AmbrRm> AccessAndMobilitySubscriptionData::getSubscribedUeAmbr() const
{
    return m_SubscribedUeAmbr;
}

void AccessAndMobilitySubscriptionData::setSubscribedUeAmbr(const std::shared_ptr<AmbrRm>& value)
{
    m_SubscribedUeAmbr = value;
    m_SubscribedUeAmbrIsSet = true;
}

bool AccessAndMobilitySubscriptionData::subscribedUeAmbrIsSet() const
{
    return m_SubscribedUeAmbrIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSubscribedUeAmbr()
{
    m_SubscribedUeAmbrIsSet = false;
}
std::shared_ptr<Nssai> AccessAndMobilitySubscriptionData::getNssai() const
{
    return m_Nssai;
}

void AccessAndMobilitySubscriptionData::setNssai(const std::shared_ptr<Nssai>& value)
{
    m_Nssai = value;
    m_NssaiIsSet = true;
}

bool AccessAndMobilitySubscriptionData::nssaiIsSet() const
{
    return m_NssaiIsSet;
}

void AccessAndMobilitySubscriptionData::unsetNssai()
{
    m_NssaiIsSet = false;
}
std::vector<std::shared_ptr<RatType>>& AccessAndMobilitySubscriptionData::getRatRestrictions()
{
    return m_RatRestrictions;
}

void AccessAndMobilitySubscriptionData::setRatRestrictions(const std::vector<std::shared_ptr<RatType>>& value)
{
    m_RatRestrictions = value;
    m_RatRestrictionsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::ratRestrictionsIsSet() const
{
    return m_RatRestrictionsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetRatRestrictions()
{
    m_RatRestrictionsIsSet = false;
}
std::vector<std::shared_ptr<Area>>& AccessAndMobilitySubscriptionData::getForbiddenAreas()
{
    return m_ForbiddenAreas;
}

void AccessAndMobilitySubscriptionData::setForbiddenAreas(const std::vector<std::shared_ptr<Area>>& value)
{
    m_ForbiddenAreas = value;
    m_ForbiddenAreasIsSet = true;
}

bool AccessAndMobilitySubscriptionData::forbiddenAreasIsSet() const
{
    return m_ForbiddenAreasIsSet;
}

void AccessAndMobilitySubscriptionData::unsetForbiddenAreas()
{
    m_ForbiddenAreasIsSet = false;
}
std::shared_ptr<ServiceAreaRestriction> AccessAndMobilitySubscriptionData::getServiceAreaRestriction() const
{
    return m_ServiceAreaRestriction;
}

void AccessAndMobilitySubscriptionData::setServiceAreaRestriction(const std::shared_ptr<ServiceAreaRestriction>& value)
{
    m_ServiceAreaRestriction = value;
    m_ServiceAreaRestrictionIsSet = true;
}

bool AccessAndMobilitySubscriptionData::serviceAreaRestrictionIsSet() const
{
    return m_ServiceAreaRestrictionIsSet;
}

void AccessAndMobilitySubscriptionData::unsetServiceAreaRestriction()
{
    m_ServiceAreaRestrictionIsSet = false;
}
std::vector<std::shared_ptr<CoreNetworkType>>& AccessAndMobilitySubscriptionData::getCoreNetworkTypeRestrictions()
{
    return m_CoreNetworkTypeRestrictions;
}

void AccessAndMobilitySubscriptionData::setCoreNetworkTypeRestrictions(const std::vector<std::shared_ptr<CoreNetworkType>>& value)
{
    m_CoreNetworkTypeRestrictions = value;
    m_CoreNetworkTypeRestrictionsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::coreNetworkTypeRestrictionsIsSet() const
{
    return m_CoreNetworkTypeRestrictionsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetCoreNetworkTypeRestrictions()
{
    m_CoreNetworkTypeRestrictionsIsSet = false;
}
int32_t AccessAndMobilitySubscriptionData::getRfspIndex() const
{
    return m_RfspIndex;
}

void AccessAndMobilitySubscriptionData::setRfspIndex(int32_t value)
{
    m_RfspIndex = value;
    m_RfspIndexIsSet = true;
}

bool AccessAndMobilitySubscriptionData::rfspIndexIsSet() const
{
    return m_RfspIndexIsSet;
}

void AccessAndMobilitySubscriptionData::unsetRfspIndex()
{
    m_RfspIndexIsSet = false;
}
int32_t AccessAndMobilitySubscriptionData::getSubsRegTimer() const
{
    return m_SubsRegTimer;
}

void AccessAndMobilitySubscriptionData::setSubsRegTimer(int32_t value)
{
    m_SubsRegTimer = value;
    m_SubsRegTimerIsSet = true;
}

bool AccessAndMobilitySubscriptionData::subsRegTimerIsSet() const
{
    return m_SubsRegTimerIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSubsRegTimer()
{
    m_SubsRegTimerIsSet = false;
}
int32_t AccessAndMobilitySubscriptionData::getUeUsageType() const
{
    return m_UeUsageType;
}

void AccessAndMobilitySubscriptionData::setUeUsageType(int32_t value)
{
    m_UeUsageType = value;
    m_UeUsageTypeIsSet = true;
}

bool AccessAndMobilitySubscriptionData::ueUsageTypeIsSet() const
{
    return m_UeUsageTypeIsSet;
}

void AccessAndMobilitySubscriptionData::unsetUeUsageType()
{
    m_UeUsageTypeIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isMpsPriority() const
{
    return m_MpsPriority;
}

void AccessAndMobilitySubscriptionData::setMpsPriority(bool value)
{
    m_MpsPriority = value;
    m_MpsPriorityIsSet = true;
}

bool AccessAndMobilitySubscriptionData::mpsPriorityIsSet() const
{
    return m_MpsPriorityIsSet;
}

void AccessAndMobilitySubscriptionData::unsetMpsPriority()
{
    m_MpsPriorityIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isMcsPriority() const
{
    return m_McsPriority;
}

void AccessAndMobilitySubscriptionData::setMcsPriority(bool value)
{
    m_McsPriority = value;
    m_McsPriorityIsSet = true;
}

bool AccessAndMobilitySubscriptionData::mcsPriorityIsSet() const
{
    return m_McsPriorityIsSet;
}

void AccessAndMobilitySubscriptionData::unsetMcsPriority()
{
    m_McsPriorityIsSet = false;
}
int32_t AccessAndMobilitySubscriptionData::getActiveTime() const
{
    return m_ActiveTime;
}

void AccessAndMobilitySubscriptionData::setActiveTime(int32_t value)
{
    m_ActiveTime = value;
    m_ActiveTimeIsSet = true;
}

bool AccessAndMobilitySubscriptionData::activeTimeIsSet() const
{
    return m_ActiveTimeIsSet;
}

void AccessAndMobilitySubscriptionData::unsetActiveTime()
{
    m_ActiveTimeIsSet = false;
}
std::shared_ptr<SorInfo> AccessAndMobilitySubscriptionData::getSorInfo() const
{
    return m_SorInfo;
}

void AccessAndMobilitySubscriptionData::setSorInfo(const std::shared_ptr<SorInfo>& value)
{
    m_SorInfo = value;
    m_SorInfoIsSet = true;
}

bool AccessAndMobilitySubscriptionData::sorInfoIsSet() const
{
    return m_SorInfoIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSorInfo()
{
    m_SorInfoIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isSorInfoExpectInd() const
{
    return m_SorInfoExpectInd;
}

void AccessAndMobilitySubscriptionData::setSorInfoExpectInd(bool value)
{
    m_SorInfoExpectInd = value;
    m_SorInfoExpectIndIsSet = true;
}

bool AccessAndMobilitySubscriptionData::sorInfoExpectIndIsSet() const
{
    return m_SorInfoExpectIndIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSorInfoExpectInd()
{
    m_SorInfoExpectIndIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isSorafRetrieval() const
{
    return m_SorafRetrieval;
}

void AccessAndMobilitySubscriptionData::setSorafRetrieval(bool value)
{
    m_SorafRetrieval = value;
    m_SorafRetrievalIsSet = true;
}

bool AccessAndMobilitySubscriptionData::sorafRetrievalIsSet() const
{
    return m_SorafRetrievalIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSorafRetrieval()
{
    m_SorafRetrievalIsSet = false;
}
std::vector<std::shared_ptr<SorUpdateIndicator>>& AccessAndMobilitySubscriptionData::getSorUpdateIndicatorList()
{
    return m_SorUpdateIndicatorList;
}

void AccessAndMobilitySubscriptionData::setSorUpdateIndicatorList(const std::vector<std::shared_ptr<SorUpdateIndicator>>& value)
{
    m_SorUpdateIndicatorList = value;
    m_SorUpdateIndicatorListIsSet = true;
}

bool AccessAndMobilitySubscriptionData::sorUpdateIndicatorListIsSet() const
{
    return m_SorUpdateIndicatorListIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSorUpdateIndicatorList()
{
    m_SorUpdateIndicatorListIsSet = false;
}
std::shared_ptr<UpuInfo> AccessAndMobilitySubscriptionData::getUpuInfo() const
{
    return m_UpuInfo;
}

void AccessAndMobilitySubscriptionData::setUpuInfo(const std::shared_ptr<UpuInfo>& value)
{
    m_UpuInfo = value;
    m_UpuInfoIsSet = true;
}

bool AccessAndMobilitySubscriptionData::upuInfoIsSet() const
{
    return m_UpuInfoIsSet;
}

void AccessAndMobilitySubscriptionData::unsetUpuInfo()
{
    m_UpuInfoIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isMicoAllowed() const
{
    return m_MicoAllowed;
}

void AccessAndMobilitySubscriptionData::setMicoAllowed(bool value)
{
    m_MicoAllowed = value;
    m_MicoAllowedIsSet = true;
}

bool AccessAndMobilitySubscriptionData::micoAllowedIsSet() const
{
    return m_MicoAllowedIsSet;
}

void AccessAndMobilitySubscriptionData::unsetMicoAllowed()
{
    m_MicoAllowedIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& AccessAndMobilitySubscriptionData::getSharedAmDataIds()
{
    return m_SharedAmDataIds;
}

void AccessAndMobilitySubscriptionData::setSharedAmDataIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_SharedAmDataIds = value;
    m_SharedAmDataIdsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::sharedAmDataIdsIsSet() const
{
    return m_SharedAmDataIdsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSharedAmDataIds()
{
    m_SharedAmDataIdsIsSet = false;
}
std::shared_ptr<OdbPacketServices> AccessAndMobilitySubscriptionData::getOdbPacketServices() const
{
    return m_OdbPacketServices;
}

void AccessAndMobilitySubscriptionData::setOdbPacketServices(const std::shared_ptr<OdbPacketServices>& value)
{
    m_OdbPacketServices = value;
    m_OdbPacketServicesIsSet = true;
}

bool AccessAndMobilitySubscriptionData::odbPacketServicesIsSet() const
{
    return m_OdbPacketServicesIsSet;
}

void AccessAndMobilitySubscriptionData::unsetOdbPacketServices()
{
    m_OdbPacketServicesIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& AccessAndMobilitySubscriptionData::getSubscribedDnnList()
{
    return m_SubscribedDnnList;
}

void AccessAndMobilitySubscriptionData::setSubscribedDnnList(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_SubscribedDnnList = value;
    m_SubscribedDnnListIsSet = true;
}

bool AccessAndMobilitySubscriptionData::subscribedDnnListIsSet() const
{
    return m_SubscribedDnnListIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSubscribedDnnList()
{
    m_SubscribedDnnListIsSet = false;
}
int32_t AccessAndMobilitySubscriptionData::getServiceGapTime() const
{
    return m_ServiceGapTime;
}

void AccessAndMobilitySubscriptionData::setServiceGapTime(int32_t value)
{
    m_ServiceGapTime = value;
    m_ServiceGapTimeIsSet = true;
}

bool AccessAndMobilitySubscriptionData::serviceGapTimeIsSet() const
{
    return m_ServiceGapTimeIsSet;
}

void AccessAndMobilitySubscriptionData::unsetServiceGapTime()
{
    m_ServiceGapTimeIsSet = false;
}
std::shared_ptr<MdtUserConsent> AccessAndMobilitySubscriptionData::getMdtUserConsent() const
{
    return m_MdtUserConsent;
}

void AccessAndMobilitySubscriptionData::setMdtUserConsent(const std::shared_ptr<MdtUserConsent>& value)
{
    m_MdtUserConsent = value;
    m_MdtUserConsentIsSet = true;
}

bool AccessAndMobilitySubscriptionData::mdtUserConsentIsSet() const
{
    return m_MdtUserConsentIsSet;
}

void AccessAndMobilitySubscriptionData::unsetMdtUserConsent()
{
    m_MdtUserConsentIsSet = false;
}
std::shared_ptr<MdtConfiguration> AccessAndMobilitySubscriptionData::getMdtConfiguration() const
{
    return m_MdtConfiguration;
}

void AccessAndMobilitySubscriptionData::setMdtConfiguration(const std::shared_ptr<MdtConfiguration>& value)
{
    m_MdtConfiguration = value;
    m_MdtConfigurationIsSet = true;
}

bool AccessAndMobilitySubscriptionData::mdtConfigurationIsSet() const
{
    return m_MdtConfigurationIsSet;
}

void AccessAndMobilitySubscriptionData::unsetMdtConfiguration()
{
    m_MdtConfigurationIsSet = false;
}
std::shared_ptr<TraceData> AccessAndMobilitySubscriptionData::getTraceData() const
{
    return m_TraceData;
}

void AccessAndMobilitySubscriptionData::setTraceData(const std::shared_ptr<TraceData>& value)
{
    m_TraceData = value;
    m_TraceDataIsSet = true;
}

bool AccessAndMobilitySubscriptionData::traceDataIsSet() const
{
    return m_TraceDataIsSet;
}

void AccessAndMobilitySubscriptionData::unsetTraceData()
{
    m_TraceDataIsSet = false;
}
std::shared_ptr<CagData> AccessAndMobilitySubscriptionData::getCagData() const
{
    return m_CagData;
}

void AccessAndMobilitySubscriptionData::setCagData(const std::shared_ptr<CagData>& value)
{
    m_CagData = value;
    m_CagDataIsSet = true;
}

bool AccessAndMobilitySubscriptionData::cagDataIsSet() const
{
    return m_CagDataIsSet;
}

void AccessAndMobilitySubscriptionData::unsetCagData()
{
    m_CagDataIsSet = false;
}
utility::string_t AccessAndMobilitySubscriptionData::getStnSr() const
{
    return m_StnSr;
}

void AccessAndMobilitySubscriptionData::setStnSr(const utility::string_t& value)
{
    m_StnSr = value;
    m_StnSrIsSet = true;
}

bool AccessAndMobilitySubscriptionData::stnSrIsSet() const
{
    return m_StnSrIsSet;
}

void AccessAndMobilitySubscriptionData::unsetStnSr()
{
    m_StnSrIsSet = false;
}
utility::string_t AccessAndMobilitySubscriptionData::getCMsisdn() const
{
    return m_CMsisdn;
}

void AccessAndMobilitySubscriptionData::setCMsisdn(const utility::string_t& value)
{
    m_CMsisdn = value;
    m_CMsisdnIsSet = true;
}

bool AccessAndMobilitySubscriptionData::cMsisdnIsSet() const
{
    return m_CMsisdnIsSet;
}

void AccessAndMobilitySubscriptionData::unsetCMsisdn()
{
    m_CMsisdnIsSet = false;
}
int32_t AccessAndMobilitySubscriptionData::getNbIoTUePriority() const
{
    return m_NbIoTUePriority;
}

void AccessAndMobilitySubscriptionData::setNbIoTUePriority(int32_t value)
{
    m_NbIoTUePriority = value;
    m_NbIoTUePriorityIsSet = true;
}

bool AccessAndMobilitySubscriptionData::nbIoTUePriorityIsSet() const
{
    return m_NbIoTUePriorityIsSet;
}

void AccessAndMobilitySubscriptionData::unsetNbIoTUePriority()
{
    m_NbIoTUePriorityIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isNssaiInclusionAllowed() const
{
    return m_NssaiInclusionAllowed;
}

void AccessAndMobilitySubscriptionData::setNssaiInclusionAllowed(bool value)
{
    m_NssaiInclusionAllowed = value;
    m_NssaiInclusionAllowedIsSet = true;
}

bool AccessAndMobilitySubscriptionData::nssaiInclusionAllowedIsSet() const
{
    return m_NssaiInclusionAllowedIsSet;
}

void AccessAndMobilitySubscriptionData::unsetNssaiInclusionAllowed()
{
    m_NssaiInclusionAllowedIsSet = false;
}
utility::string_t AccessAndMobilitySubscriptionData::getRgWirelineCharacteristics() const
{
    return m_RgWirelineCharacteristics;
}

void AccessAndMobilitySubscriptionData::setRgWirelineCharacteristics(const utility::string_t& value)
{
    m_RgWirelineCharacteristics = value;
    m_RgWirelineCharacteristicsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::rgWirelineCharacteristicsIsSet() const
{
    return m_RgWirelineCharacteristicsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetRgWirelineCharacteristics()
{
    m_RgWirelineCharacteristicsIsSet = false;
}
std::shared_ptr<EcRestrictionDataWb> AccessAndMobilitySubscriptionData::getEcRestrictionDataWb() const
{
    return m_EcRestrictionDataWb;
}

void AccessAndMobilitySubscriptionData::setEcRestrictionDataWb(const std::shared_ptr<EcRestrictionDataWb>& value)
{
    m_EcRestrictionDataWb = value;
    m_EcRestrictionDataWbIsSet = true;
}

bool AccessAndMobilitySubscriptionData::ecRestrictionDataWbIsSet() const
{
    return m_EcRestrictionDataWbIsSet;
}

void AccessAndMobilitySubscriptionData::unsetEcRestrictionDataWb()
{
    m_EcRestrictionDataWbIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isEcRestrictionDataNb() const
{
    return m_EcRestrictionDataNb;
}

void AccessAndMobilitySubscriptionData::setEcRestrictionDataNb(bool value)
{
    m_EcRestrictionDataNb = value;
    m_EcRestrictionDataNbIsSet = true;
}

bool AccessAndMobilitySubscriptionData::ecRestrictionDataNbIsSet() const
{
    return m_EcRestrictionDataNbIsSet;
}

void AccessAndMobilitySubscriptionData::unsetEcRestrictionDataNb()
{
    m_EcRestrictionDataNbIsSet = false;
}
std::shared_ptr<ExpectedUeBehaviourData> AccessAndMobilitySubscriptionData::getExpectedUeBehaviourList() const
{
    return m_ExpectedUeBehaviourList;
}

void AccessAndMobilitySubscriptionData::setExpectedUeBehaviourList(const std::shared_ptr<ExpectedUeBehaviourData>& value)
{
    m_ExpectedUeBehaviourList = value;
    m_ExpectedUeBehaviourListIsSet = true;
}

bool AccessAndMobilitySubscriptionData::expectedUeBehaviourListIsSet() const
{
    return m_ExpectedUeBehaviourListIsSet;
}

void AccessAndMobilitySubscriptionData::unsetExpectedUeBehaviourList()
{
    m_ExpectedUeBehaviourListIsSet = false;
}
std::vector<std::shared_ptr<RatType>>& AccessAndMobilitySubscriptionData::getPrimaryRatRestrictions()
{
    return m_PrimaryRatRestrictions;
}

void AccessAndMobilitySubscriptionData::setPrimaryRatRestrictions(const std::vector<std::shared_ptr<RatType>>& value)
{
    m_PrimaryRatRestrictions = value;
    m_PrimaryRatRestrictionsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::primaryRatRestrictionsIsSet() const
{
    return m_PrimaryRatRestrictionsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetPrimaryRatRestrictions()
{
    m_PrimaryRatRestrictionsIsSet = false;
}
std::vector<std::shared_ptr<RatType>>& AccessAndMobilitySubscriptionData::getSecondaryRatRestrictions()
{
    return m_SecondaryRatRestrictions;
}

void AccessAndMobilitySubscriptionData::setSecondaryRatRestrictions(const std::vector<std::shared_ptr<RatType>>& value)
{
    m_SecondaryRatRestrictions = value;
    m_SecondaryRatRestrictionsIsSet = true;
}

bool AccessAndMobilitySubscriptionData::secondaryRatRestrictionsIsSet() const
{
    return m_SecondaryRatRestrictionsIsSet;
}

void AccessAndMobilitySubscriptionData::unsetSecondaryRatRestrictions()
{
    m_SecondaryRatRestrictionsIsSet = false;
}
std::vector<std::shared_ptr<EdrxParameters>>& AccessAndMobilitySubscriptionData::getEdrxParametersList()
{
    return m_EdrxParametersList;
}

void AccessAndMobilitySubscriptionData::setEdrxParametersList(const std::vector<std::shared_ptr<EdrxParameters>>& value)
{
    m_EdrxParametersList = value;
    m_EdrxParametersListIsSet = true;
}

bool AccessAndMobilitySubscriptionData::edrxParametersListIsSet() const
{
    return m_EdrxParametersListIsSet;
}

void AccessAndMobilitySubscriptionData::unsetEdrxParametersList()
{
    m_EdrxParametersListIsSet = false;
}
std::vector<std::shared_ptr<PtwParameters>>& AccessAndMobilitySubscriptionData::getPtwParametersList()
{
    return m_PtwParametersList;
}

void AccessAndMobilitySubscriptionData::setPtwParametersList(const std::vector<std::shared_ptr<PtwParameters>>& value)
{
    m_PtwParametersList = value;
    m_PtwParametersListIsSet = true;
}

bool AccessAndMobilitySubscriptionData::ptwParametersListIsSet() const
{
    return m_PtwParametersListIsSet;
}

void AccessAndMobilitySubscriptionData::unsetPtwParametersList()
{
    m_PtwParametersListIsSet = false;
}
bool AccessAndMobilitySubscriptionData::isIabOperationAllowed() const
{
    return m_IabOperationAllowed;
}

void AccessAndMobilitySubscriptionData::setIabOperationAllowed(bool value)
{
    m_IabOperationAllowed = value;
    m_IabOperationAllowedIsSet = true;
}

bool AccessAndMobilitySubscriptionData::iabOperationAllowedIsSet() const
{
    return m_IabOperationAllowedIsSet;
}

void AccessAndMobilitySubscriptionData::unsetIabOperationAllowed()
{
    m_IabOperationAllowedIsSet = false;
}
std::vector<std::shared_ptr<WirelineArea>>& AccessAndMobilitySubscriptionData::getWirelineForbiddenAreas()
{
    return m_WirelineForbiddenAreas;
}

void AccessAndMobilitySubscriptionData::setWirelineForbiddenAreas(const std::vector<std::shared_ptr<WirelineArea>>& value)
{
    m_WirelineForbiddenAreas = value;
    m_WirelineForbiddenAreasIsSet = true;
}

bool AccessAndMobilitySubscriptionData::wirelineForbiddenAreasIsSet() const
{
    return m_WirelineForbiddenAreasIsSet;
}

void AccessAndMobilitySubscriptionData::unsetWirelineForbiddenAreas()
{
    m_WirelineForbiddenAreasIsSet = false;
}
std::shared_ptr<WirelineServiceAreaRestriction> AccessAndMobilitySubscriptionData::getWirelineServiceAreaRestriction() const
{
    return m_WirelineServiceAreaRestriction;
}

void AccessAndMobilitySubscriptionData::setWirelineServiceAreaRestriction(const std::shared_ptr<WirelineServiceAreaRestriction>& value)
{
    m_WirelineServiceAreaRestriction = value;
    m_WirelineServiceAreaRestrictionIsSet = true;
}

bool AccessAndMobilitySubscriptionData::wirelineServiceAreaRestrictionIsSet() const
{
    return m_WirelineServiceAreaRestrictionIsSet;
}

void AccessAndMobilitySubscriptionData::unsetWirelineServiceAreaRestriction()
{
    m_WirelineServiceAreaRestrictionIsSet = false;
}
}
}
}
}


