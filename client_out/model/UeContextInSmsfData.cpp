/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UeContextInSmsfData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UeContextInSmsfData::UeContextInSmsfData()
{
    m_SmsfInfo3GppAccessIsSet = false;
    m_SmsfInfoNon3GppAccessIsSet = false;
}

UeContextInSmsfData::~UeContextInSmsfData()
{
}

void UeContextInSmsfData::validate()
{
    // TODO: implement validation
}

web::json::value UeContextInSmsfData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SmsfInfo3GppAccessIsSet)
    {
        val[utility::conversions::to_string_t("smsfInfo3GppAccess")] = ModelBase::toJson(m_SmsfInfo3GppAccess);
    }
    if(m_SmsfInfoNon3GppAccessIsSet)
    {
        val[utility::conversions::to_string_t("smsfInfoNon3GppAccess")] = ModelBase::toJson(m_SmsfInfoNon3GppAccess);
    }

    return val;
}

bool UeContextInSmsfData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("smsfInfo3GppAccess")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smsfInfo3GppAccess"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SmsfInfo> refVal_smsfInfo3GppAccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_smsfInfo3GppAccess);
            setSmsfInfo3GppAccess(refVal_smsfInfo3GppAccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smsfInfoNon3GppAccess")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smsfInfoNon3GppAccess"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SmsfInfo> refVal_smsfInfoNon3GppAccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_smsfInfoNon3GppAccess);
            setSmsfInfoNon3GppAccess(refVal_smsfInfoNon3GppAccess);
        }
    }
    return ok;
}

void UeContextInSmsfData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SmsfInfo3GppAccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smsfInfo3GppAccess"), m_SmsfInfo3GppAccess));
    }
    if(m_SmsfInfoNon3GppAccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smsfInfoNon3GppAccess"), m_SmsfInfoNon3GppAccess));
    }
}

bool UeContextInSmsfData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("smsfInfo3GppAccess")))
    {
        std::shared_ptr<SmsfInfo> refVal_smsfInfo3GppAccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smsfInfo3GppAccess")), refVal_smsfInfo3GppAccess );
        setSmsfInfo3GppAccess(refVal_smsfInfo3GppAccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smsfInfoNon3GppAccess")))
    {
        std::shared_ptr<SmsfInfo> refVal_smsfInfoNon3GppAccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smsfInfoNon3GppAccess")), refVal_smsfInfoNon3GppAccess );
        setSmsfInfoNon3GppAccess(refVal_smsfInfoNon3GppAccess);
    }
    return ok;
}

std::shared_ptr<SmsfInfo> UeContextInSmsfData::getSmsfInfo3GppAccess() const
{
    return m_SmsfInfo3GppAccess;
}

void UeContextInSmsfData::setSmsfInfo3GppAccess(const std::shared_ptr<SmsfInfo>& value)
{
    m_SmsfInfo3GppAccess = value;
    m_SmsfInfo3GppAccessIsSet = true;
}

bool UeContextInSmsfData::smsfInfo3GppAccessIsSet() const
{
    return m_SmsfInfo3GppAccessIsSet;
}

void UeContextInSmsfData::unsetSmsfInfo3GppAccess()
{
    m_SmsfInfo3GppAccessIsSet = false;
}
std::shared_ptr<SmsfInfo> UeContextInSmsfData::getSmsfInfoNon3GppAccess() const
{
    return m_SmsfInfoNon3GppAccess;
}

void UeContextInSmsfData::setSmsfInfoNon3GppAccess(const std::shared_ptr<SmsfInfo>& value)
{
    m_SmsfInfoNon3GppAccess = value;
    m_SmsfInfoNon3GppAccessIsSet = true;
}

bool UeContextInSmsfData::smsfInfoNon3GppAccessIsSet() const
{
    return m_SmsfInfoNon3GppAccessIsSet;
}

void UeContextInSmsfData::unsetSmsfInfoNon3GppAccess()
{
    m_SmsfInfoNon3GppAccessIsSet = false;
}
}
}
}
}


