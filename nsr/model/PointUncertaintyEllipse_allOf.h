/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PointUncertaintyEllipse_allOf.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef PointUncertaintyEllipse_allOf_H_
#define PointUncertaintyEllipse_allOf_H_

#include "CSB_JsonParser.h"
#include "GeographicalCoordinates.h"
#include "UncertaintyEllipse.h"
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PointUncertaintyEllipse_allOf
    : public jsonParser::jsonParser<PointUncertaintyEllipse_allOf> {
public:
  explicit PointUncertaintyEllipse_allOf() {
    // constructor

    m_PointFlag = staticjson::Flags::Default;
    m_PointOutFlag.reset(new unsigned);
    *m_PointOutFlag.get() = 0;

    m_UncertaintyEllipseFlag = staticjson::Flags::Default;
    m_UncertaintyEllipseOutFlag.reset(new unsigned);
    *m_UncertaintyEllipseOutFlag.get() = 0;
    m_Confidence = 0;

    m_ConfidenceFlag = staticjson::Flags::Default;
    m_ConfidenceOutFlag.reset(new unsigned);
    *m_ConfidenceOutFlag.get() = 0;
  };
  virtual ~PointUncertaintyEllipse_allOf(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Point UncertaintyEllipse Confidence
    h->add_property("point", &this->m_Point, m_PointFlag);
    h->add_property("uncertaintyEllipse", &this->m_UncertaintyEllipse,
                    m_UncertaintyEllipseFlag);
    h->add_property("confidence", &this->m_Confidence, m_ConfidenceFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const PointUncertaintyEllipse_allOf &obj) {

    o << "Point : " << obj.m_Point << std::endl;

    o << "UncertaintyEllipse : " << obj.m_UncertaintyEllipse << std::endl;

    o << "Confidence : " << obj.m_Confidence << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// PointUncertaintyEllipse_allOf members vars : Point UncertaintyEllipse
  /// Confidence

  GeographicalCoordinates getPoint() const { return m_Point; }
  void setPoint(GeographicalCoordinates const &value) { m_Point = value; }

  UncertaintyEllipse getUncertaintyEllipse() const {
    return m_UncertaintyEllipse;
  }
  void setUncertaintyEllipse(UncertaintyEllipse const &value) {
    m_UncertaintyEllipse = value;
  }

  int32_t getConfidence() const { return m_Confidence; }
  void setConfidence(int32_t const value) { m_Confidence = value; }

public:
  GeographicalCoordinates m_Point;

  unsigned m_PointFlag;
  shared_ptr<unsigned> m_PointOutFlag;
  UncertaintyEllipse m_UncertaintyEllipse;

  unsigned m_UncertaintyEllipseFlag;
  shared_ptr<unsigned> m_UncertaintyEllipseOutFlag;
  int32_t m_Confidence;

  unsigned m_ConfidenceFlag;
  shared_ptr<unsigned> m_ConfidenceOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PointUncertaintyEllipse_allOf_H_ */
