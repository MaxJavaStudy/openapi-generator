/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GroupIdentifiers.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GroupIdentifiers::GroupIdentifiers()
{
    m_ExtGroupId = utility::conversions::to_string_t("");
    m_ExtGroupIdIsSet = false;
    m_IntGroupId = utility::conversions::to_string_t("");
    m_IntGroupIdIsSet = false;
    m_UeIdListIsSet = false;
}

GroupIdentifiers::~GroupIdentifiers()
{
}

void GroupIdentifiers::validate()
{
    // TODO: implement validation
}

web::json::value GroupIdentifiers::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ExtGroupIdIsSet)
    {
        val[utility::conversions::to_string_t("extGroupId")] = ModelBase::toJson(m_ExtGroupId);
    }
    if(m_IntGroupIdIsSet)
    {
        val[utility::conversions::to_string_t("intGroupId")] = ModelBase::toJson(m_IntGroupId);
    }
    if(m_UeIdListIsSet)
    {
        val[utility::conversions::to_string_t("ueIdList")] = ModelBase::toJson(m_UeIdList);
    }

    return val;
}

bool GroupIdentifiers::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("extGroupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("extGroupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_extGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_extGroupId);
            setExtGroupId(refVal_extGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("intGroupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("intGroupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_intGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_intGroupId);
            setIntGroupId(refVal_intGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ueIdList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ueIdList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UeId>> refVal_ueIdList;
            ok &= ModelBase::fromJson(fieldValue, refVal_ueIdList);
            setUeIdList(refVal_ueIdList);
        }
    }
    return ok;
}

void GroupIdentifiers::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ExtGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("extGroupId"), m_ExtGroupId));
    }
    if(m_IntGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("intGroupId"), m_IntGroupId));
    }
    if(m_UeIdListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ueIdList"), m_UeIdList));
    }
}

bool GroupIdentifiers::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("extGroupId")))
    {
        utility::string_t refVal_extGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("extGroupId")), refVal_extGroupId );
        setExtGroupId(refVal_extGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("intGroupId")))
    {
        utility::string_t refVal_intGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("intGroupId")), refVal_intGroupId );
        setIntGroupId(refVal_intGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ueIdList")))
    {
        std::vector<std::shared_ptr<UeId>> refVal_ueIdList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ueIdList")), refVal_ueIdList );
        setUeIdList(refVal_ueIdList);
    }
    return ok;
}

utility::string_t GroupIdentifiers::getExtGroupId() const
{
    return m_ExtGroupId;
}

void GroupIdentifiers::setExtGroupId(const utility::string_t& value)
{
    m_ExtGroupId = value;
    m_ExtGroupIdIsSet = true;
}

bool GroupIdentifiers::extGroupIdIsSet() const
{
    return m_ExtGroupIdIsSet;
}

void GroupIdentifiers::unsetExtGroupId()
{
    m_ExtGroupIdIsSet = false;
}
utility::string_t GroupIdentifiers::getIntGroupId() const
{
    return m_IntGroupId;
}

void GroupIdentifiers::setIntGroupId(const utility::string_t& value)
{
    m_IntGroupId = value;
    m_IntGroupIdIsSet = true;
}

bool GroupIdentifiers::intGroupIdIsSet() const
{
    return m_IntGroupIdIsSet;
}

void GroupIdentifiers::unsetIntGroupId()
{
    m_IntGroupIdIsSet = false;
}
std::vector<std::shared_ptr<UeId>>& GroupIdentifiers::getUeIdList()
{
    return m_UeIdList;
}

void GroupIdentifiers::setUeIdList(const std::vector<std::shared_ptr<UeId>>& value)
{
    m_UeIdList = value;
    m_UeIdListIsSet = true;
}

bool GroupIdentifiers::ueIdListIsSet() const
{
    return m_UeIdListIsSet;
}

void GroupIdentifiers::unsetUeIdList()
{
    m_UeIdListIsSet = false;
}
}
}
}
}


