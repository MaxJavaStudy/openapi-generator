/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * VnGroupData.h
 *
 * 
 */

#ifndef VnGroupData_H_
#define VnGroupData_H_


#include <string>
#include "AppDescriptor.h"
#include "PduSessionTypes.h"
#include "Snssai.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  VnGroupData: public jsonParser::jsonParser<VnGroupData>
{
public:
    explicit VnGroupData(){
        // constructor
        
            m_PduSessionTypesFlag = (staticjson::Flags::Optional);
m_Dnn = "";
        
            m_DnnFlag = (staticjson::Flags::Optional);

            m_SingleNssaiFlag = (staticjson::Flags::Optional);

            m_AppDescriptorsFlag = (staticjson::Flags::Optional);
    };
    virtual ~VnGroupData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : PduSessionTypes Dnn SingleNssai AppDescriptors 
        h->add_property("pduSessionTypes", &this->m_PduSessionTypes, m_PduSessionTypesFlag);
        h->add_property("dnn", &this->m_Dnn, m_DnnFlag);
        h->add_property("singleNssai", &this->m_SingleNssai, m_SingleNssaiFlag);
        h->add_property("appDescriptors", &this->m_AppDescriptors, m_AppDescriptorsFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const VnGroupData& obj)
    {
        
        o << "PduSessionTypes : " << obj.m_PduSessionTypes << std::endl;

        o << "Dnn : " << obj.m_Dnn << std::endl;

        o << "SingleNssai : " << obj.m_SingleNssai << std::endl;
        o<< convert2string(std::string("AppDescriptors"), obj.m_AppDescriptors) <<std::endl;
       
     
        return o;
    }

    /////////////////////////////////////////////
    /// VnGroupData members vars : PduSessionTypes Dnn SingleNssai AppDescriptors 

    PduSessionTypes  getPduSessionTypes() const
    {
        return m_PduSessionTypes;
    }
    void  setPduSessionTypes(PduSessionTypes const& value)
    {
        m_PduSessionTypes = value;
    }

std::string  getDnn() const
    {
        return m_Dnn;
    }
    void  setDnn(std::string const& value)
    {
        m_Dnn = value;
    }

Snssai  getSingleNssai() const
    {
        return m_SingleNssai;
    }
    void  setSingleNssai(Snssai const& value)
    {
        m_SingleNssai = value;
    }

std::vector<AppDescriptor>&  getAppDescriptors()
    {
        return m_AppDescriptors;
    }
    void  setAppDescriptors(std::vector<AppDescriptor> const& value)
    {
        m_AppDescriptors = value;
    }



    
public:
    PduSessionTypes m_PduSessionTypes;
    
    unsigned m_PduSessionTypesFlag;
    std::string m_Dnn;
    
    unsigned m_DnnFlag;
    Snssai m_SingleNssai;
    
    unsigned m_SingleNssaiFlag;
    std::vector<AppDescriptor> m_AppDescriptors;
    
    unsigned m_AppDescriptorsFlag;
  
};
}
}
}
}

#endif /* VnGroupData_H_ */
