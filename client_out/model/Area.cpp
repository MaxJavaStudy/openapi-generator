/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Area.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Area::Area()
{
    m_TacsIsSet = false;
    m_AreaCode = utility::conversions::to_string_t("");
    m_AreaCodeIsSet = false;
}

Area::~Area()
{
}

void Area::validate()
{
    // TODO: implement validation
}

web::json::value Area::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TacsIsSet)
    {
        val[utility::conversions::to_string_t("tacs")] = ModelBase::toJson(m_Tacs);
    }
    if(m_AreaCodeIsSet)
    {
        val[utility::conversions::to_string_t("areaCode")] = ModelBase::toJson(m_AreaCode);
    }

    return val;
}

bool Area::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("tacs")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tacs"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_tacs;
            ok &= ModelBase::fromJson(fieldValue, refVal_tacs);
            setTacs(refVal_tacs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("areaCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("areaCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_areaCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_areaCode);
            setAreaCode(refVal_areaCode);
        }
    }
    return ok;
}

void Area::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TacsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tacs"), m_Tacs));
    }
    if(m_AreaCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("areaCode"), m_AreaCode));
    }
}

bool Area::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("tacs")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_tacs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tacs")), refVal_tacs );
        setTacs(refVal_tacs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("areaCode")))
    {
        utility::string_t refVal_areaCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("areaCode")), refVal_areaCode );
        setAreaCode(refVal_areaCode);
    }
    return ok;
}

std::vector<std::shared_ptr<utility::string_t>>& Area::getTacs()
{
    return m_Tacs;
}

void Area::setTacs(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Tacs = value;
    m_TacsIsSet = true;
}

bool Area::tacsIsSet() const
{
    return m_TacsIsSet;
}

void Area::unsetTacs()
{
    m_TacsIsSet = false;
}
utility::string_t Area::getAreaCode() const
{
    return m_AreaCode;
}

void Area::setAreaCode(const utility::string_t& value)
{
    m_AreaCode = value;
    m_AreaCodeIsSet = true;
}

bool Area::areaCodeIsSet() const
{
    return m_AreaCodeIsSet;
}

void Area::unsetAreaCode()
{
    m_AreaCodeIsSet = false;
}
}
}
}
}


