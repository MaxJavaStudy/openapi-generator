/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReportTypeMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReportTypeMdt::ReportTypeMdt()
{
}

ReportTypeMdt::~ReportTypeMdt()
{
}

void ReportTypeMdt::validate()
{
    // TODO: implement validation
}

web::json::value ReportTypeMdt::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eReportTypeMdt::ReportTypeMdt_PERIODICAL) val = web::json::value::string(U(PERIODICAL));
    if (m_value == eReportTypeMdt::ReportTypeMdt_EVENT_TRIGGED) val = web::json::value::string(U(EVENT_TRIGGED));

    return val;
}

bool ReportTypeMdt::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(PERIODICAL)) m_value = eReportTypeMdt::ReportTypeMdt_PERIODICAL;
    if (s == utility::conversions::to_string_t(EVENT_TRIGGED)) m_value = eReportTypeMdt::ReportTypeMdt_EVENT_TRIGGED;
    return true;
}

void ReportTypeMdt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eReportTypeMdt::ReportTypeMdt_PERIODICAL) s = utility::conversions::to_string_t(PERIODICAL);
    if (m_value == eReportTypeMdt::ReportTypeMdt_EVENT_TRIGGED) s = utility::conversions::to_string_t(EVENT_TRIGGED);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool ReportTypeMdt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eReportTypeMdt v;

        
        if (s == utility::conversions::to_string_t(PERIODICAL)) v = eReportTypeMdt::ReportTypeMdt_PERIODICAL;
        if (s == utility::conversions::to_string_t(EVENT_TRIGGED)) v = eReportTypeMdt::ReportTypeMdt_EVENT_TRIGGED;

        setValue(v);
    }
    return ok;
}

ReportTypeMdt::eReportTypeMdt ReportTypeMdt::getValue() const
{
   return m_value;
}

void ReportTypeMdt::setValue(ReportTypeMdt::eReportTypeMdt const value)
{
   m_value = value;
}


}
}
}
}


