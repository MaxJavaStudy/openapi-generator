/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GeographicArea.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GeographicArea::GeographicArea()
{
    m_ShapeIsSet = false;
    m_PointIsSet = false;
    m_Uncertainty = 0.0f;
    m_UncertaintyIsSet = false;
    m_UncertaintyEllipseIsSet = false;
    m_Confidence = 0;
    m_ConfidenceIsSet = false;
    m_PointListIsSet = false;
    m_Altitude = 0.0;
    m_AltitudeIsSet = false;
    m_UncertaintyAltitude = 0.0f;
    m_UncertaintyAltitudeIsSet = false;
    m_InnerRadius = 0;
    m_InnerRadiusIsSet = false;
    m_UncertaintyRadius = 0.0f;
    m_UncertaintyRadiusIsSet = false;
    m_OffsetAngle = 0;
    m_OffsetAngleIsSet = false;
    m_IncludedAngle = 0;
    m_IncludedAngleIsSet = false;
}

GeographicArea::~GeographicArea()
{
}

void GeographicArea::validate()
{
    // TODO: implement validation
}

web::json::value GeographicArea::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ShapeIsSet)
    {
        val[utility::conversions::to_string_t("shape")] = ModelBase::toJson(m_Shape);
    }
    if(m_PointIsSet)
    {
        val[utility::conversions::to_string_t("point")] = ModelBase::toJson(m_Point);
    }
    if(m_UncertaintyIsSet)
    {
        val[utility::conversions::to_string_t("uncertainty")] = ModelBase::toJson(m_Uncertainty);
    }
    if(m_UncertaintyEllipseIsSet)
    {
        val[utility::conversions::to_string_t("uncertaintyEllipse")] = ModelBase::toJson(m_UncertaintyEllipse);
    }
    if(m_ConfidenceIsSet)
    {
        val[utility::conversions::to_string_t("confidence")] = ModelBase::toJson(m_Confidence);
    }
    if(m_PointListIsSet)
    {
        val[utility::conversions::to_string_t("pointList")] = ModelBase::toJson(m_PointList);
    }
    if(m_AltitudeIsSet)
    {
        val[utility::conversions::to_string_t("altitude")] = ModelBase::toJson(m_Altitude);
    }
    if(m_UncertaintyAltitudeIsSet)
    {
        val[utility::conversions::to_string_t("uncertaintyAltitude")] = ModelBase::toJson(m_UncertaintyAltitude);
    }
    if(m_InnerRadiusIsSet)
    {
        val[utility::conversions::to_string_t("innerRadius")] = ModelBase::toJson(m_InnerRadius);
    }
    if(m_UncertaintyRadiusIsSet)
    {
        val[utility::conversions::to_string_t("uncertaintyRadius")] = ModelBase::toJson(m_UncertaintyRadius);
    }
    if(m_OffsetAngleIsSet)
    {
        val[utility::conversions::to_string_t("offsetAngle")] = ModelBase::toJson(m_OffsetAngle);
    }
    if(m_IncludedAngleIsSet)
    {
        val[utility::conversions::to_string_t("includedAngle")] = ModelBase::toJson(m_IncludedAngle);
    }

    return val;
}

bool GeographicArea::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("shape")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("shape"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SupportedGADShapes> refVal_shape;
            ok &= ModelBase::fromJson(fieldValue, refVal_shape);
            setShape(refVal_shape);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("point")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("point"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GeographicalCoordinates> refVal_point;
            ok &= ModelBase::fromJson(fieldValue, refVal_point);
            setPoint(refVal_point);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uncertainty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uncertainty"));
        if(!fieldValue.is_null())
        {
            float refVal_uncertainty;
            ok &= ModelBase::fromJson(fieldValue, refVal_uncertainty);
            setUncertainty(refVal_uncertainty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uncertaintyEllipse")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uncertaintyEllipse"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UncertaintyEllipse> refVal_uncertaintyEllipse;
            ok &= ModelBase::fromJson(fieldValue, refVal_uncertaintyEllipse);
            setUncertaintyEllipse(refVal_uncertaintyEllipse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confidence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("confidence"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_confidence;
            ok &= ModelBase::fromJson(fieldValue, refVal_confidence);
            setConfidence(refVal_confidence);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pointList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pointList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GeographicalCoordinates>> refVal_pointList;
            ok &= ModelBase::fromJson(fieldValue, refVal_pointList);
            setPointList(refVal_pointList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("altitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("altitude"));
        if(!fieldValue.is_null())
        {
            double refVal_altitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_altitude);
            setAltitude(refVal_altitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uncertaintyAltitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uncertaintyAltitude"));
        if(!fieldValue.is_null())
        {
            float refVal_uncertaintyAltitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_uncertaintyAltitude);
            setUncertaintyAltitude(refVal_uncertaintyAltitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("innerRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("innerRadius"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_innerRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_innerRadius);
            setInnerRadius(refVal_innerRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uncertaintyRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uncertaintyRadius"));
        if(!fieldValue.is_null())
        {
            float refVal_uncertaintyRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_uncertaintyRadius);
            setUncertaintyRadius(refVal_uncertaintyRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offsetAngle")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offsetAngle"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_offsetAngle;
            ok &= ModelBase::fromJson(fieldValue, refVal_offsetAngle);
            setOffsetAngle(refVal_offsetAngle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includedAngle")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includedAngle"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_includedAngle;
            ok &= ModelBase::fromJson(fieldValue, refVal_includedAngle);
            setIncludedAngle(refVal_includedAngle);
        }
    }
    return ok;
}

void GeographicArea::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ShapeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shape"), m_Shape));
    }
    if(m_PointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("point"), m_Point));
    }
    if(m_UncertaintyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uncertainty"), m_Uncertainty));
    }
    if(m_UncertaintyEllipseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uncertaintyEllipse"), m_UncertaintyEllipse));
    }
    if(m_ConfidenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confidence"), m_Confidence));
    }
    if(m_PointListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pointList"), m_PointList));
    }
    if(m_AltitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("altitude"), m_Altitude));
    }
    if(m_UncertaintyAltitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uncertaintyAltitude"), m_UncertaintyAltitude));
    }
    if(m_InnerRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("innerRadius"), m_InnerRadius));
    }
    if(m_UncertaintyRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uncertaintyRadius"), m_UncertaintyRadius));
    }
    if(m_OffsetAngleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offsetAngle"), m_OffsetAngle));
    }
    if(m_IncludedAngleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includedAngle"), m_IncludedAngle));
    }
}

bool GeographicArea::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("shape")))
    {
        std::shared_ptr<SupportedGADShapes> refVal_shape;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shape")), refVal_shape );
        setShape(refVal_shape);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("point")))
    {
        std::shared_ptr<GeographicalCoordinates> refVal_point;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("point")), refVal_point );
        setPoint(refVal_point);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uncertainty")))
    {
        float refVal_uncertainty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uncertainty")), refVal_uncertainty );
        setUncertainty(refVal_uncertainty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uncertaintyEllipse")))
    {
        std::shared_ptr<UncertaintyEllipse> refVal_uncertaintyEllipse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uncertaintyEllipse")), refVal_uncertaintyEllipse );
        setUncertaintyEllipse(refVal_uncertaintyEllipse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confidence")))
    {
        int32_t refVal_confidence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("confidence")), refVal_confidence );
        setConfidence(refVal_confidence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pointList")))
    {
        std::vector<std::shared_ptr<GeographicalCoordinates>> refVal_pointList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pointList")), refVal_pointList );
        setPointList(refVal_pointList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("altitude")))
    {
        double refVal_altitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("altitude")), refVal_altitude );
        setAltitude(refVal_altitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uncertaintyAltitude")))
    {
        float refVal_uncertaintyAltitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uncertaintyAltitude")), refVal_uncertaintyAltitude );
        setUncertaintyAltitude(refVal_uncertaintyAltitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("innerRadius")))
    {
        int32_t refVal_innerRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("innerRadius")), refVal_innerRadius );
        setInnerRadius(refVal_innerRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uncertaintyRadius")))
    {
        float refVal_uncertaintyRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uncertaintyRadius")), refVal_uncertaintyRadius );
        setUncertaintyRadius(refVal_uncertaintyRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offsetAngle")))
    {
        int32_t refVal_offsetAngle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offsetAngle")), refVal_offsetAngle );
        setOffsetAngle(refVal_offsetAngle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includedAngle")))
    {
        int32_t refVal_includedAngle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includedAngle")), refVal_includedAngle );
        setIncludedAngle(refVal_includedAngle);
    }
    return ok;
}

std::shared_ptr<SupportedGADShapes> GeographicArea::getShape() const
{
    return m_Shape;
}

void GeographicArea::setShape(const std::shared_ptr<SupportedGADShapes>& value)
{
    m_Shape = value;
    m_ShapeIsSet = true;
}

bool GeographicArea::shapeIsSet() const
{
    return m_ShapeIsSet;
}

void GeographicArea::unsetShape()
{
    m_ShapeIsSet = false;
}
std::shared_ptr<GeographicalCoordinates> GeographicArea::getPoint() const
{
    return m_Point;
}

void GeographicArea::setPoint(const std::shared_ptr<GeographicalCoordinates>& value)
{
    m_Point = value;
    m_PointIsSet = true;
}

bool GeographicArea::pointIsSet() const
{
    return m_PointIsSet;
}

void GeographicArea::unsetPoint()
{
    m_PointIsSet = false;
}
float GeographicArea::getUncertainty() const
{
    return m_Uncertainty;
}

void GeographicArea::setUncertainty(float value)
{
    m_Uncertainty = value;
    m_UncertaintyIsSet = true;
}

bool GeographicArea::uncertaintyIsSet() const
{
    return m_UncertaintyIsSet;
}

void GeographicArea::unsetUncertainty()
{
    m_UncertaintyIsSet = false;
}
std::shared_ptr<UncertaintyEllipse> GeographicArea::getUncertaintyEllipse() const
{
    return m_UncertaintyEllipse;
}

void GeographicArea::setUncertaintyEllipse(const std::shared_ptr<UncertaintyEllipse>& value)
{
    m_UncertaintyEllipse = value;
    m_UncertaintyEllipseIsSet = true;
}

bool GeographicArea::uncertaintyEllipseIsSet() const
{
    return m_UncertaintyEllipseIsSet;
}

void GeographicArea::unsetUncertaintyEllipse()
{
    m_UncertaintyEllipseIsSet = false;
}
int32_t GeographicArea::getConfidence() const
{
    return m_Confidence;
}

void GeographicArea::setConfidence(int32_t value)
{
    m_Confidence = value;
    m_ConfidenceIsSet = true;
}

bool GeographicArea::confidenceIsSet() const
{
    return m_ConfidenceIsSet;
}

void GeographicArea::unsetConfidence()
{
    m_ConfidenceIsSet = false;
}
std::vector<std::shared_ptr<GeographicalCoordinates>>& GeographicArea::getPointList()
{
    return m_PointList;
}

void GeographicArea::setPointList(const std::vector<std::shared_ptr<GeographicalCoordinates>>& value)
{
    m_PointList = value;
    m_PointListIsSet = true;
}

bool GeographicArea::pointListIsSet() const
{
    return m_PointListIsSet;
}

void GeographicArea::unsetPointList()
{
    m_PointListIsSet = false;
}
double GeographicArea::getAltitude() const
{
    return m_Altitude;
}

void GeographicArea::setAltitude(double value)
{
    m_Altitude = value;
    m_AltitudeIsSet = true;
}

bool GeographicArea::altitudeIsSet() const
{
    return m_AltitudeIsSet;
}

void GeographicArea::unsetAltitude()
{
    m_AltitudeIsSet = false;
}
float GeographicArea::getUncertaintyAltitude() const
{
    return m_UncertaintyAltitude;
}

void GeographicArea::setUncertaintyAltitude(float value)
{
    m_UncertaintyAltitude = value;
    m_UncertaintyAltitudeIsSet = true;
}

bool GeographicArea::uncertaintyAltitudeIsSet() const
{
    return m_UncertaintyAltitudeIsSet;
}

void GeographicArea::unsetUncertaintyAltitude()
{
    m_UncertaintyAltitudeIsSet = false;
}
int32_t GeographicArea::getInnerRadius() const
{
    return m_InnerRadius;
}

void GeographicArea::setInnerRadius(int32_t value)
{
    m_InnerRadius = value;
    m_InnerRadiusIsSet = true;
}

bool GeographicArea::innerRadiusIsSet() const
{
    return m_InnerRadiusIsSet;
}

void GeographicArea::unsetInnerRadius()
{
    m_InnerRadiusIsSet = false;
}
float GeographicArea::getUncertaintyRadius() const
{
    return m_UncertaintyRadius;
}

void GeographicArea::setUncertaintyRadius(float value)
{
    m_UncertaintyRadius = value;
    m_UncertaintyRadiusIsSet = true;
}

bool GeographicArea::uncertaintyRadiusIsSet() const
{
    return m_UncertaintyRadiusIsSet;
}

void GeographicArea::unsetUncertaintyRadius()
{
    m_UncertaintyRadiusIsSet = false;
}
int32_t GeographicArea::getOffsetAngle() const
{
    return m_OffsetAngle;
}

void GeographicArea::setOffsetAngle(int32_t value)
{
    m_OffsetAngle = value;
    m_OffsetAngleIsSet = true;
}

bool GeographicArea::offsetAngleIsSet() const
{
    return m_OffsetAngleIsSet;
}

void GeographicArea::unsetOffsetAngle()
{
    m_OffsetAngleIsSet = false;
}
int32_t GeographicArea::getIncludedAngle() const
{
    return m_IncludedAngle;
}

void GeographicArea::setIncludedAngle(int32_t value)
{
    m_IncludedAngle = value;
    m_IncludedAngleIsSet = true;
}

bool GeographicArea::includedAngleIsSet() const
{
    return m_IncludedAngleIsSet;
}

void GeographicArea::unsetIncludedAngle()
{
    m_IncludedAngleIsSet = false;
}
}
}
}
}


