/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpSecurity.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UpSecurity::UpSecurity()
{
    m_UpIntegrIsSet = false;
    m_UpConfidIsSet = false;
}

UpSecurity::~UpSecurity()
{
}

void UpSecurity::validate()
{
    // TODO: implement validation
}

web::json::value UpSecurity::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UpIntegrIsSet)
    {
        val[utility::conversions::to_string_t("upIntegr")] = ModelBase::toJson(m_UpIntegr);
    }
    if(m_UpConfidIsSet)
    {
        val[utility::conversions::to_string_t("upConfid")] = ModelBase::toJson(m_UpConfid);
    }

    return val;
}

bool UpSecurity::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("upIntegr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upIntegr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpIntegrity> refVal_upIntegr;
            ok &= ModelBase::fromJson(fieldValue, refVal_upIntegr);
            setUpIntegr(refVal_upIntegr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upConfid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upConfid"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpConfidentiality> refVal_upConfid;
            ok &= ModelBase::fromJson(fieldValue, refVal_upConfid);
            setUpConfid(refVal_upConfid);
        }
    }
    return ok;
}

void UpSecurity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_UpIntegrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upIntegr"), m_UpIntegr));
    }
    if(m_UpConfidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upConfid"), m_UpConfid));
    }
}

bool UpSecurity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("upIntegr")))
    {
        std::shared_ptr<UpIntegrity> refVal_upIntegr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upIntegr")), refVal_upIntegr );
        setUpIntegr(refVal_upIntegr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upConfid")))
    {
        std::shared_ptr<UpConfidentiality> refVal_upConfid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upConfid")), refVal_upConfid );
        setUpConfid(refVal_upConfid);
    }
    return ok;
}

std::shared_ptr<UpIntegrity> UpSecurity::getUpIntegr() const
{
    return m_UpIntegr;
}

void UpSecurity::setUpIntegr(const std::shared_ptr<UpIntegrity>& value)
{
    m_UpIntegr = value;
    m_UpIntegrIsSet = true;
}

bool UpSecurity::upIntegrIsSet() const
{
    return m_UpIntegrIsSet;
}

void UpSecurity::unsetUpIntegr()
{
    m_UpIntegrIsSet = false;
}
std::shared_ptr<UpConfidentiality> UpSecurity::getUpConfid() const
{
    return m_UpConfid;
}

void UpSecurity::setUpConfid(const std::shared_ptr<UpConfidentiality>& value)
{
    m_UpConfid = value;
    m_UpConfidIsSet = true;
}

bool UpSecurity::upConfidIsSet() const
{
    return m_UpConfidIsSet;
}

void UpSecurity::unsetUpConfid()
{
    m_UpConfidIsSet = false;
}
}
}
}
}


