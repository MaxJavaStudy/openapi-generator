/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DnnInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




DnnInfo::DnnInfo()
{
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_DefaultDnnIndicator = false;
    m_DefaultDnnIndicatorIsSet = false;
    m_LboRoamingAllowed = false;
    m_LboRoamingAllowedIsSet = false;
    m_IwkEpsInd = false;
    m_IwkEpsIndIsSet = false;
    m_DnnBarred = false;
    m_DnnBarredIsSet = false;
    m_InvokeNefInd = false;
    m_InvokeNefIndIsSet = false;
    m_SmfListIsSet = false;
    m_SameSmfInd = false;
    m_SameSmfIndIsSet = false;
}

DnnInfo::~DnnInfo()
{
}

void DnnInfo::validate()
{
    // TODO: implement validation
}

web::json::value DnnInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t("dnn")] = ModelBase::toJson(m_Dnn);
    }
    if(m_DefaultDnnIndicatorIsSet)
    {
        val[utility::conversions::to_string_t("defaultDnnIndicator")] = ModelBase::toJson(m_DefaultDnnIndicator);
    }
    if(m_LboRoamingAllowedIsSet)
    {
        val[utility::conversions::to_string_t("lboRoamingAllowed")] = ModelBase::toJson(m_LboRoamingAllowed);
    }
    if(m_IwkEpsIndIsSet)
    {
        val[utility::conversions::to_string_t("iwkEpsInd")] = ModelBase::toJson(m_IwkEpsInd);
    }
    if(m_DnnBarredIsSet)
    {
        val[utility::conversions::to_string_t("dnnBarred")] = ModelBase::toJson(m_DnnBarred);
    }
    if(m_InvokeNefIndIsSet)
    {
        val[utility::conversions::to_string_t("invokeNefInd")] = ModelBase::toJson(m_InvokeNefInd);
    }
    if(m_SmfListIsSet)
    {
        val[utility::conversions::to_string_t("smfList")] = ModelBase::toJson(m_SmfList);
    }
    if(m_SameSmfIndIsSet)
    {
        val[utility::conversions::to_string_t("sameSmfInd")] = ModelBase::toJson(m_SameSmfInd);
    }

    return val;
}

bool DnnInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("dnn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnn);
            setDnn(refVal_dnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultDnnIndicator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultDnnIndicator"));
        if(!fieldValue.is_null())
        {
            bool refVal_defaultDnnIndicator;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultDnnIndicator);
            setDefaultDnnIndicator(refVal_defaultDnnIndicator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lboRoamingAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lboRoamingAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_lboRoamingAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_lboRoamingAllowed);
            setLboRoamingAllowed(refVal_lboRoamingAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iwkEpsInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iwkEpsInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_iwkEpsInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_iwkEpsInd);
            setIwkEpsInd(refVal_iwkEpsInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dnnBarred")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnnBarred"));
        if(!fieldValue.is_null())
        {
            bool refVal_dnnBarred;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnnBarred);
            setDnnBarred(refVal_dnnBarred);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invokeNefInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("invokeNefInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_invokeNefInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_invokeNefInd);
            setInvokeNefInd(refVal_invokeNefInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smfList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smfList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_smfList;
            ok &= ModelBase::fromJson(fieldValue, refVal_smfList);
            setSmfList(refVal_smfList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sameSmfInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sameSmfInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_sameSmfInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_sameSmfInd);
            setSameSmfInd(refVal_sameSmfInd);
        }
    }
    return ok;
}

void DnnInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnn"), m_Dnn));
    }
    if(m_DefaultDnnIndicatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultDnnIndicator"), m_DefaultDnnIndicator));
    }
    if(m_LboRoamingAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lboRoamingAllowed"), m_LboRoamingAllowed));
    }
    if(m_IwkEpsIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iwkEpsInd"), m_IwkEpsInd));
    }
    if(m_DnnBarredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnnBarred"), m_DnnBarred));
    }
    if(m_InvokeNefIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("invokeNefInd"), m_InvokeNefInd));
    }
    if(m_SmfListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smfList"), m_SmfList));
    }
    if(m_SameSmfIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sameSmfInd"), m_SameSmfInd));
    }
}

bool DnnInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dnn")))
    {
        utility::string_t refVal_dnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnn")), refVal_dnn );
        setDnn(refVal_dnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultDnnIndicator")))
    {
        bool refVal_defaultDnnIndicator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultDnnIndicator")), refVal_defaultDnnIndicator );
        setDefaultDnnIndicator(refVal_defaultDnnIndicator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lboRoamingAllowed")))
    {
        bool refVal_lboRoamingAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lboRoamingAllowed")), refVal_lboRoamingAllowed );
        setLboRoamingAllowed(refVal_lboRoamingAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iwkEpsInd")))
    {
        bool refVal_iwkEpsInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iwkEpsInd")), refVal_iwkEpsInd );
        setIwkEpsInd(refVal_iwkEpsInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dnnBarred")))
    {
        bool refVal_dnnBarred;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnnBarred")), refVal_dnnBarred );
        setDnnBarred(refVal_dnnBarred);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invokeNefInd")))
    {
        bool refVal_invokeNefInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("invokeNefInd")), refVal_invokeNefInd );
        setInvokeNefInd(refVal_invokeNefInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smfList")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_smfList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smfList")), refVal_smfList );
        setSmfList(refVal_smfList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sameSmfInd")))
    {
        bool refVal_sameSmfInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sameSmfInd")), refVal_sameSmfInd );
        setSameSmfInd(refVal_sameSmfInd);
    }
    return ok;
}

utility::string_t DnnInfo::getDnn() const
{
    return m_Dnn;
}

void DnnInfo::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool DnnInfo::dnnIsSet() const
{
    return m_DnnIsSet;
}

void DnnInfo::unsetDnn()
{
    m_DnnIsSet = false;
}
bool DnnInfo::isDefaultDnnIndicator() const
{
    return m_DefaultDnnIndicator;
}

void DnnInfo::setDefaultDnnIndicator(bool value)
{
    m_DefaultDnnIndicator = value;
    m_DefaultDnnIndicatorIsSet = true;
}

bool DnnInfo::defaultDnnIndicatorIsSet() const
{
    return m_DefaultDnnIndicatorIsSet;
}

void DnnInfo::unsetDefaultDnnIndicator()
{
    m_DefaultDnnIndicatorIsSet = false;
}
bool DnnInfo::isLboRoamingAllowed() const
{
    return m_LboRoamingAllowed;
}

void DnnInfo::setLboRoamingAllowed(bool value)
{
    m_LboRoamingAllowed = value;
    m_LboRoamingAllowedIsSet = true;
}

bool DnnInfo::lboRoamingAllowedIsSet() const
{
    return m_LboRoamingAllowedIsSet;
}

void DnnInfo::unsetLboRoamingAllowed()
{
    m_LboRoamingAllowedIsSet = false;
}
bool DnnInfo::isIwkEpsInd() const
{
    return m_IwkEpsInd;
}

void DnnInfo::setIwkEpsInd(bool value)
{
    m_IwkEpsInd = value;
    m_IwkEpsIndIsSet = true;
}

bool DnnInfo::iwkEpsIndIsSet() const
{
    return m_IwkEpsIndIsSet;
}

void DnnInfo::unsetIwkEpsInd()
{
    m_IwkEpsIndIsSet = false;
}
bool DnnInfo::isDnnBarred() const
{
    return m_DnnBarred;
}

void DnnInfo::setDnnBarred(bool value)
{
    m_DnnBarred = value;
    m_DnnBarredIsSet = true;
}

bool DnnInfo::dnnBarredIsSet() const
{
    return m_DnnBarredIsSet;
}

void DnnInfo::unsetDnnBarred()
{
    m_DnnBarredIsSet = false;
}
bool DnnInfo::isInvokeNefInd() const
{
    return m_InvokeNefInd;
}

void DnnInfo::setInvokeNefInd(bool value)
{
    m_InvokeNefInd = value;
    m_InvokeNefIndIsSet = true;
}

bool DnnInfo::invokeNefIndIsSet() const
{
    return m_InvokeNefIndIsSet;
}

void DnnInfo::unsetInvokeNefInd()
{
    m_InvokeNefIndIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& DnnInfo::getSmfList()
{
    return m_SmfList;
}

void DnnInfo::setSmfList(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_SmfList = value;
    m_SmfListIsSet = true;
}

bool DnnInfo::smfListIsSet() const
{
    return m_SmfListIsSet;
}

void DnnInfo::unsetSmfList()
{
    m_SmfListIsSet = false;
}
bool DnnInfo::isSameSmfInd() const
{
    return m_SameSmfInd;
}

void DnnInfo::setSameSmfInd(bool value)
{
    m_SameSmfInd = value;
    m_SameSmfIndIsSet = true;
}

bool DnnInfo::sameSmfIndIsSet() const
{
    return m_SameSmfIndIsSet;
}

void DnnInfo::unsetSameSmfInd()
{
    m_SameSmfIndIsSet = false;
}
}
}
}
}


