/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UpSecurity.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef UpSecurity_H_
#define UpSecurity_H_

#include "CSB_JsonParser.h"
#include "UpConfidentiality.h"
#include "UpIntegrity.h"
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UpSecurity : public jsonParser::jsonParser<UpSecurity> {
public:
  explicit UpSecurity() {
    // constructor

    m_UpIntegrFlag = staticjson::Flags::Default;
    m_UpIntegrOutFlag.reset(new unsigned);
    *m_UpIntegrOutFlag.get() = 0;

    m_UpConfidFlag = staticjson::Flags::Default;
    m_UpConfidOutFlag.reset(new unsigned);
    *m_UpConfidOutFlag.get() = 0;
  };
  virtual ~UpSecurity(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : UpIntegr UpConfid
    h->add_property("upIntegr", &this->m_UpIntegr, m_UpIntegrFlag);
    h->add_property("upConfid", &this->m_UpConfid, m_UpConfidFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const UpSecurity &obj) {

    o << "UpIntegr : " << obj.m_UpIntegr << std::endl;

    o << "UpConfid : " << obj.m_UpConfid << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UpSecurity members vars : UpIntegr UpConfid

  UpIntegrity getUpIntegr() const { return m_UpIntegr; }
  void setUpIntegr(UpIntegrity const &value) { m_UpIntegr = value; }

  UpConfidentiality getUpConfid() const { return m_UpConfid; }
  void setUpConfid(UpConfidentiality const &value) { m_UpConfid = value; }

public:
  UpIntegrity m_UpIntegr;

  unsigned m_UpIntegrFlag;
  shared_ptr<unsigned> m_UpIntegrOutFlag;
  UpConfidentiality m_UpConfid;

  unsigned m_UpConfidFlag;
  shared_ptr<unsigned> m_UpConfidOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UpSecurity_H_ */
