/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ValidTimePeriod.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ValidTimePeriod::ValidTimePeriod()
{
    m_StartTime = utility::datetime();
    m_StartTimeIsSet = false;
    m_EndTime = utility::datetime();
    m_EndTimeIsSet = false;
}

ValidTimePeriod::~ValidTimePeriod()
{
}

void ValidTimePeriod::validate()
{
    // TODO: implement validation
}

web::json::value ValidTimePeriod::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StartTimeIsSet)
    {
        val[utility::conversions::to_string_t("startTime")] = ModelBase::toJson(m_StartTime);
    }
    if(m_EndTimeIsSet)
    {
        val[utility::conversions::to_string_t("endTime")] = ModelBase::toJson(m_EndTime);
    }

    return val;
}

bool ValidTimePeriod::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("startTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_startTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_startTime);
            setStartTime(refVal_startTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_endTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_endTime);
            setEndTime(refVal_endTime);
        }
    }
    return ok;
}

void ValidTimePeriod::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StartTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startTime"), m_StartTime));
    }
    if(m_EndTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endTime"), m_EndTime));
    }
}

bool ValidTimePeriod::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("startTime")))
    {
        utility::datetime refVal_startTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startTime")), refVal_startTime );
        setStartTime(refVal_startTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endTime")))
    {
        utility::datetime refVal_endTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endTime")), refVal_endTime );
        setEndTime(refVal_endTime);
    }
    return ok;
}

utility::datetime ValidTimePeriod::getStartTime() const
{
    return m_StartTime;
}

void ValidTimePeriod::setStartTime(const utility::datetime& value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}

bool ValidTimePeriod::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}

void ValidTimePeriod::unsetStartTime()
{
    m_StartTimeIsSet = false;
}
utility::datetime ValidTimePeriod::getEndTime() const
{
    return m_EndTime;
}

void ValidTimePeriod::setEndTime(const utility::datetime& value)
{
    m_EndTime = value;
    m_EndTimeIsSet = true;
}

bool ValidTimePeriod::endTimeIsSet() const
{
    return m_EndTimeIsSet;
}

void ValidTimePeriod::unsetEndTime()
{
    m_EndTimeIsSet = false;
}
}
}
}
}


