/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SubscribedDefaultQos.h
 *
 * 
 */

#ifndef SubscribedDefaultQos_H_
#define SubscribedDefaultQos_H_


#include "Arp.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SubscribedDefaultQos: public jsonParser::jsonParser<SubscribedDefaultQos>
{
public:
    explicit SubscribedDefaultQos(){
        // constructor
        m_r_5qi = 0;
        
            m_r_5qiFlag = staticjson::Flags::Default;

            m_ArpFlag = staticjson::Flags::Default;
m_PriorityLevel = 0;
        
            m_PriorityLevelFlag = (staticjson::Flags::Optional);
    };
    virtual ~SubscribedDefaultQos(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : r_5qi Arp PriorityLevel 
        h->add_property("r5qi", &this->m_r_5qi, m_r_5qiFlag);
        h->add_property("arp", &this->m_Arp, m_ArpFlag);
        h->add_property("priorityLevel", &this->m_PriorityLevel, m_PriorityLevelFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SubscribedDefaultQos& obj)
    {
        
        o << "r_5qi : " << obj.m_r_5qi << std::endl;

        o << "Arp : " << obj.m_Arp << std::endl;

        o << "PriorityLevel : " << obj.m_PriorityLevel << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// SubscribedDefaultQos members vars : r_5qi Arp PriorityLevel 

    int32_t  getR5qi() const
    {
        return m_r_5qi;
    }
    void  setR5qi(int32_t const value)
    {
        m_r_5qi = value;
    }

Arp  getArp() const
    {
        return m_Arp;
    }
    void  setArp(Arp const& value)
    {
        m_Arp = value;
    }

int32_t  getPriorityLevel() const
    {
        return m_PriorityLevel;
    }
    void  setPriorityLevel(int32_t const value)
    {
        m_PriorityLevel = value;
    }



    
public:
    int32_t m_r_5qi;
    
    unsigned m_r_5qiFlag;
    Arp m_Arp;
    
    unsigned m_ArpFlag;
    int32_t m_PriorityLevel;
    
    unsigned m_PriorityLevelFlag;
  
};
}
}
}
}

#endif /* SubscribedDefaultQos_H_ */
