/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LoggingDurationMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LoggingDurationMdt::LoggingDurationMdt()
{
}

LoggingDurationMdt::~LoggingDurationMdt()
{
}

void LoggingDurationMdt::validate()
{
    // TODO: implement validation
}

web::json::value LoggingDurationMdt::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__600) val = web::json::value::string(U(600));
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__1200) val = web::json::value::string(U(1200));
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__2400) val = web::json::value::string(U(2400));
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__3600) val = web::json::value::string(U(3600));
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__5400) val = web::json::value::string(U(5400));
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__7200) val = web::json::value::string(U(7200));

    return val;
}

bool LoggingDurationMdt::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(600)) m_value = eLoggingDurationMdt::LoggingDurationMdt__600;
    if (s == utility::conversions::to_string_t(1200)) m_value = eLoggingDurationMdt::LoggingDurationMdt__1200;
    if (s == utility::conversions::to_string_t(2400)) m_value = eLoggingDurationMdt::LoggingDurationMdt__2400;
    if (s == utility::conversions::to_string_t(3600)) m_value = eLoggingDurationMdt::LoggingDurationMdt__3600;
    if (s == utility::conversions::to_string_t(5400)) m_value = eLoggingDurationMdt::LoggingDurationMdt__5400;
    if (s == utility::conversions::to_string_t(7200)) m_value = eLoggingDurationMdt::LoggingDurationMdt__7200;
    return true;
}

void LoggingDurationMdt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__600) s = utility::conversions::to_string_t(600);
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__1200) s = utility::conversions::to_string_t(1200);
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__2400) s = utility::conversions::to_string_t(2400);
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__3600) s = utility::conversions::to_string_t(3600);
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__5400) s = utility::conversions::to_string_t(5400);
    if (m_value == eLoggingDurationMdt::LoggingDurationMdt__7200) s = utility::conversions::to_string_t(7200);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool LoggingDurationMdt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eLoggingDurationMdt v;

        
        if (s == utility::conversions::to_string_t(600)) v = eLoggingDurationMdt::LoggingDurationMdt__600;
        if (s == utility::conversions::to_string_t(1200)) v = eLoggingDurationMdt::LoggingDurationMdt__1200;
        if (s == utility::conversions::to_string_t(2400)) v = eLoggingDurationMdt::LoggingDurationMdt__2400;
        if (s == utility::conversions::to_string_t(3600)) v = eLoggingDurationMdt::LoggingDurationMdt__3600;
        if (s == utility::conversions::to_string_t(5400)) v = eLoggingDurationMdt::LoggingDurationMdt__5400;
        if (s == utility::conversions::to_string_t(7200)) v = eLoggingDurationMdt::LoggingDurationMdt__7200;

        setValue(v);
    }
    return ok;
}

LoggingDurationMdt::eLoggingDurationMdt LoggingDurationMdt::getValue() const
{
   return m_value;
}

void LoggingDurationMdt::setValue(LoggingDurationMdt::eLoggingDurationMdt const value)
{
   m_value = value;
}


}
}
}
}


