/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RatType.h"
#include <stdexcept>
#include <sstream>

namespace org {
namespace openapitools {
namespace server {
namespace model {

RatType::RatType()
{
    
}

RatType::~RatType()
{
}

void RatType::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RatType& o)
{
    j = nlohmann::json();
    
    switch (o.getValue())
    {
        case RatType::eRatType::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case RatType::eRatType::NR:
            j = "NR";
            break;
        case RatType::eRatType::EUTRA:
            j = "EUTRA";
            break;
        case RatType::eRatType::WLAN:
            j = "WLAN";
            break;
        case RatType::eRatType::VIRTUAL:
            j = "VIRTUAL";
            break;
        case RatType::eRatType::NBIOT:
            j = "NBIOT";
            break;
        case RatType::eRatType::WIRELINE:
            j = "WIRELINE";
            break;
        case RatType::eRatType::WIRELINE_CABLE:
            j = "WIRELINE_CABLE";
            break;
        case RatType::eRatType::WIRELINE_BBF:
            j = "WIRELINE_BBF";
            break;
        case RatType::eRatType::LTE_M:
            j = "LTE-M";
            break;
        case RatType::eRatType::NR_U:
            j = "NR_U";
            break;
        case RatType::eRatType::EUTRA_U:
            j = "EUTRA_U";
            break;
        case RatType::eRatType::TRUSTED_N3GA:
            j = "TRUSTED_N3GA";
            break;
        case RatType::eRatType::TRUSTED_WLAN:
            j = "TRUSTED_WLAN";
            break;
        case RatType::eRatType::UTRA:
            j = "UTRA";
            break;
        case RatType::eRatType::GERA:
            j = "GERA";
            break;
    }
}

void from_json(const nlohmann::json& j, RatType& o)
{
    
    auto s = j.get<std::string>();
    if (s == "NR") {
     o.setValue(RatType::eRatType::NR);
    } 
    else if (s == "EUTRA") {
     o.setValue(RatType::eRatType::EUTRA);
    } 
    else if (s == "WLAN") {
     o.setValue(RatType::eRatType::WLAN);
    } 
    else if (s == "VIRTUAL") {
     o.setValue(RatType::eRatType::VIRTUAL);
    } 
    else if (s == "NBIOT") {
     o.setValue(RatType::eRatType::NBIOT);
    } 
    else if (s == "WIRELINE") {
     o.setValue(RatType::eRatType::WIRELINE);
    } 
    else if (s == "WIRELINE_CABLE") {
     o.setValue(RatType::eRatType::WIRELINE_CABLE);
    } 
    else if (s == "WIRELINE_BBF") {
     o.setValue(RatType::eRatType::WIRELINE_BBF);
    } 
    else if (s == "LTE-M") {
     o.setValue(RatType::eRatType::LTE_M);
    } 
    else if (s == "NR_U") {
     o.setValue(RatType::eRatType::NR_U);
    } 
    else if (s == "EUTRA_U") {
     o.setValue(RatType::eRatType::EUTRA_U);
    } 
    else if (s == "TRUSTED_N3GA") {
     o.setValue(RatType::eRatType::TRUSTED_N3GA);
    } 
    else if (s == "TRUSTED_WLAN") {
     o.setValue(RatType::eRatType::TRUSTED_WLAN);
    } 
    else if (s == "UTRA") {
     o.setValue(RatType::eRatType::UTRA);
    } 
    else if (s == "GERA") {
     o.setValue(RatType::eRatType::GERA);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " RatType::eRatType";
     throw std::invalid_argument(ss.str());
    } 

}

RatType::eRatType RatType::getValue() const
{
    return m_value;
}
void RatType::setValue(RatType::eRatType value)
{
    m_value = value;
}

}
}
}
}

