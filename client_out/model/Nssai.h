/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Nssai.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Nssai_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Nssai_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "Snssai.h"
#include <vector>
#include "AdditionalSnssaiData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Nssai
    : public ModelBase
{
public:
    Nssai();
    virtual ~Nssai();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Nssai members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupportedFeatures() const;
    bool supportedFeaturesIsSet() const;
    void unsetSupportedFeatures();

    void setSupportedFeatures(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Snssai>>& getDefaultSingleNssais();
    bool defaultSingleNssaisIsSet() const;
    void unsetDefaultSingleNssais();

    void setDefaultSingleNssais(const std::vector<std::shared_ptr<Snssai>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Snssai>>& getSingleNssais();
    bool singleNssaisIsSet() const;
    void unsetSingleNssais();

    void setSingleNssais(const std::vector<std::shared_ptr<Snssai>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getProvisioningTime() const;
    bool provisioningTimeIsSet() const;
    void unsetProvisioningTime();

    void setProvisioningTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AdditionalSnssaiData>>& getAdditionalSnssaiData();
    bool additionalSnssaiDataIsSet() const;
    void unsetAdditionalSnssaiData();

    void setAdditionalSnssaiData(const std::map<utility::string_t, std::shared_ptr<AdditionalSnssaiData>>& value);


protected:
    utility::string_t m_SupportedFeatures;
    bool m_SupportedFeaturesIsSet;
    std::vector<std::shared_ptr<Snssai>> m_DefaultSingleNssais;
    bool m_DefaultSingleNssaisIsSet;
    std::vector<std::shared_ptr<Snssai>> m_SingleNssais;
    bool m_SingleNssaisIsSet;
    utility::datetime m_ProvisioningTime;
    bool m_ProvisioningTimeIsSet;
    std::map<utility::string_t, std::shared_ptr<AdditionalSnssaiData>> m_AdditionalSnssaiData;
    bool m_AdditionalSnssaiDataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Nssai_H_ */
