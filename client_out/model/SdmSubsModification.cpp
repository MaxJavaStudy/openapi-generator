/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SdmSubsModification.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SdmSubsModification::SdmSubsModification()
{
    m_Expires = utility::datetime();
    m_ExpiresIsSet = false;
    m_MonitoredResourceUrisIsSet = false;
}

SdmSubsModification::~SdmSubsModification()
{
}

void SdmSubsModification::validate()
{
    // TODO: implement validation
}

web::json::value SdmSubsModification::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ExpiresIsSet)
    {
        val[utility::conversions::to_string_t("expires")] = ModelBase::toJson(m_Expires);
    }
    if(m_MonitoredResourceUrisIsSet)
    {
        val[utility::conversions::to_string_t("monitoredResourceUris")] = ModelBase::toJson(m_MonitoredResourceUris);
    }

    return val;
}

bool SdmSubsModification::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("expires")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expires"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expires;
            ok &= ModelBase::fromJson(fieldValue, refVal_expires);
            setExpires(refVal_expires);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("monitoredResourceUris")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("monitoredResourceUris"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_monitoredResourceUris;
            ok &= ModelBase::fromJson(fieldValue, refVal_monitoredResourceUris);
            setMonitoredResourceUris(refVal_monitoredResourceUris);
        }
    }
    return ok;
}

void SdmSubsModification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ExpiresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expires"), m_Expires));
    }
    if(m_MonitoredResourceUrisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("monitoredResourceUris"), m_MonitoredResourceUris));
    }
}

bool SdmSubsModification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("expires")))
    {
        utility::datetime refVal_expires;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expires")), refVal_expires );
        setExpires(refVal_expires);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("monitoredResourceUris")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_monitoredResourceUris;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("monitoredResourceUris")), refVal_monitoredResourceUris );
        setMonitoredResourceUris(refVal_monitoredResourceUris);
    }
    return ok;
}

utility::datetime SdmSubsModification::getExpires() const
{
    return m_Expires;
}

void SdmSubsModification::setExpires(const utility::datetime& value)
{
    m_Expires = value;
    m_ExpiresIsSet = true;
}

bool SdmSubsModification::expiresIsSet() const
{
    return m_ExpiresIsSet;
}

void SdmSubsModification::unsetExpires()
{
    m_ExpiresIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& SdmSubsModification::getMonitoredResourceUris()
{
    return m_MonitoredResourceUris;
}

void SdmSubsModification::setMonitoredResourceUris(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_MonitoredResourceUris = value;
    m_MonitoredResourceUrisIsSet = true;
}

bool SdmSubsModification::monitoredResourceUrisIsSet() const
{
    return m_MonitoredResourceUrisIsSet;
}

void SdmSubsModification::unsetMonitoredResourceUris()
{
    m_MonitoredResourceUrisIsSet = false;
}
}
}
}
}


