/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * GNbId.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef GNbId_H_
#define GNbId_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class GNbId : public jsonParser::jsonParser<GNbId> {
public:
  explicit GNbId() {
    // constructor
    m_BitLength = 0;

    m_BitLengthFlag = staticjson::Flags::Default;
    m_BitLengthOutFlag.reset(new unsigned);
    *m_BitLengthOutFlag.get() = 0;
    m_GNBValue = "";

    m_GNBValueFlag = staticjson::Flags::Default;
    m_GNBValueOutFlag.reset(new unsigned);
    *m_GNBValueOutFlag.get() = 0;
  };
  virtual ~GNbId(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : BitLength GNBValue
    h->add_property("bitLength", &this->m_BitLength, m_BitLengthFlag);
    h->add_property("gNBValue", &this->m_GNBValue, m_GNBValueFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const GNbId &obj) {

    o << "BitLength : " << obj.m_BitLength << std::endl;

    o << "GNBValue : " << obj.m_GNBValue << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// GNbId members vars : BitLength GNBValue

  int32_t getBitLength() const { return m_BitLength; }
  void setBitLength(int32_t const value) { m_BitLength = value; }

  std::string getGNBValue() const { return m_GNBValue; }
  void setGNBValue(std::string const &value) { m_GNBValue = value; }

public:
  int32_t m_BitLength;

  unsigned m_BitLengthFlag;
  shared_ptr<unsigned> m_BitLengthOutFlag;
  std::string m_GNBValue;

  unsigned m_GNBValueFlag;
  shared_ptr<unsigned> m_GNBValueOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* GNbId_H_ */
