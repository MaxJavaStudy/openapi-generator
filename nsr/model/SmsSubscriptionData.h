/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmsSubscriptionData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SmsSubscriptionData_H_
#define SmsSubscriptionData_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SmsSubscriptionData : public jsonParser::jsonParser<SmsSubscriptionData> {
public:
  explicit SmsSubscriptionData() {
    // constructor
    m_SmsSubscribed = false;

    m_SmsSubscribedFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SmsSubscribedOutFlag.reset(new unsigned);
    *m_SmsSubscribedOutFlag.get() = 0;
    m_SharedSmsSubsDataId = "";

    m_SharedSmsSubsDataIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedSmsSubsDataIdOutFlag.reset(new unsigned);
    *m_SharedSmsSubsDataIdOutFlag.get() = 0;
  };
  virtual ~SmsSubscriptionData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SmsSubscribed SharedSmsSubsDataId
    h->add_optional_property("smsSubscribed", &this->m_SmsSubscribed,
                             m_SmsSubscribedFlag, m_SmsSubscribedOutFlag);
    h->add_optional_property(
        "sharedSmsSubsDataId", &this->m_SharedSmsSubsDataId,
        m_SharedSmsSubsDataIdFlag, m_SharedSmsSubsDataIdOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const SmsSubscriptionData &obj) {

    o << "SmsSubscribed, optional flag is : " << *m_SmsSubscribedOutFlag
      << ", content is : " << obj.m_SmsSubscribed << std::endl;

    o << "SharedSmsSubsDataId, optional flag is : "
      << *m_SharedSmsSubsDataIdOutFlag
      << ", content is : " << obj.m_SharedSmsSubsDataId << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SmsSubscriptionData members vars : SmsSubscribed SharedSmsSubsDataId

  bool isSmsSubscribed() const { return m_SmsSubscribed; }
  void setSmsSubscribed(bool const value) { m_SmsSubscribed = value; }

  std::string getSharedSmsSubsDataId() const { return m_SharedSmsSubsDataId; }
  void setSharedSmsSubsDataId(std::string const &value) {
    m_SharedSmsSubsDataId = value;
  }

public:
  bool m_SmsSubscribed;

  unsigned m_SmsSubscribedFlag;
  shared_ptr<unsigned> m_SmsSubscribedOutFlag;
  std::string m_SharedSmsSubsDataId;

  unsigned m_SharedSmsSubsDataIdFlag;
  shared_ptr<unsigned> m_SharedSmsSubsDataIdOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmsSubscriptionData_H_ */
