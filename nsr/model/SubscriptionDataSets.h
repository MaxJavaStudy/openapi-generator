/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SubscriptionDataSets.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SubscriptionDataSets_H_
#define SubscriptionDataSets_H_

#include "AccessAndMobilitySubscriptionData.h"
#include "CSB_JsonParser.h"
#include "LcsBroadcastAssistanceTypesData.h"
#include "LcsMoData.h"
#include "LcsPrivacyData.h"
#include "SessionManagementSubscriptionData.h"
#include "SmfSelectionSubscriptionData.h"
#include "SmsManagementSubscriptionData.h"
#include "SmsSubscriptionData.h"
#include "TraceData.h"
#include "UeContextInAmfData.h"
#include "UeContextInSmfData.h"
#include "UeContextInSmsfData.h"
#include "V2xSubscriptionData.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SubscriptionDataSets
    : public jsonParser::jsonParser<SubscriptionDataSets> {
public:
  explicit SubscriptionDataSets() {
    // constructor

    m_AmDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AmDataOutFlag.reset(new unsigned);
    *m_AmDataOutFlag.get() = 0;

    m_SmfSelDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SmfSelDataOutFlag.reset(new unsigned);
    *m_SmfSelDataOutFlag.get() = 0;

    m_UecAmfDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UecAmfDataOutFlag.reset(new unsigned);
    *m_UecAmfDataOutFlag.get() = 0;

    m_UecSmfDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UecSmfDataOutFlag.reset(new unsigned);
    *m_UecSmfDataOutFlag.get() = 0;

    m_UecSmsfDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UecSmsfDataOutFlag.reset(new unsigned);
    *m_UecSmsfDataOutFlag.get() = 0;

    m_SmsSubsDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SmsSubsDataOutFlag.reset(new unsigned);
    *m_SmsSubsDataOutFlag.get() = 0;

    m_SmDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SmDataOutFlag.reset(new unsigned);
    *m_SmDataOutFlag.get() = 0;

    m_TraceDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_TraceDataOutFlag.reset(new unsigned);
    *m_TraceDataOutFlag.get() = 0;

    m_SmsMngDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SmsMngDataOutFlag.reset(new unsigned);
    *m_SmsMngDataOutFlag.get() = 0;

    m_LcsPrivacyDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LcsPrivacyDataOutFlag.reset(new unsigned);
    *m_LcsPrivacyDataOutFlag.get() = 0;

    m_LcsMoDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LcsMoDataOutFlag.reset(new unsigned);
    *m_LcsMoDataOutFlag.get() = 0;

    m_V2xDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_V2xDataOutFlag.reset(new unsigned);
    *m_V2xDataOutFlag.get() = 0;

    m_LcsBroadcastAssistanceTypesDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LcsBroadcastAssistanceTypesDataOutFlag.reset(new unsigned);
    *m_LcsBroadcastAssistanceTypesDataOutFlag.get() = 0;
  };
  virtual ~SubscriptionDataSets(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : AmData SmfSelData UecAmfData
    // UecSmfData UecSmsfData SmsSubsData SmData TraceData SmsMngData
    // LcsPrivacyData LcsMoData V2xData LcsBroadcastAssistanceTypesData
    h->add_optional_property("amData", &this->m_AmData, m_AmDataFlag,
                             m_AmDataOutFlag);
    h->add_optional_property("smfSelData", &this->m_SmfSelData,
                             m_SmfSelDataFlag, m_SmfSelDataOutFlag);
    h->add_optional_property("uecAmfData", &this->m_UecAmfData,
                             m_UecAmfDataFlag, m_UecAmfDataOutFlag);
    h->add_optional_property("uecSmfData", &this->m_UecSmfData,
                             m_UecSmfDataFlag, m_UecSmfDataOutFlag);
    h->add_optional_property("uecSmsfData", &this->m_UecSmsfData,
                             m_UecSmsfDataFlag, m_UecSmsfDataOutFlag);
    h->add_optional_property("smsSubsData", &this->m_SmsSubsData,
                             m_SmsSubsDataFlag, m_SmsSubsDataOutFlag);
    h->add_optional_property("smData", &this->m_SmData, m_SmDataFlag,
                             m_SmDataOutFlag);
    h->add_optional_property("traceData", &this->m_TraceData, m_TraceDataFlag,
                             m_TraceDataOutFlag);
    h->add_optional_property("smsMngData", &this->m_SmsMngData,
                             m_SmsMngDataFlag, m_SmsMngDataOutFlag);
    h->add_optional_property("lcsPrivacyData", &this->m_LcsPrivacyData,
                             m_LcsPrivacyDataFlag, m_LcsPrivacyDataOutFlag);
    h->add_optional_property("lcsMoData", &this->m_LcsMoData, m_LcsMoDataFlag,
                             m_LcsMoDataOutFlag);
    h->add_optional_property("v2xData", &this->m_V2xData, m_V2xDataFlag,
                             m_V2xDataOutFlag);
    h->add_optional_property("lcsBroadcastAssistanceTypesData",
                             &this->m_LcsBroadcastAssistanceTypesData,
                             m_LcsBroadcastAssistanceTypesDataFlag,
                             m_LcsBroadcastAssistanceTypesDataOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const SubscriptionDataSets &obj) {

    o << "AmData, optional flag is : " << *m_AmDataOutFlag
      << ", content is : " << obj.m_AmData << std::endl;

    o << "SmfSelData, optional flag is : " << *m_SmfSelDataOutFlag
      << ", content is : " << obj.m_SmfSelData << std::endl;

    o << "UecAmfData, optional flag is : " << *m_UecAmfDataOutFlag
      << ", content is : " << obj.m_UecAmfData << std::endl;

    o << "UecSmfData, optional flag is : " << *m_UecSmfDataOutFlag
      << ", content is : " << obj.m_UecSmfData << std::endl;

    o << "UecSmsfData, optional flag is : " << *m_UecSmsfDataOutFlag
      << ", content is : " << obj.m_UecSmsfData << std::endl;

    o << "SmsSubsData, optional flag is : " << *m_SmsSubsDataOutFlag
      << ", content is : " << obj.m_SmsSubsData << std::endl;
    o << "SmData, optional flag is : " << *m_SmDataOutFlag << std::endl;
    o << convert2string(std::string("SmData"), obj.m_SmData) << std::endl;

    o << "TraceData, optional flag is : " << *m_TraceDataOutFlag
      << ", content is : " << obj.m_TraceData << std::endl;

    o << "SmsMngData, optional flag is : " << *m_SmsMngDataOutFlag
      << ", content is : " << obj.m_SmsMngData << std::endl;

    o << "LcsPrivacyData, optional flag is : " << *m_LcsPrivacyDataOutFlag
      << ", content is : " << obj.m_LcsPrivacyData << std::endl;

    o << "LcsMoData, optional flag is : " << *m_LcsMoDataOutFlag
      << ", content is : " << obj.m_LcsMoData << std::endl;

    o << "V2xData, optional flag is : " << *m_V2xDataOutFlag
      << ", content is : " << obj.m_V2xData << std::endl;

    o << "LcsBroadcastAssistanceTypesData, optional flag is : "
      << *m_LcsBroadcastAssistanceTypesDataOutFlag
      << ", content is : " << obj.m_LcsBroadcastAssistanceTypesData
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SubscriptionDataSets members vars : AmData SmfSelData UecAmfData
  /// UecSmfData UecSmsfData SmsSubsData SmData TraceData SmsMngData
  /// LcsPrivacyData LcsMoData V2xData LcsBroadcastAssistanceTypesData

  AccessAndMobilitySubscriptionData getAmData() const { return m_AmData; }
  void setAmData(AccessAndMobilitySubscriptionData const &value) {
    m_AmData = value;
  }

  SmfSelectionSubscriptionData getSmfSelData() const { return m_SmfSelData; }
  void setSmfSelData(SmfSelectionSubscriptionData const &value) {
    m_SmfSelData = value;
  }

  UeContextInAmfData getUecAmfData() const { return m_UecAmfData; }
  void setUecAmfData(UeContextInAmfData const &value) { m_UecAmfData = value; }

  UeContextInSmfData getUecSmfData() const { return m_UecSmfData; }
  void setUecSmfData(UeContextInSmfData const &value) { m_UecSmfData = value; }

  UeContextInSmsfData getUecSmsfData() const { return m_UecSmsfData; }
  void setUecSmsfData(UeContextInSmsfData const &value) {
    m_UecSmsfData = value;
  }

  SmsSubscriptionData getSmsSubsData() const { return m_SmsSubsData; }
  void setSmsSubsData(SmsSubscriptionData const &value) {
    m_SmsSubsData = value;
  }

  std::vector<SessionManagementSubscriptionData> &getSmData() {
    return m_SmData;
  }
  void setSmData(std::vector<SessionManagementSubscriptionData> const &value) {
    m_SmData = value;
  }

  TraceData getTraceData() const { return m_TraceData; }
  void setTraceData(TraceData const &value) { m_TraceData = value; }

  SmsManagementSubscriptionData getSmsMngData() const { return m_SmsMngData; }
  void setSmsMngData(SmsManagementSubscriptionData const &value) {
    m_SmsMngData = value;
  }

  LcsPrivacyData getLcsPrivacyData() const { return m_LcsPrivacyData; }
  void setLcsPrivacyData(LcsPrivacyData const &value) {
    m_LcsPrivacyData = value;
  }

  LcsMoData getLcsMoData() const { return m_LcsMoData; }
  void setLcsMoData(LcsMoData const &value) { m_LcsMoData = value; }

  V2xSubscriptionData getV2xData() const { return m_V2xData; }
  void setV2xData(V2xSubscriptionData const &value) { m_V2xData = value; }

  LcsBroadcastAssistanceTypesData getLcsBroadcastAssistanceTypesData() const {
    return m_LcsBroadcastAssistanceTypesData;
  }
  void setLcsBroadcastAssistanceTypesData(
      LcsBroadcastAssistanceTypesData const &value) {
    m_LcsBroadcastAssistanceTypesData = value;
  }

public:
  AccessAndMobilitySubscriptionData m_AmData;

  unsigned m_AmDataFlag;
  shared_ptr<unsigned> m_AmDataOutFlag;
  SmfSelectionSubscriptionData m_SmfSelData;

  unsigned m_SmfSelDataFlag;
  shared_ptr<unsigned> m_SmfSelDataOutFlag;
  UeContextInAmfData m_UecAmfData;

  unsigned m_UecAmfDataFlag;
  shared_ptr<unsigned> m_UecAmfDataOutFlag;
  UeContextInSmfData m_UecSmfData;

  unsigned m_UecSmfDataFlag;
  shared_ptr<unsigned> m_UecSmfDataOutFlag;
  UeContextInSmsfData m_UecSmsfData;

  unsigned m_UecSmsfDataFlag;
  shared_ptr<unsigned> m_UecSmsfDataOutFlag;
  SmsSubscriptionData m_SmsSubsData;

  unsigned m_SmsSubsDataFlag;
  shared_ptr<unsigned> m_SmsSubsDataOutFlag;
  std::vector<SessionManagementSubscriptionData> m_SmData;

  unsigned m_SmDataFlag;
  shared_ptr<unsigned> m_SmDataOutFlag;
  TraceData m_TraceData;

  unsigned m_TraceDataFlag;
  shared_ptr<unsigned> m_TraceDataOutFlag;
  SmsManagementSubscriptionData m_SmsMngData;

  unsigned m_SmsMngDataFlag;
  shared_ptr<unsigned> m_SmsMngDataOutFlag;
  LcsPrivacyData m_LcsPrivacyData;

  unsigned m_LcsPrivacyDataFlag;
  shared_ptr<unsigned> m_LcsPrivacyDataOutFlag;
  LcsMoData m_LcsMoData;

  unsigned m_LcsMoDataFlag;
  shared_ptr<unsigned> m_LcsMoDataOutFlag;
  V2xSubscriptionData m_V2xData;

  unsigned m_V2xDataFlag;
  shared_ptr<unsigned> m_V2xDataOutFlag;
  LcsBroadcastAssistanceTypesData m_LcsBroadcastAssistanceTypesData;

  unsigned m_LcsBroadcastAssistanceTypesDataFlag;
  shared_ptr<unsigned> m_LcsBroadcastAssistanceTypesDataOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SubscriptionDataSets_H_ */
