/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmfSelectionSubscriptionData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SmfSelectionSubscriptionData::SmfSelectionSubscriptionData()
{
    m_SupportedFeatures = utility::conversions::to_string_t("");
    m_SupportedFeaturesIsSet = false;
    m_SubscribedSnssaiInfosIsSet = false;
    m_SharedSnssaiInfosId = utility::conversions::to_string_t("");
    m_SharedSnssaiInfosIdIsSet = false;
}

SmfSelectionSubscriptionData::~SmfSelectionSubscriptionData()
{
}

void SmfSelectionSubscriptionData::validate()
{
    // TODO: implement validation
}

web::json::value SmfSelectionSubscriptionData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupportedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("supportedFeatures")] = ModelBase::toJson(m_SupportedFeatures);
    }
    if(m_SubscribedSnssaiInfosIsSet)
    {
        val[utility::conversions::to_string_t("subscribedSnssaiInfos")] = ModelBase::toJson(m_SubscribedSnssaiInfos);
    }
    if(m_SharedSnssaiInfosIdIsSet)
    {
        val[utility::conversions::to_string_t("sharedSnssaiInfosId")] = ModelBase::toJson(m_SharedSnssaiInfosId);
    }

    return val;
}

bool SmfSelectionSubscriptionData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("supportedFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supportedFeatures"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedFeatures);
            setSupportedFeatures(refVal_supportedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscribedSnssaiInfos")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscribedSnssaiInfos"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<SnssaiInfo>> refVal_subscribedSnssaiInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscribedSnssaiInfos);
            setSubscribedSnssaiInfos(refVal_subscribedSnssaiInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedSnssaiInfosId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedSnssaiInfosId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sharedSnssaiInfosId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedSnssaiInfosId);
            setSharedSnssaiInfosId(refVal_sharedSnssaiInfosId);
        }
    }
    return ok;
}

void SmfSelectionSubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SupportedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportedFeatures"), m_SupportedFeatures));
    }
    if(m_SubscribedSnssaiInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscribedSnssaiInfos"), m_SubscribedSnssaiInfos));
    }
    if(m_SharedSnssaiInfosIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedSnssaiInfosId"), m_SharedSnssaiInfosId));
    }
}

bool SmfSelectionSubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("supportedFeatures")))
    {
        utility::string_t refVal_supportedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportedFeatures")), refVal_supportedFeatures );
        setSupportedFeatures(refVal_supportedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscribedSnssaiInfos")))
    {
        std::map<utility::string_t, std::shared_ptr<SnssaiInfo>> refVal_subscribedSnssaiInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscribedSnssaiInfos")), refVal_subscribedSnssaiInfos );
        setSubscribedSnssaiInfos(refVal_subscribedSnssaiInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedSnssaiInfosId")))
    {
        utility::string_t refVal_sharedSnssaiInfosId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedSnssaiInfosId")), refVal_sharedSnssaiInfosId );
        setSharedSnssaiInfosId(refVal_sharedSnssaiInfosId);
    }
    return ok;
}

utility::string_t SmfSelectionSubscriptionData::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void SmfSelectionSubscriptionData::setSupportedFeatures(const utility::string_t& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}

bool SmfSelectionSubscriptionData::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}

void SmfSelectionSubscriptionData::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<SnssaiInfo>>& SmfSelectionSubscriptionData::getSubscribedSnssaiInfos()
{
    return m_SubscribedSnssaiInfos;
}

void SmfSelectionSubscriptionData::setSubscribedSnssaiInfos(const std::map<utility::string_t, std::shared_ptr<SnssaiInfo>>& value)
{
    m_SubscribedSnssaiInfos = value;
    m_SubscribedSnssaiInfosIsSet = true;
}

bool SmfSelectionSubscriptionData::subscribedSnssaiInfosIsSet() const
{
    return m_SubscribedSnssaiInfosIsSet;
}

void SmfSelectionSubscriptionData::unsetSubscribedSnssaiInfos()
{
    m_SubscribedSnssaiInfosIsSet = false;
}
utility::string_t SmfSelectionSubscriptionData::getSharedSnssaiInfosId() const
{
    return m_SharedSnssaiInfosId;
}

void SmfSelectionSubscriptionData::setSharedSnssaiInfosId(const utility::string_t& value)
{
    m_SharedSnssaiInfosId = value;
    m_SharedSnssaiInfosIdIsSet = true;
}

bool SmfSelectionSubscriptionData::sharedSnssaiInfosIdIsSet() const
{
    return m_SharedSnssaiInfosIdIsSet;
}

void SmfSelectionSubscriptionData::unsetSharedSnssaiInfosId()
{
    m_SharedSnssaiInfosIdIsSet = false;
}
}
}
}
}


