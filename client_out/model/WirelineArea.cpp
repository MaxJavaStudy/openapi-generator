/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WirelineArea.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




WirelineArea::WirelineArea()
{
    m_GlobalLineIdsIsSet = false;
    m_HfcNIdsIsSet = false;
    m_AreaCodeB = utility::conversions::to_string_t("");
    m_AreaCodeBIsSet = false;
    m_AreaCodeC = utility::conversions::to_string_t("");
    m_AreaCodeCIsSet = false;
}

WirelineArea::~WirelineArea()
{
}

void WirelineArea::validate()
{
    // TODO: implement validation
}

web::json::value WirelineArea::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GlobalLineIdsIsSet)
    {
        val[utility::conversions::to_string_t("globalLineIds")] = ModelBase::toJson(m_GlobalLineIds);
    }
    if(m_HfcNIdsIsSet)
    {
        val[utility::conversions::to_string_t("hfcNIds")] = ModelBase::toJson(m_HfcNIds);
    }
    if(m_AreaCodeBIsSet)
    {
        val[utility::conversions::to_string_t("areaCodeB")] = ModelBase::toJson(m_AreaCodeB);
    }
    if(m_AreaCodeCIsSet)
    {
        val[utility::conversions::to_string_t("areaCodeC")] = ModelBase::toJson(m_AreaCodeC);
    }

    return val;
}

bool WirelineArea::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("globalLineIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("globalLineIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_globalLineIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_globalLineIds);
            setGlobalLineIds(refVal_globalLineIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hfcNIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hfcNIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_hfcNIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_hfcNIds);
            setHfcNIds(refVal_hfcNIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("areaCodeB")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("areaCodeB"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_areaCodeB;
            ok &= ModelBase::fromJson(fieldValue, refVal_areaCodeB);
            setAreaCodeB(refVal_areaCodeB);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("areaCodeC")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("areaCodeC"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_areaCodeC;
            ok &= ModelBase::fromJson(fieldValue, refVal_areaCodeC);
            setAreaCodeC(refVal_areaCodeC);
        }
    }
    return ok;
}

void WirelineArea::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_GlobalLineIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalLineIds"), m_GlobalLineIds));
    }
    if(m_HfcNIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hfcNIds"), m_HfcNIds));
    }
    if(m_AreaCodeBIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("areaCodeB"), m_AreaCodeB));
    }
    if(m_AreaCodeCIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("areaCodeC"), m_AreaCodeC));
    }
}

bool WirelineArea::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("globalLineIds")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_globalLineIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalLineIds")), refVal_globalLineIds );
        setGlobalLineIds(refVal_globalLineIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hfcNIds")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_hfcNIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hfcNIds")), refVal_hfcNIds );
        setHfcNIds(refVal_hfcNIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("areaCodeB")))
    {
        utility::string_t refVal_areaCodeB;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("areaCodeB")), refVal_areaCodeB );
        setAreaCodeB(refVal_areaCodeB);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("areaCodeC")))
    {
        utility::string_t refVal_areaCodeC;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("areaCodeC")), refVal_areaCodeC );
        setAreaCodeC(refVal_areaCodeC);
    }
    return ok;
}

std::vector<std::shared_ptr<utility::string_t>>& WirelineArea::getGlobalLineIds()
{
    return m_GlobalLineIds;
}

void WirelineArea::setGlobalLineIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_GlobalLineIds = value;
    m_GlobalLineIdsIsSet = true;
}

bool WirelineArea::globalLineIdsIsSet() const
{
    return m_GlobalLineIdsIsSet;
}

void WirelineArea::unsetGlobalLineIds()
{
    m_GlobalLineIdsIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& WirelineArea::getHfcNIds()
{
    return m_HfcNIds;
}

void WirelineArea::setHfcNIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_HfcNIds = value;
    m_HfcNIdsIsSet = true;
}

bool WirelineArea::hfcNIdsIsSet() const
{
    return m_HfcNIdsIsSet;
}

void WirelineArea::unsetHfcNIds()
{
    m_HfcNIdsIsSet = false;
}
utility::string_t WirelineArea::getAreaCodeB() const
{
    return m_AreaCodeB;
}

void WirelineArea::setAreaCodeB(const utility::string_t& value)
{
    m_AreaCodeB = value;
    m_AreaCodeBIsSet = true;
}

bool WirelineArea::areaCodeBIsSet() const
{
    return m_AreaCodeBIsSet;
}

void WirelineArea::unsetAreaCodeB()
{
    m_AreaCodeBIsSet = false;
}
utility::string_t WirelineArea::getAreaCodeC() const
{
    return m_AreaCodeC;
}

void WirelineArea::setAreaCodeC(const utility::string_t& value)
{
    m_AreaCodeC = value;
    m_AreaCodeCIsSet = true;
}

bool WirelineArea::areaCodeCIsSet() const
{
    return m_AreaCodeCIsSet;
}

void WirelineArea::unsetAreaCodeC()
{
    m_AreaCodeCIsSet = false;
}
}
}
}
}


