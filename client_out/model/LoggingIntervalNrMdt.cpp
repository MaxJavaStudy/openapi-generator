/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LoggingIntervalNrMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LoggingIntervalNrMdt::LoggingIntervalNrMdt()
{
}

LoggingIntervalNrMdt::~LoggingIntervalNrMdt()
{
}

void LoggingIntervalNrMdt::validate()
{
    // TODO: implement validation
}

web::json::value LoggingIntervalNrMdt::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__128) val = web::json::value::string(U(128));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__256) val = web::json::value::string(U(256));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__512) val = web::json::value::string(U(512));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__1024) val = web::json::value::string(U(1024));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__2048) val = web::json::value::string(U(2048));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__3072) val = web::json::value::string(U(3072));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__4096) val = web::json::value::string(U(4096));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__6144) val = web::json::value::string(U(6144));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__320) val = web::json::value::string(U(320));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__640) val = web::json::value::string(U(640));
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt_INFINITY) val = web::json::value::string(U(infinity));

    return val;
}

bool LoggingIntervalNrMdt::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(128)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__128;
    if (s == utility::conversions::to_string_t(256)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__256;
    if (s == utility::conversions::to_string_t(512)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__512;
    if (s == utility::conversions::to_string_t(1024)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__1024;
    if (s == utility::conversions::to_string_t(2048)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__2048;
    if (s == utility::conversions::to_string_t(3072)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__3072;
    if (s == utility::conversions::to_string_t(4096)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__4096;
    if (s == utility::conversions::to_string_t(6144)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__6144;
    if (s == utility::conversions::to_string_t(320)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__320;
    if (s == utility::conversions::to_string_t(640)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__640;
    if (s == utility::conversions::to_string_t(infinity)) m_value = eLoggingIntervalNrMdt::LoggingIntervalNrMdt_INFINITY;
    return true;
}

void LoggingIntervalNrMdt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__128) s = utility::conversions::to_string_t(128);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__256) s = utility::conversions::to_string_t(256);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__512) s = utility::conversions::to_string_t(512);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__1024) s = utility::conversions::to_string_t(1024);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__2048) s = utility::conversions::to_string_t(2048);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__3072) s = utility::conversions::to_string_t(3072);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__4096) s = utility::conversions::to_string_t(4096);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__6144) s = utility::conversions::to_string_t(6144);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__320) s = utility::conversions::to_string_t(320);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt__640) s = utility::conversions::to_string_t(640);
    if (m_value == eLoggingIntervalNrMdt::LoggingIntervalNrMdt_INFINITY) s = utility::conversions::to_string_t(infinity);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool LoggingIntervalNrMdt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eLoggingIntervalNrMdt v;

        
        if (s == utility::conversions::to_string_t(128)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__128;
        if (s == utility::conversions::to_string_t(256)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__256;
        if (s == utility::conversions::to_string_t(512)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__512;
        if (s == utility::conversions::to_string_t(1024)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__1024;
        if (s == utility::conversions::to_string_t(2048)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__2048;
        if (s == utility::conversions::to_string_t(3072)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__3072;
        if (s == utility::conversions::to_string_t(4096)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__4096;
        if (s == utility::conversions::to_string_t(6144)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__6144;
        if (s == utility::conversions::to_string_t(320)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__320;
        if (s == utility::conversions::to_string_t(640)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt__640;
        if (s == utility::conversions::to_string_t(infinity)) v = eLoggingIntervalNrMdt::LoggingIntervalNrMdt_INFINITY;

        setValue(v);
    }
    return ok;
}

LoggingIntervalNrMdt::eLoggingIntervalNrMdt LoggingIntervalNrMdt::getValue() const
{
   return m_value;
}

void LoggingIntervalNrMdt::setValue(LoggingIntervalNrMdt::eLoggingIntervalNrMdt const value)
{
   m_value = value;
}


}
}
}
}


