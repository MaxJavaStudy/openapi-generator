/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MdtConfiguration.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_MdtConfiguration_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_MdtConfiguration_H_


#include "../ModelBase.h"

#include "LoggingDurationNrMdt.h"
#include "MeasurementPeriodLteMdt.h"
#include "ReportingTrigger.h"
#include "PositioningMethodMdt.h"
#include "LoggingIntervalMdt.h"
#include "LoggingIntervalNrMdt.h"
#include "PlmnId.h"
#include "CollectionPeriodRmmNrMdt.h"
#include "JobType.h"
#include <vector>
#include "ReportTypeMdt.h"
#include "SensorMeasurement.h"
#include "ReportIntervalMdt.h"
#include "CollectionPeriodRmmLteMdt.h"
#include "LoggingDurationMdt.h"
#include "MbsfnArea.h"
#include "MeasurementNrForMdt.h"
#include "InterFreqTargetInfo.h"
#include "ReportAmountMdt.h"
#include "EventForMdt.h"
#include "ReportIntervalNrMdt.h"
#include "AreaScope.h"
#include "MeasurementLteForMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  MdtConfiguration
    : public ModelBase
{
public:
    MdtConfiguration();
    virtual ~MdtConfiguration();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MdtConfiguration members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<JobType> getJobType() const;
    bool jobTypeIsSet() const;
    void unsetJobType();

    void setJobType(const std::shared_ptr<JobType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportTypeMdt> getReportType() const;
    bool reportTypeIsSet() const;
    void unsetReportType();

    void setReportType(const std::shared_ptr<ReportTypeMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AreaScope> getAreaScope() const;
    bool areaScopeIsSet() const;
    void unsetAreaScope();

    void setAreaScope(const std::shared_ptr<AreaScope>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<MeasurementLteForMdt>>& getMeasurementLteList();
    bool measurementLteListIsSet() const;
    void unsetMeasurementLteList();

    void setMeasurementLteList(const std::vector<std::shared_ptr<MeasurementLteForMdt>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<MeasurementNrForMdt>>& getMeasurementNrList();
    bool measurementNrListIsSet() const;
    void unsetMeasurementNrList();

    void setMeasurementNrList(const std::vector<std::shared_ptr<MeasurementNrForMdt>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SensorMeasurement>>& getSensorMeasurementList();
    bool sensorMeasurementListIsSet() const;
    void unsetSensorMeasurementList();

    void setSensorMeasurementList(const std::vector<std::shared_ptr<SensorMeasurement>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ReportingTrigger>>& getReportingTriggerList();
    bool reportingTriggerListIsSet() const;
    void unsetReportingTriggerList();

    void setReportingTriggerList(const std::vector<std::shared_ptr<ReportingTrigger>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportIntervalMdt> getReportInterval() const;
    bool reportIntervalIsSet() const;
    void unsetReportInterval();

    void setReportInterval(const std::shared_ptr<ReportIntervalMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportIntervalNrMdt> getReportIntervalNr() const;
    bool reportIntervalNrIsSet() const;
    void unsetReportIntervalNr();

    void setReportIntervalNr(const std::shared_ptr<ReportIntervalNrMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportAmountMdt> getReportAmount() const;
    bool reportAmountIsSet() const;
    void unsetReportAmount();

    void setReportAmount(const std::shared_ptr<ReportAmountMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEventThresholdRsrp() const;
    bool eventThresholdRsrpIsSet() const;
    void unsetEventThresholdRsrp();

    void setEventThresholdRsrp(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEventThresholdRsrpNr() const;
    bool eventThresholdRsrpNrIsSet() const;
    void unsetEventThresholdRsrpNr();

    void setEventThresholdRsrpNr(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEventThresholdRsrq() const;
    bool eventThresholdRsrqIsSet() const;
    void unsetEventThresholdRsrq();

    void setEventThresholdRsrq(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEventThresholdRsrqNr() const;
    bool eventThresholdRsrqNrIsSet() const;
    void unsetEventThresholdRsrqNr();

    void setEventThresholdRsrqNr(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<EventForMdt>>& getEventList();
    bool eventListIsSet() const;
    void unsetEventList();

    void setEventList(const std::vector<std::shared_ptr<EventForMdt>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LoggingIntervalMdt> getLoggingInterval() const;
    bool loggingIntervalIsSet() const;
    void unsetLoggingInterval();

    void setLoggingInterval(const std::shared_ptr<LoggingIntervalMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LoggingIntervalNrMdt> getLoggingIntervalNr() const;
    bool loggingIntervalNrIsSet() const;
    void unsetLoggingIntervalNr();

    void setLoggingIntervalNr(const std::shared_ptr<LoggingIntervalNrMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LoggingDurationMdt> getLoggingDuration() const;
    bool loggingDurationIsSet() const;
    void unsetLoggingDuration();

    void setLoggingDuration(const std::shared_ptr<LoggingDurationMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LoggingDurationNrMdt> getLoggingDurationNr() const;
    bool loggingDurationNrIsSet() const;
    void unsetLoggingDurationNr();

    void setLoggingDurationNr(const std::shared_ptr<LoggingDurationNrMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PositioningMethodMdt> getPositioningMethod() const;
    bool positioningMethodIsSet() const;
    void unsetPositioningMethod();

    void setPositioningMethod(const std::shared_ptr<PositioningMethodMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CollectionPeriodRmmLteMdt> getCollectionPeriodRmmLte() const;
    bool collectionPeriodRmmLteIsSet() const;
    void unsetCollectionPeriodRmmLte();

    void setCollectionPeriodRmmLte(const std::shared_ptr<CollectionPeriodRmmLteMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CollectionPeriodRmmNrMdt> getCollectionPeriodRmmNr() const;
    bool collectionPeriodRmmNrIsSet() const;
    void unsetCollectionPeriodRmmNr();

    void setCollectionPeriodRmmNr(const std::shared_ptr<CollectionPeriodRmmNrMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MeasurementPeriodLteMdt> getMeasurementPeriodLte() const;
    bool measurementPeriodLteIsSet() const;
    void unsetMeasurementPeriodLte();

    void setMeasurementPeriodLte(const std::shared_ptr<MeasurementPeriodLteMdt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PlmnId>>& getMdtAllowedPlmnIdList();
    bool mdtAllowedPlmnIdListIsSet() const;
    void unsetMdtAllowedPlmnIdList();

    void setMdtAllowedPlmnIdList(const std::vector<std::shared_ptr<PlmnId>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<MbsfnArea>>& getMbsfnAreaList();
    bool mbsfnAreaListIsSet() const;
    void unsetMbsfnAreaList();

    void setMbsfnAreaList(const std::vector<std::shared_ptr<MbsfnArea>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<InterFreqTargetInfo>>& getInterFreqTargetList();
    bool interFreqTargetListIsSet() const;
    void unsetInterFreqTargetList();

    void setInterFreqTargetList(const std::vector<std::shared_ptr<InterFreqTargetInfo>>& value);


protected:
    std::shared_ptr<JobType> m_JobType;
    bool m_JobTypeIsSet;
    std::shared_ptr<ReportTypeMdt> m_ReportType;
    bool m_ReportTypeIsSet;
    std::shared_ptr<AreaScope> m_AreaScope;
    bool m_AreaScopeIsSet;
    std::vector<std::shared_ptr<MeasurementLteForMdt>> m_MeasurementLteList;
    bool m_MeasurementLteListIsSet;
    std::vector<std::shared_ptr<MeasurementNrForMdt>> m_MeasurementNrList;
    bool m_MeasurementNrListIsSet;
    std::vector<std::shared_ptr<SensorMeasurement>> m_SensorMeasurementList;
    bool m_SensorMeasurementListIsSet;
    std::vector<std::shared_ptr<ReportingTrigger>> m_ReportingTriggerList;
    bool m_ReportingTriggerListIsSet;
    std::shared_ptr<ReportIntervalMdt> m_ReportInterval;
    bool m_ReportIntervalIsSet;
    std::shared_ptr<ReportIntervalNrMdt> m_ReportIntervalNr;
    bool m_ReportIntervalNrIsSet;
    std::shared_ptr<ReportAmountMdt> m_ReportAmount;
    bool m_ReportAmountIsSet;
    int32_t m_EventThresholdRsrp;
    bool m_EventThresholdRsrpIsSet;
    int32_t m_EventThresholdRsrpNr;
    bool m_EventThresholdRsrpNrIsSet;
    int32_t m_EventThresholdRsrq;
    bool m_EventThresholdRsrqIsSet;
    int32_t m_EventThresholdRsrqNr;
    bool m_EventThresholdRsrqNrIsSet;
    std::vector<std::shared_ptr<EventForMdt>> m_EventList;
    bool m_EventListIsSet;
    std::shared_ptr<LoggingIntervalMdt> m_LoggingInterval;
    bool m_LoggingIntervalIsSet;
    std::shared_ptr<LoggingIntervalNrMdt> m_LoggingIntervalNr;
    bool m_LoggingIntervalNrIsSet;
    std::shared_ptr<LoggingDurationMdt> m_LoggingDuration;
    bool m_LoggingDurationIsSet;
    std::shared_ptr<LoggingDurationNrMdt> m_LoggingDurationNr;
    bool m_LoggingDurationNrIsSet;
    std::shared_ptr<PositioningMethodMdt> m_PositioningMethod;
    bool m_PositioningMethodIsSet;
    std::shared_ptr<CollectionPeriodRmmLteMdt> m_CollectionPeriodRmmLte;
    bool m_CollectionPeriodRmmLteIsSet;
    std::shared_ptr<CollectionPeriodRmmNrMdt> m_CollectionPeriodRmmNr;
    bool m_CollectionPeriodRmmNrIsSet;
    std::shared_ptr<MeasurementPeriodLteMdt> m_MeasurementPeriodLte;
    bool m_MeasurementPeriodLteIsSet;
    std::vector<std::shared_ptr<PlmnId>> m_MdtAllowedPlmnIdList;
    bool m_MdtAllowedPlmnIdListIsSet;
    std::vector<std::shared_ptr<MbsfnArea>> m_MbsfnAreaList;
    bool m_MbsfnAreaListIsSet;
    std::vector<std::shared_ptr<InterFreqTargetInfo>> m_InterFreqTargetList;
    bool m_InterFreqTargetListIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_MdtConfiguration_H_ */
