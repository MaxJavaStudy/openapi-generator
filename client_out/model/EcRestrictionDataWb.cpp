/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EcRestrictionDataWb.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EcRestrictionDataWb::EcRestrictionDataWb()
{
    m_EcModeARestricted = false;
    m_EcModeARestrictedIsSet = false;
    m_EcModeBRestricted = false;
    m_EcModeBRestrictedIsSet = false;
}

EcRestrictionDataWb::~EcRestrictionDataWb()
{
}

void EcRestrictionDataWb::validate()
{
    // TODO: implement validation
}

web::json::value EcRestrictionDataWb::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EcModeARestrictedIsSet)
    {
        val[utility::conversions::to_string_t("ecModeARestricted")] = ModelBase::toJson(m_EcModeARestricted);
    }
    if(m_EcModeBRestrictedIsSet)
    {
        val[utility::conversions::to_string_t("ecModeBRestricted")] = ModelBase::toJson(m_EcModeBRestricted);
    }

    return val;
}

bool EcRestrictionDataWb::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("ecModeARestricted")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ecModeARestricted"));
        if(!fieldValue.is_null())
        {
            bool refVal_ecModeARestricted;
            ok &= ModelBase::fromJson(fieldValue, refVal_ecModeARestricted);
            setEcModeARestricted(refVal_ecModeARestricted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ecModeBRestricted")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ecModeBRestricted"));
        if(!fieldValue.is_null())
        {
            bool refVal_ecModeBRestricted;
            ok &= ModelBase::fromJson(fieldValue, refVal_ecModeBRestricted);
            setEcModeBRestricted(refVal_ecModeBRestricted);
        }
    }
    return ok;
}

void EcRestrictionDataWb::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EcModeARestrictedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ecModeARestricted"), m_EcModeARestricted));
    }
    if(m_EcModeBRestrictedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ecModeBRestricted"), m_EcModeBRestricted));
    }
}

bool EcRestrictionDataWb::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ecModeARestricted")))
    {
        bool refVal_ecModeARestricted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ecModeARestricted")), refVal_ecModeARestricted );
        setEcModeARestricted(refVal_ecModeARestricted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ecModeBRestricted")))
    {
        bool refVal_ecModeBRestricted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ecModeBRestricted")), refVal_ecModeBRestricted );
        setEcModeBRestricted(refVal_ecModeBRestricted);
    }
    return ok;
}

bool EcRestrictionDataWb::isEcModeARestricted() const
{
    return m_EcModeARestricted;
}

void EcRestrictionDataWb::setEcModeARestricted(bool value)
{
    m_EcModeARestricted = value;
    m_EcModeARestrictedIsSet = true;
}

bool EcRestrictionDataWb::ecModeARestrictedIsSet() const
{
    return m_EcModeARestrictedIsSet;
}

void EcRestrictionDataWb::unsetEcModeARestricted()
{
    m_EcModeARestrictedIsSet = false;
}
bool EcRestrictionDataWb::isEcModeBRestricted() const
{
    return m_EcModeBRestricted;
}

void EcRestrictionDataWb::setEcModeBRestricted(bool value)
{
    m_EcModeBRestricted = value;
    m_EcModeBRestrictedIsSet = true;
}

bool EcRestrictionDataWb::ecModeBRestrictedIsSet() const
{
    return m_EcModeBRestrictedIsSet;
}

void EcRestrictionDataWb::unsetEcModeBRestricted()
{
    m_EcModeBRestrictedIsSet = false;
}
}
}
}
}


