/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SorUpdateInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SorUpdateInfo::SorUpdateInfo()
{
    m_VplmnIdIsSet = false;
}

SorUpdateInfo::~SorUpdateInfo()
{
}

void SorUpdateInfo::validate()
{
    // TODO: implement validation
}

web::json::value SorUpdateInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VplmnIdIsSet)
    {
        val[utility::conversions::to_string_t("vplmnId")] = ModelBase::toJson(m_VplmnId);
    }

    return val;
}

bool SorUpdateInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("vplmnId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vplmnId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_vplmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_vplmnId);
            setVplmnId(refVal_vplmnId);
        }
    }
    return ok;
}

void SorUpdateInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_VplmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vplmnId"), m_VplmnId));
    }
}

bool SorUpdateInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("vplmnId")))
    {
        std::shared_ptr<PlmnId> refVal_vplmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vplmnId")), refVal_vplmnId );
        setVplmnId(refVal_vplmnId);
    }
    return ok;
}

std::shared_ptr<PlmnId> SorUpdateInfo::getVplmnId() const
{
    return m_VplmnId;
}

void SorUpdateInfo::setVplmnId(const std::shared_ptr<PlmnId>& value)
{
    m_VplmnId = value;
    m_VplmnIdIsSet = true;
}

bool SorUpdateInfo::vplmnIdIsSet() const
{
    return m_VplmnIdIsSet;
}

void SorUpdateInfo::unsetVplmnId()
{
    m_VplmnIdIsSet = false;
}
}
}
}
}


