/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EpsIwkPgw.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EpsIwkPgw::EpsIwkPgw()
{
    m_PgwFqdn = utility::conversions::to_string_t("");
    m_PgwFqdnIsSet = false;
    m_SmfInstanceId = utility::conversions::to_string_t("");
    m_SmfInstanceIdIsSet = false;
}

EpsIwkPgw::~EpsIwkPgw()
{
}

void EpsIwkPgw::validate()
{
    // TODO: implement validation
}

web::json::value EpsIwkPgw::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PgwFqdnIsSet)
    {
        val[utility::conversions::to_string_t("pgwFqdn")] = ModelBase::toJson(m_PgwFqdn);
    }
    if(m_SmfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t("smfInstanceId")] = ModelBase::toJson(m_SmfInstanceId);
    }

    return val;
}

bool EpsIwkPgw::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pgwFqdn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pgwFqdn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pgwFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_pgwFqdn);
            setPgwFqdn(refVal_pgwFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smfInstanceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smfInstanceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_smfInstanceId);
            setSmfInstanceId(refVal_smfInstanceId);
        }
    }
    return ok;
}

void EpsIwkPgw::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PgwFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pgwFqdn"), m_PgwFqdn));
    }
    if(m_SmfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smfInstanceId"), m_SmfInstanceId));
    }
}

bool EpsIwkPgw::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pgwFqdn")))
    {
        utility::string_t refVal_pgwFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pgwFqdn")), refVal_pgwFqdn );
        setPgwFqdn(refVal_pgwFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smfInstanceId")))
    {
        utility::string_t refVal_smfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smfInstanceId")), refVal_smfInstanceId );
        setSmfInstanceId(refVal_smfInstanceId);
    }
    return ok;
}

utility::string_t EpsIwkPgw::getPgwFqdn() const
{
    return m_PgwFqdn;
}

void EpsIwkPgw::setPgwFqdn(const utility::string_t& value)
{
    m_PgwFqdn = value;
    m_PgwFqdnIsSet = true;
}

bool EpsIwkPgw::pgwFqdnIsSet() const
{
    return m_PgwFqdnIsSet;
}

void EpsIwkPgw::unsetPgwFqdn()
{
    m_PgwFqdnIsSet = false;
}
utility::string_t EpsIwkPgw::getSmfInstanceId() const
{
    return m_SmfInstanceId;
}

void EpsIwkPgw::setSmfInstanceId(const utility::string_t& value)
{
    m_SmfInstanceId = value;
    m_SmfInstanceIdIsSet = true;
}

bool EpsIwkPgw::smfInstanceIdIsSet() const
{
    return m_SmfInstanceIdIsSet;
}

void EpsIwkPgw::unsetSmfInstanceId()
{
    m_SmfInstanceIdIsSet = false;
}
}
}
}
}


