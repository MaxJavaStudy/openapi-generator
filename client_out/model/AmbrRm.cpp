/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AmbrRm.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AmbrRm::AmbrRm()
{
    m_Uplink = utility::conversions::to_string_t("");
    m_UplinkIsSet = false;
    m_Downlink = utility::conversions::to_string_t("");
    m_DownlinkIsSet = false;
}

AmbrRm::~AmbrRm()
{
}

void AmbrRm::validate()
{
    // TODO: implement validation
}

web::json::value AmbrRm::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UplinkIsSet)
    {
        val[utility::conversions::to_string_t("uplink")] = ModelBase::toJson(m_Uplink);
    }
    if(m_DownlinkIsSet)
    {
        val[utility::conversions::to_string_t("downlink")] = ModelBase::toJson(m_Downlink);
    }

    return val;
}

bool AmbrRm::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("uplink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uplink"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uplink;
            ok &= ModelBase::fromJson(fieldValue, refVal_uplink);
            setUplink(refVal_uplink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("downlink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("downlink"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_downlink;
            ok &= ModelBase::fromJson(fieldValue, refVal_downlink);
            setDownlink(refVal_downlink);
        }
    }
    return ok;
}

void AmbrRm::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_UplinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uplink"), m_Uplink));
    }
    if(m_DownlinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("downlink"), m_Downlink));
    }
}

bool AmbrRm::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("uplink")))
    {
        utility::string_t refVal_uplink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uplink")), refVal_uplink );
        setUplink(refVal_uplink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("downlink")))
    {
        utility::string_t refVal_downlink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("downlink")), refVal_downlink );
        setDownlink(refVal_downlink);
    }
    return ok;
}

utility::string_t AmbrRm::getUplink() const
{
    return m_Uplink;
}

void AmbrRm::setUplink(const utility::string_t& value)
{
    m_Uplink = value;
    m_UplinkIsSet = true;
}

bool AmbrRm::uplinkIsSet() const
{
    return m_UplinkIsSet;
}

void AmbrRm::unsetUplink()
{
    m_UplinkIsSet = false;
}
utility::string_t AmbrRm::getDownlink() const
{
    return m_Downlink;
}

void AmbrRm::setDownlink(const utility::string_t& value)
{
    m_Downlink = value;
    m_DownlinkIsSet = true;
}

bool AmbrRm::downlinkIsSet() const
{
    return m_DownlinkIsSet;
}

void AmbrRm::unsetDownlink()
{
    m_DownlinkIsSet = false;
}
}
}
}
}


