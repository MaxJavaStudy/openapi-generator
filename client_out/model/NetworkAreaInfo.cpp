/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NetworkAreaInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NetworkAreaInfo::NetworkAreaInfo()
{
    m_EcgisIsSet = false;
    m_NcgisIsSet = false;
    m_GRanNodeIdsIsSet = false;
    m_TaisIsSet = false;
}

NetworkAreaInfo::~NetworkAreaInfo()
{
}

void NetworkAreaInfo::validate()
{
    // TODO: implement validation
}

web::json::value NetworkAreaInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EcgisIsSet)
    {
        val[utility::conversions::to_string_t("ecgis")] = ModelBase::toJson(m_Ecgis);
    }
    if(m_NcgisIsSet)
    {
        val[utility::conversions::to_string_t("ncgis")] = ModelBase::toJson(m_Ncgis);
    }
    if(m_GRanNodeIdsIsSet)
    {
        val[utility::conversions::to_string_t("gRanNodeIds")] = ModelBase::toJson(m_GRanNodeIds);
    }
    if(m_TaisIsSet)
    {
        val[utility::conversions::to_string_t("tais")] = ModelBase::toJson(m_Tais);
    }

    return val;
}

bool NetworkAreaInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("ecgis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ecgis"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ecgi>> refVal_ecgis;
            ok &= ModelBase::fromJson(fieldValue, refVal_ecgis);
            setEcgis(refVal_ecgis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ncgis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ncgis"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ncgi>> refVal_ncgis;
            ok &= ModelBase::fromJson(fieldValue, refVal_ncgis);
            setNcgis(refVal_ncgis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gRanNodeIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gRanNodeIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GlobalRanNodeId>> refVal_gRanNodeIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_gRanNodeIds);
            setGRanNodeIds(refVal_gRanNodeIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tais")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tais"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Tai>> refVal_tais;
            ok &= ModelBase::fromJson(fieldValue, refVal_tais);
            setTais(refVal_tais);
        }
    }
    return ok;
}

void NetworkAreaInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EcgisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ecgis"), m_Ecgis));
    }
    if(m_NcgisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ncgis"), m_Ncgis));
    }
    if(m_GRanNodeIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gRanNodeIds"), m_GRanNodeIds));
    }
    if(m_TaisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tais"), m_Tais));
    }
}

bool NetworkAreaInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ecgis")))
    {
        std::vector<std::shared_ptr<Ecgi>> refVal_ecgis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ecgis")), refVal_ecgis );
        setEcgis(refVal_ecgis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ncgis")))
    {
        std::vector<std::shared_ptr<Ncgi>> refVal_ncgis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ncgis")), refVal_ncgis );
        setNcgis(refVal_ncgis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gRanNodeIds")))
    {
        std::vector<std::shared_ptr<GlobalRanNodeId>> refVal_gRanNodeIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gRanNodeIds")), refVal_gRanNodeIds );
        setGRanNodeIds(refVal_gRanNodeIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tais")))
    {
        std::vector<std::shared_ptr<Tai>> refVal_tais;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tais")), refVal_tais );
        setTais(refVal_tais);
    }
    return ok;
}

std::vector<std::shared_ptr<Ecgi>>& NetworkAreaInfo::getEcgis()
{
    return m_Ecgis;
}

void NetworkAreaInfo::setEcgis(const std::vector<std::shared_ptr<Ecgi>>& value)
{
    m_Ecgis = value;
    m_EcgisIsSet = true;
}

bool NetworkAreaInfo::ecgisIsSet() const
{
    return m_EcgisIsSet;
}

void NetworkAreaInfo::unsetEcgis()
{
    m_EcgisIsSet = false;
}
std::vector<std::shared_ptr<Ncgi>>& NetworkAreaInfo::getNcgis()
{
    return m_Ncgis;
}

void NetworkAreaInfo::setNcgis(const std::vector<std::shared_ptr<Ncgi>>& value)
{
    m_Ncgis = value;
    m_NcgisIsSet = true;
}

bool NetworkAreaInfo::ncgisIsSet() const
{
    return m_NcgisIsSet;
}

void NetworkAreaInfo::unsetNcgis()
{
    m_NcgisIsSet = false;
}
std::vector<std::shared_ptr<GlobalRanNodeId>>& NetworkAreaInfo::getGRanNodeIds()
{
    return m_GRanNodeIds;
}

void NetworkAreaInfo::setGRanNodeIds(const std::vector<std::shared_ptr<GlobalRanNodeId>>& value)
{
    m_GRanNodeIds = value;
    m_GRanNodeIdsIsSet = true;
}

bool NetworkAreaInfo::gRanNodeIdsIsSet() const
{
    return m_GRanNodeIdsIsSet;
}

void NetworkAreaInfo::unsetGRanNodeIds()
{
    m_GRanNodeIdsIsSet = false;
}
std::vector<std::shared_ptr<Tai>>& NetworkAreaInfo::getTais()
{
    return m_Tais;
}

void NetworkAreaInfo::setTais(const std::vector<std::shared_ptr<Tai>>& value)
{
    m_Tais = value;
    m_TaisIsSet = true;
}

bool NetworkAreaInfo::taisIsSet() const
{
    return m_TaisIsSet;
}

void NetworkAreaInfo::unsetTais()
{
    m_TaisIsSet = false;
}
}
}
}
}


