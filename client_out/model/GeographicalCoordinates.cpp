/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GeographicalCoordinates.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GeographicalCoordinates::GeographicalCoordinates()
{
    m_Lon = 0.0;
    m_LonIsSet = false;
    m_Lat = 0.0;
    m_LatIsSet = false;
}

GeographicalCoordinates::~GeographicalCoordinates()
{
}

void GeographicalCoordinates::validate()
{
    // TODO: implement validation
}

web::json::value GeographicalCoordinates::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LonIsSet)
    {
        val[utility::conversions::to_string_t("lon")] = ModelBase::toJson(m_Lon);
    }
    if(m_LatIsSet)
    {
        val[utility::conversions::to_string_t("lat")] = ModelBase::toJson(m_Lat);
    }

    return val;
}

bool GeographicalCoordinates::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("lon")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lon"));
        if(!fieldValue.is_null())
        {
            double refVal_lon;
            ok &= ModelBase::fromJson(fieldValue, refVal_lon);
            setLon(refVal_lon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lat"));
        if(!fieldValue.is_null())
        {
            double refVal_lat;
            ok &= ModelBase::fromJson(fieldValue, refVal_lat);
            setLat(refVal_lat);
        }
    }
    return ok;
}

void GeographicalCoordinates::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lon"), m_Lon));
    }
    if(m_LatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lat"), m_Lat));
    }
}

bool GeographicalCoordinates::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("lon")))
    {
        double refVal_lon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lon")), refVal_lon );
        setLon(refVal_lon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lat")))
    {
        double refVal_lat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lat")), refVal_lat );
        setLat(refVal_lat);
    }
    return ok;
}

double GeographicalCoordinates::getLon() const
{
    return m_Lon;
}

void GeographicalCoordinates::setLon(double value)
{
    m_Lon = value;
    m_LonIsSet = true;
}

bool GeographicalCoordinates::lonIsSet() const
{
    return m_LonIsSet;
}

void GeographicalCoordinates::unsetLon()
{
    m_LonIsSet = false;
}
double GeographicalCoordinates::getLat() const
{
    return m_Lat;
}

void GeographicalCoordinates::setLat(double value)
{
    m_Lat = value;
    m_LatIsSet = true;
}

bool GeographicalCoordinates::latIsSet() const
{
    return m_LatIsSet;
}

void GeographicalCoordinates::unsetLat()
{
    m_LatIsSet = false;
}
}
}
}
}


