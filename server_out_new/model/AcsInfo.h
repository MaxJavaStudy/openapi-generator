/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AcsInfo.h
 *
 * 
 */

#ifndef AcsInfo_H_
#define AcsInfo_H_


#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  AcsInfo: public jsonParser::jsonParser<AcsInfo>
{
public:
    explicit AcsInfo(){
        // constructor
        m_AcsUrl = "";
        
            m_AcsUrlFlag = (staticjson::Flags::Optional);
m_AcsIpv4Addr = "";
        
            m_AcsIpv4AddrFlag = (staticjson::Flags::Optional);
m_AcsIpv6Addr = "";
        
            m_AcsIpv6AddrFlag = (staticjson::Flags::Optional);
    };
    virtual ~AcsInfo(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : AcsUrl AcsIpv4Addr AcsIpv6Addr 
        h->add_property("acsUrl", &this->m_AcsUrl, m_AcsUrlFlag);
        h->add_property("acsIpv4Addr", &this->m_AcsIpv4Addr, m_AcsIpv4AddrFlag);
        h->add_property("acsIpv6Addr", &this->m_AcsIpv6Addr, m_AcsIpv6AddrFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const AcsInfo& obj)
    {
        
        o << "AcsUrl : " << obj.m_AcsUrl << std::endl;

        o << "AcsIpv4Addr : " << obj.m_AcsIpv4Addr << std::endl;

        o << "AcsIpv6Addr : " << obj.m_AcsIpv6Addr << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// AcsInfo members vars : AcsUrl AcsIpv4Addr AcsIpv6Addr 

    std::string  getAcsUrl() const
    {
        return m_AcsUrl;
    }
    void  setAcsUrl(std::string const& value)
    {
        m_AcsUrl = value;
    }

std::string  getAcsIpv4Addr() const
    {
        return m_AcsIpv4Addr;
    }
    void  setAcsIpv4Addr(std::string const& value)
    {
        m_AcsIpv4Addr = value;
    }

std::string  getAcsIpv6Addr() const
    {
        return m_AcsIpv6Addr;
    }
    void  setAcsIpv6Addr(std::string const& value)
    {
        m_AcsIpv6Addr = value;
    }



    
public:
    std::string m_AcsUrl;
    
    unsigned m_AcsUrlFlag;
    std::string m_AcsIpv4Addr;
    
    unsigned m_AcsIpv4AddrFlag;
    std::string m_AcsIpv6Addr;
    
    unsigned m_AcsIpv6AddrFlag;
  
};
}
}
}
}

#endif /* AcsInfo_H_ */
