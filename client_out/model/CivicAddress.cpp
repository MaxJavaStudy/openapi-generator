/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CivicAddress.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CivicAddress::CivicAddress()
{
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_A1 = utility::conversions::to_string_t("");
    m_A1IsSet = false;
    m_A2 = utility::conversions::to_string_t("");
    m_A2IsSet = false;
    m_A3 = utility::conversions::to_string_t("");
    m_A3IsSet = false;
    m_A4 = utility::conversions::to_string_t("");
    m_A4IsSet = false;
    m_A5 = utility::conversions::to_string_t("");
    m_A5IsSet = false;
    m_A6 = utility::conversions::to_string_t("");
    m_A6IsSet = false;
    m_PRD = utility::conversions::to_string_t("");
    m_PRDIsSet = false;
    m_POD = utility::conversions::to_string_t("");
    m_PODIsSet = false;
    m_STS = utility::conversions::to_string_t("");
    m_STSIsSet = false;
    m_HNO = utility::conversions::to_string_t("");
    m_HNOIsSet = false;
    m_HNS = utility::conversions::to_string_t("");
    m_HNSIsSet = false;
    m_LMK = utility::conversions::to_string_t("");
    m_LMKIsSet = false;
    m_LOC = utility::conversions::to_string_t("");
    m_LOCIsSet = false;
    m_NAM = utility::conversions::to_string_t("");
    m_NAMIsSet = false;
    m_PC = utility::conversions::to_string_t("");
    m_PCIsSet = false;
    m_BLD = utility::conversions::to_string_t("");
    m_BLDIsSet = false;
    m_UNIT = utility::conversions::to_string_t("");
    m_UNITIsSet = false;
    m_FLR = utility::conversions::to_string_t("");
    m_FLRIsSet = false;
    m_ROOM = utility::conversions::to_string_t("");
    m_ROOMIsSet = false;
    m_PLC = utility::conversions::to_string_t("");
    m_PLCIsSet = false;
    m_PCN = utility::conversions::to_string_t("");
    m_PCNIsSet = false;
    m_POBOX = utility::conversions::to_string_t("");
    m_POBOXIsSet = false;
    m_ADDCODE = utility::conversions::to_string_t("");
    m_ADDCODEIsSet = false;
    m_SEAT = utility::conversions::to_string_t("");
    m_SEATIsSet = false;
    m_RD = utility::conversions::to_string_t("");
    m_RDIsSet = false;
    m_RDSEC = utility::conversions::to_string_t("");
    m_RDSECIsSet = false;
    m_RDBR = utility::conversions::to_string_t("");
    m_RDBRIsSet = false;
    m_RDSUBBR = utility::conversions::to_string_t("");
    m_RDSUBBRIsSet = false;
    m_PRM = utility::conversions::to_string_t("");
    m_PRMIsSet = false;
    m_POM = utility::conversions::to_string_t("");
    m_POMIsSet = false;
}

CivicAddress::~CivicAddress()
{
}

void CivicAddress::validate()
{
    // TODO: implement validation
}

web::json::value CivicAddress::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_A1IsSet)
    {
        val[utility::conversions::to_string_t("A1")] = ModelBase::toJson(m_A1);
    }
    if(m_A2IsSet)
    {
        val[utility::conversions::to_string_t("A2")] = ModelBase::toJson(m_A2);
    }
    if(m_A3IsSet)
    {
        val[utility::conversions::to_string_t("A3")] = ModelBase::toJson(m_A3);
    }
    if(m_A4IsSet)
    {
        val[utility::conversions::to_string_t("A4")] = ModelBase::toJson(m_A4);
    }
    if(m_A5IsSet)
    {
        val[utility::conversions::to_string_t("A5")] = ModelBase::toJson(m_A5);
    }
    if(m_A6IsSet)
    {
        val[utility::conversions::to_string_t("A6")] = ModelBase::toJson(m_A6);
    }
    if(m_PRDIsSet)
    {
        val[utility::conversions::to_string_t("PRD")] = ModelBase::toJson(m_PRD);
    }
    if(m_PODIsSet)
    {
        val[utility::conversions::to_string_t("POD")] = ModelBase::toJson(m_POD);
    }
    if(m_STSIsSet)
    {
        val[utility::conversions::to_string_t("STS")] = ModelBase::toJson(m_STS);
    }
    if(m_HNOIsSet)
    {
        val[utility::conversions::to_string_t("HNO")] = ModelBase::toJson(m_HNO);
    }
    if(m_HNSIsSet)
    {
        val[utility::conversions::to_string_t("HNS")] = ModelBase::toJson(m_HNS);
    }
    if(m_LMKIsSet)
    {
        val[utility::conversions::to_string_t("LMK")] = ModelBase::toJson(m_LMK);
    }
    if(m_LOCIsSet)
    {
        val[utility::conversions::to_string_t("LOC")] = ModelBase::toJson(m_LOC);
    }
    if(m_NAMIsSet)
    {
        val[utility::conversions::to_string_t("NAM")] = ModelBase::toJson(m_NAM);
    }
    if(m_PCIsSet)
    {
        val[utility::conversions::to_string_t("PC")] = ModelBase::toJson(m_PC);
    }
    if(m_BLDIsSet)
    {
        val[utility::conversions::to_string_t("BLD")] = ModelBase::toJson(m_BLD);
    }
    if(m_UNITIsSet)
    {
        val[utility::conversions::to_string_t("UNIT")] = ModelBase::toJson(m_UNIT);
    }
    if(m_FLRIsSet)
    {
        val[utility::conversions::to_string_t("FLR")] = ModelBase::toJson(m_FLR);
    }
    if(m_ROOMIsSet)
    {
        val[utility::conversions::to_string_t("ROOM")] = ModelBase::toJson(m_ROOM);
    }
    if(m_PLCIsSet)
    {
        val[utility::conversions::to_string_t("PLC")] = ModelBase::toJson(m_PLC);
    }
    if(m_PCNIsSet)
    {
        val[utility::conversions::to_string_t("PCN")] = ModelBase::toJson(m_PCN);
    }
    if(m_POBOXIsSet)
    {
        val[utility::conversions::to_string_t("POBOX")] = ModelBase::toJson(m_POBOX);
    }
    if(m_ADDCODEIsSet)
    {
        val[utility::conversions::to_string_t("ADDCODE")] = ModelBase::toJson(m_ADDCODE);
    }
    if(m_SEATIsSet)
    {
        val[utility::conversions::to_string_t("SEAT")] = ModelBase::toJson(m_SEAT);
    }
    if(m_RDIsSet)
    {
        val[utility::conversions::to_string_t("RD")] = ModelBase::toJson(m_RD);
    }
    if(m_RDSECIsSet)
    {
        val[utility::conversions::to_string_t("RDSEC")] = ModelBase::toJson(m_RDSEC);
    }
    if(m_RDBRIsSet)
    {
        val[utility::conversions::to_string_t("RDBR")] = ModelBase::toJson(m_RDBR);
    }
    if(m_RDSUBBRIsSet)
    {
        val[utility::conversions::to_string_t("RDSUBBR")] = ModelBase::toJson(m_RDSUBBR);
    }
    if(m_PRMIsSet)
    {
        val[utility::conversions::to_string_t("PRM")] = ModelBase::toJson(m_PRM);
    }
    if(m_POMIsSet)
    {
        val[utility::conversions::to_string_t("POM")] = ModelBase::toJson(m_POM);
    }

    return val;
}

bool CivicAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("country"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("A1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("A1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_A1;
            ok &= ModelBase::fromJson(fieldValue, refVal_A1);
            setA1(refVal_A1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("A2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("A2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_A2;
            ok &= ModelBase::fromJson(fieldValue, refVal_A2);
            setA2(refVal_A2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("A3")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("A3"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_A3;
            ok &= ModelBase::fromJson(fieldValue, refVal_A3);
            setA3(refVal_A3);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("A4")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("A4"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_A4;
            ok &= ModelBase::fromJson(fieldValue, refVal_A4);
            setA4(refVal_A4);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("A5")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("A5"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_A5;
            ok &= ModelBase::fromJson(fieldValue, refVal_A5);
            setA5(refVal_A5);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("A6")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("A6"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_A6;
            ok &= ModelBase::fromJson(fieldValue, refVal_A6);
            setA6(refVal_A6);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PRD")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("PRD"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_PRD;
            ok &= ModelBase::fromJson(fieldValue, refVal_PRD);
            setPRD(refVal_PRD);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("POD")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("POD"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_POD;
            ok &= ModelBase::fromJson(fieldValue, refVal_POD);
            setPOD(refVal_POD);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("STS")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("STS"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_STS;
            ok &= ModelBase::fromJson(fieldValue, refVal_STS);
            setSTS(refVal_STS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("HNO")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("HNO"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_HNO;
            ok &= ModelBase::fromJson(fieldValue, refVal_HNO);
            setHNO(refVal_HNO);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("HNS")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("HNS"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_HNS;
            ok &= ModelBase::fromJson(fieldValue, refVal_HNS);
            setHNS(refVal_HNS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("LMK")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("LMK"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_LMK;
            ok &= ModelBase::fromJson(fieldValue, refVal_LMK);
            setLMK(refVal_LMK);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("LOC")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("LOC"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_LOC;
            ok &= ModelBase::fromJson(fieldValue, refVal_LOC);
            setLOC(refVal_LOC);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("NAM")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("NAM"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_NAM;
            ok &= ModelBase::fromJson(fieldValue, refVal_NAM);
            setNAM(refVal_NAM);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PC")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("PC"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_PC;
            ok &= ModelBase::fromJson(fieldValue, refVal_PC);
            setPC(refVal_PC);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("BLD")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("BLD"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_BLD;
            ok &= ModelBase::fromJson(fieldValue, refVal_BLD);
            setBLD(refVal_BLD);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("UNIT")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("UNIT"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_UNIT;
            ok &= ModelBase::fromJson(fieldValue, refVal_UNIT);
            setUNIT(refVal_UNIT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("FLR")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("FLR"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_FLR;
            ok &= ModelBase::fromJson(fieldValue, refVal_FLR);
            setFLR(refVal_FLR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ROOM")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ROOM"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ROOM;
            ok &= ModelBase::fromJson(fieldValue, refVal_ROOM);
            setROOM(refVal_ROOM);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PLC")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("PLC"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_PLC;
            ok &= ModelBase::fromJson(fieldValue, refVal_PLC);
            setPLC(refVal_PLC);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PCN")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("PCN"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_PCN;
            ok &= ModelBase::fromJson(fieldValue, refVal_PCN);
            setPCN(refVal_PCN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("POBOX")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("POBOX"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_POBOX;
            ok &= ModelBase::fromJson(fieldValue, refVal_POBOX);
            setPOBOX(refVal_POBOX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ADDCODE")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ADDCODE"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ADDCODE;
            ok &= ModelBase::fromJson(fieldValue, refVal_ADDCODE);
            setADDCODE(refVal_ADDCODE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("SEAT")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("SEAT"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_SEAT;
            ok &= ModelBase::fromJson(fieldValue, refVal_SEAT);
            setSEAT(refVal_SEAT);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RD")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("RD"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_RD;
            ok &= ModelBase::fromJson(fieldValue, refVal_RD);
            setRD(refVal_RD);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RDSEC")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("RDSEC"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_RDSEC;
            ok &= ModelBase::fromJson(fieldValue, refVal_RDSEC);
            setRDSEC(refVal_RDSEC);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RDBR")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("RDBR"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_RDBR;
            ok &= ModelBase::fromJson(fieldValue, refVal_RDBR);
            setRDBR(refVal_RDBR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("RDSUBBR")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("RDSUBBR"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_RDSUBBR;
            ok &= ModelBase::fromJson(fieldValue, refVal_RDSUBBR);
            setRDSUBBR(refVal_RDSUBBR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("PRM")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("PRM"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_PRM;
            ok &= ModelBase::fromJson(fieldValue, refVal_PRM);
            setPRM(refVal_PRM);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("POM")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("POM"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_POM;
            ok &= ModelBase::fromJson(fieldValue, refVal_POM);
            setPOM(refVal_POM);
        }
    }
    return ok;
}

void CivicAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    }
    if(m_A1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("A1"), m_A1));
    }
    if(m_A2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("A2"), m_A2));
    }
    if(m_A3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("A3"), m_A3));
    }
    if(m_A4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("A4"), m_A4));
    }
    if(m_A5IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("A5"), m_A5));
    }
    if(m_A6IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("A6"), m_A6));
    }
    if(m_PRDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PRD"), m_PRD));
    }
    if(m_PODIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("POD"), m_POD));
    }
    if(m_STSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("STS"), m_STS));
    }
    if(m_HNOIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("HNO"), m_HNO));
    }
    if(m_HNSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("HNS"), m_HNS));
    }
    if(m_LMKIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("LMK"), m_LMK));
    }
    if(m_LOCIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("LOC"), m_LOC));
    }
    if(m_NAMIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("NAM"), m_NAM));
    }
    if(m_PCIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PC"), m_PC));
    }
    if(m_BLDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("BLD"), m_BLD));
    }
    if(m_UNITIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("UNIT"), m_UNIT));
    }
    if(m_FLRIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("FLR"), m_FLR));
    }
    if(m_ROOMIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ROOM"), m_ROOM));
    }
    if(m_PLCIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PLC"), m_PLC));
    }
    if(m_PCNIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PCN"), m_PCN));
    }
    if(m_POBOXIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("POBOX"), m_POBOX));
    }
    if(m_ADDCODEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ADDCODE"), m_ADDCODE));
    }
    if(m_SEATIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("SEAT"), m_SEAT));
    }
    if(m_RDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RD"), m_RD));
    }
    if(m_RDSECIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RDSEC"), m_RDSEC));
    }
    if(m_RDBRIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RDBR"), m_RDBR));
    }
    if(m_RDSUBBRIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("RDSUBBR"), m_RDSUBBR));
    }
    if(m_PRMIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("PRM"), m_PRM));
    }
    if(m_POMIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("POM"), m_POM));
    }
}

bool CivicAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        utility::string_t refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("country")), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("A1")))
    {
        utility::string_t refVal_A1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("A1")), refVal_A1 );
        setA1(refVal_A1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("A2")))
    {
        utility::string_t refVal_A2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("A2")), refVal_A2 );
        setA2(refVal_A2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("A3")))
    {
        utility::string_t refVal_A3;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("A3")), refVal_A3 );
        setA3(refVal_A3);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("A4")))
    {
        utility::string_t refVal_A4;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("A4")), refVal_A4 );
        setA4(refVal_A4);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("A5")))
    {
        utility::string_t refVal_A5;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("A5")), refVal_A5 );
        setA5(refVal_A5);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("A6")))
    {
        utility::string_t refVal_A6;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("A6")), refVal_A6 );
        setA6(refVal_A6);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PRD")))
    {
        utility::string_t refVal_PRD;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("PRD")), refVal_PRD );
        setPRD(refVal_PRD);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("POD")))
    {
        utility::string_t refVal_POD;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("POD")), refVal_POD );
        setPOD(refVal_POD);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("STS")))
    {
        utility::string_t refVal_STS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("STS")), refVal_STS );
        setSTS(refVal_STS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("HNO")))
    {
        utility::string_t refVal_HNO;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("HNO")), refVal_HNO );
        setHNO(refVal_HNO);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("HNS")))
    {
        utility::string_t refVal_HNS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("HNS")), refVal_HNS );
        setHNS(refVal_HNS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("LMK")))
    {
        utility::string_t refVal_LMK;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("LMK")), refVal_LMK );
        setLMK(refVal_LMK);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("LOC")))
    {
        utility::string_t refVal_LOC;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("LOC")), refVal_LOC );
        setLOC(refVal_LOC);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("NAM")))
    {
        utility::string_t refVal_NAM;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("NAM")), refVal_NAM );
        setNAM(refVal_NAM);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PC")))
    {
        utility::string_t refVal_PC;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("PC")), refVal_PC );
        setPC(refVal_PC);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("BLD")))
    {
        utility::string_t refVal_BLD;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("BLD")), refVal_BLD );
        setBLD(refVal_BLD);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("UNIT")))
    {
        utility::string_t refVal_UNIT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("UNIT")), refVal_UNIT );
        setUNIT(refVal_UNIT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("FLR")))
    {
        utility::string_t refVal_FLR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("FLR")), refVal_FLR );
        setFLR(refVal_FLR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ROOM")))
    {
        utility::string_t refVal_ROOM;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ROOM")), refVal_ROOM );
        setROOM(refVal_ROOM);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PLC")))
    {
        utility::string_t refVal_PLC;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("PLC")), refVal_PLC );
        setPLC(refVal_PLC);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PCN")))
    {
        utility::string_t refVal_PCN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("PCN")), refVal_PCN );
        setPCN(refVal_PCN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("POBOX")))
    {
        utility::string_t refVal_POBOX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("POBOX")), refVal_POBOX );
        setPOBOX(refVal_POBOX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ADDCODE")))
    {
        utility::string_t refVal_ADDCODE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ADDCODE")), refVal_ADDCODE );
        setADDCODE(refVal_ADDCODE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("SEAT")))
    {
        utility::string_t refVal_SEAT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("SEAT")), refVal_SEAT );
        setSEAT(refVal_SEAT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RD")))
    {
        utility::string_t refVal_RD;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("RD")), refVal_RD );
        setRD(refVal_RD);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RDSEC")))
    {
        utility::string_t refVal_RDSEC;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("RDSEC")), refVal_RDSEC );
        setRDSEC(refVal_RDSEC);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RDBR")))
    {
        utility::string_t refVal_RDBR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("RDBR")), refVal_RDBR );
        setRDBR(refVal_RDBR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("RDSUBBR")))
    {
        utility::string_t refVal_RDSUBBR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("RDSUBBR")), refVal_RDSUBBR );
        setRDSUBBR(refVal_RDSUBBR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("PRM")))
    {
        utility::string_t refVal_PRM;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("PRM")), refVal_PRM );
        setPRM(refVal_PRM);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("POM")))
    {
        utility::string_t refVal_POM;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("POM")), refVal_POM );
        setPOM(refVal_POM);
    }
    return ok;
}

utility::string_t CivicAddress::getCountry() const
{
    return m_Country;
}

void CivicAddress::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool CivicAddress::countryIsSet() const
{
    return m_CountryIsSet;
}

void CivicAddress::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t CivicAddress::getA1() const
{
    return m_A1;
}

void CivicAddress::setA1(const utility::string_t& value)
{
    m_A1 = value;
    m_A1IsSet = true;
}

bool CivicAddress::a1IsSet() const
{
    return m_A1IsSet;
}

void CivicAddress::unsetA1()
{
    m_A1IsSet = false;
}
utility::string_t CivicAddress::getA2() const
{
    return m_A2;
}

void CivicAddress::setA2(const utility::string_t& value)
{
    m_A2 = value;
    m_A2IsSet = true;
}

bool CivicAddress::a2IsSet() const
{
    return m_A2IsSet;
}

void CivicAddress::unsetA2()
{
    m_A2IsSet = false;
}
utility::string_t CivicAddress::getA3() const
{
    return m_A3;
}

void CivicAddress::setA3(const utility::string_t& value)
{
    m_A3 = value;
    m_A3IsSet = true;
}

bool CivicAddress::a3IsSet() const
{
    return m_A3IsSet;
}

void CivicAddress::unsetA3()
{
    m_A3IsSet = false;
}
utility::string_t CivicAddress::getA4() const
{
    return m_A4;
}

void CivicAddress::setA4(const utility::string_t& value)
{
    m_A4 = value;
    m_A4IsSet = true;
}

bool CivicAddress::a4IsSet() const
{
    return m_A4IsSet;
}

void CivicAddress::unsetA4()
{
    m_A4IsSet = false;
}
utility::string_t CivicAddress::getA5() const
{
    return m_A5;
}

void CivicAddress::setA5(const utility::string_t& value)
{
    m_A5 = value;
    m_A5IsSet = true;
}

bool CivicAddress::a5IsSet() const
{
    return m_A5IsSet;
}

void CivicAddress::unsetA5()
{
    m_A5IsSet = false;
}
utility::string_t CivicAddress::getA6() const
{
    return m_A6;
}

void CivicAddress::setA6(const utility::string_t& value)
{
    m_A6 = value;
    m_A6IsSet = true;
}

bool CivicAddress::a6IsSet() const
{
    return m_A6IsSet;
}

void CivicAddress::unsetA6()
{
    m_A6IsSet = false;
}
utility::string_t CivicAddress::getPRD() const
{
    return m_PRD;
}

void CivicAddress::setPRD(const utility::string_t& value)
{
    m_PRD = value;
    m_PRDIsSet = true;
}

bool CivicAddress::pRDIsSet() const
{
    return m_PRDIsSet;
}

void CivicAddress::unsetPRD()
{
    m_PRDIsSet = false;
}
utility::string_t CivicAddress::getPOD() const
{
    return m_POD;
}

void CivicAddress::setPOD(const utility::string_t& value)
{
    m_POD = value;
    m_PODIsSet = true;
}

bool CivicAddress::pODIsSet() const
{
    return m_PODIsSet;
}

void CivicAddress::unsetPOD()
{
    m_PODIsSet = false;
}
utility::string_t CivicAddress::getSTS() const
{
    return m_STS;
}

void CivicAddress::setSTS(const utility::string_t& value)
{
    m_STS = value;
    m_STSIsSet = true;
}

bool CivicAddress::sTSIsSet() const
{
    return m_STSIsSet;
}

void CivicAddress::unsetSTS()
{
    m_STSIsSet = false;
}
utility::string_t CivicAddress::getHNO() const
{
    return m_HNO;
}

void CivicAddress::setHNO(const utility::string_t& value)
{
    m_HNO = value;
    m_HNOIsSet = true;
}

bool CivicAddress::hNOIsSet() const
{
    return m_HNOIsSet;
}

void CivicAddress::unsetHNO()
{
    m_HNOIsSet = false;
}
utility::string_t CivicAddress::getHNS() const
{
    return m_HNS;
}

void CivicAddress::setHNS(const utility::string_t& value)
{
    m_HNS = value;
    m_HNSIsSet = true;
}

bool CivicAddress::hNSIsSet() const
{
    return m_HNSIsSet;
}

void CivicAddress::unsetHNS()
{
    m_HNSIsSet = false;
}
utility::string_t CivicAddress::getLMK() const
{
    return m_LMK;
}

void CivicAddress::setLMK(const utility::string_t& value)
{
    m_LMK = value;
    m_LMKIsSet = true;
}

bool CivicAddress::lMKIsSet() const
{
    return m_LMKIsSet;
}

void CivicAddress::unsetLMK()
{
    m_LMKIsSet = false;
}
utility::string_t CivicAddress::getLOC() const
{
    return m_LOC;
}

void CivicAddress::setLOC(const utility::string_t& value)
{
    m_LOC = value;
    m_LOCIsSet = true;
}

bool CivicAddress::lOCIsSet() const
{
    return m_LOCIsSet;
}

void CivicAddress::unsetLOC()
{
    m_LOCIsSet = false;
}
utility::string_t CivicAddress::getNAM() const
{
    return m_NAM;
}

void CivicAddress::setNAM(const utility::string_t& value)
{
    m_NAM = value;
    m_NAMIsSet = true;
}

bool CivicAddress::nAMIsSet() const
{
    return m_NAMIsSet;
}

void CivicAddress::unsetNAM()
{
    m_NAMIsSet = false;
}
utility::string_t CivicAddress::getPC() const
{
    return m_PC;
}

void CivicAddress::setPC(const utility::string_t& value)
{
    m_PC = value;
    m_PCIsSet = true;
}

bool CivicAddress::pCIsSet() const
{
    return m_PCIsSet;
}

void CivicAddress::unsetPC()
{
    m_PCIsSet = false;
}
utility::string_t CivicAddress::getBLD() const
{
    return m_BLD;
}

void CivicAddress::setBLD(const utility::string_t& value)
{
    m_BLD = value;
    m_BLDIsSet = true;
}

bool CivicAddress::bLDIsSet() const
{
    return m_BLDIsSet;
}

void CivicAddress::unsetBLD()
{
    m_BLDIsSet = false;
}
utility::string_t CivicAddress::getUNIT() const
{
    return m_UNIT;
}

void CivicAddress::setUNIT(const utility::string_t& value)
{
    m_UNIT = value;
    m_UNITIsSet = true;
}

bool CivicAddress::uNITIsSet() const
{
    return m_UNITIsSet;
}

void CivicAddress::unsetUNIT()
{
    m_UNITIsSet = false;
}
utility::string_t CivicAddress::getFLR() const
{
    return m_FLR;
}

void CivicAddress::setFLR(const utility::string_t& value)
{
    m_FLR = value;
    m_FLRIsSet = true;
}

bool CivicAddress::fLRIsSet() const
{
    return m_FLRIsSet;
}

void CivicAddress::unsetFLR()
{
    m_FLRIsSet = false;
}
utility::string_t CivicAddress::getROOM() const
{
    return m_ROOM;
}

void CivicAddress::setROOM(const utility::string_t& value)
{
    m_ROOM = value;
    m_ROOMIsSet = true;
}

bool CivicAddress::rOOMIsSet() const
{
    return m_ROOMIsSet;
}

void CivicAddress::unsetROOM()
{
    m_ROOMIsSet = false;
}
utility::string_t CivicAddress::getPLC() const
{
    return m_PLC;
}

void CivicAddress::setPLC(const utility::string_t& value)
{
    m_PLC = value;
    m_PLCIsSet = true;
}

bool CivicAddress::pLCIsSet() const
{
    return m_PLCIsSet;
}

void CivicAddress::unsetPLC()
{
    m_PLCIsSet = false;
}
utility::string_t CivicAddress::getPCN() const
{
    return m_PCN;
}

void CivicAddress::setPCN(const utility::string_t& value)
{
    m_PCN = value;
    m_PCNIsSet = true;
}

bool CivicAddress::pCNIsSet() const
{
    return m_PCNIsSet;
}

void CivicAddress::unsetPCN()
{
    m_PCNIsSet = false;
}
utility::string_t CivicAddress::getPOBOX() const
{
    return m_POBOX;
}

void CivicAddress::setPOBOX(const utility::string_t& value)
{
    m_POBOX = value;
    m_POBOXIsSet = true;
}

bool CivicAddress::pOBOXIsSet() const
{
    return m_POBOXIsSet;
}

void CivicAddress::unsetPOBOX()
{
    m_POBOXIsSet = false;
}
utility::string_t CivicAddress::getADDCODE() const
{
    return m_ADDCODE;
}

void CivicAddress::setADDCODE(const utility::string_t& value)
{
    m_ADDCODE = value;
    m_ADDCODEIsSet = true;
}

bool CivicAddress::aDDCODEIsSet() const
{
    return m_ADDCODEIsSet;
}

void CivicAddress::unsetADDCODE()
{
    m_ADDCODEIsSet = false;
}
utility::string_t CivicAddress::getSEAT() const
{
    return m_SEAT;
}

void CivicAddress::setSEAT(const utility::string_t& value)
{
    m_SEAT = value;
    m_SEATIsSet = true;
}

bool CivicAddress::sEATIsSet() const
{
    return m_SEATIsSet;
}

void CivicAddress::unsetSEAT()
{
    m_SEATIsSet = false;
}
utility::string_t CivicAddress::getRD() const
{
    return m_RD;
}

void CivicAddress::setRD(const utility::string_t& value)
{
    m_RD = value;
    m_RDIsSet = true;
}

bool CivicAddress::rDIsSet() const
{
    return m_RDIsSet;
}

void CivicAddress::unsetRD()
{
    m_RDIsSet = false;
}
utility::string_t CivicAddress::getRDSEC() const
{
    return m_RDSEC;
}

void CivicAddress::setRDSEC(const utility::string_t& value)
{
    m_RDSEC = value;
    m_RDSECIsSet = true;
}

bool CivicAddress::rDSECIsSet() const
{
    return m_RDSECIsSet;
}

void CivicAddress::unsetRDSEC()
{
    m_RDSECIsSet = false;
}
utility::string_t CivicAddress::getRDBR() const
{
    return m_RDBR;
}

void CivicAddress::setRDBR(const utility::string_t& value)
{
    m_RDBR = value;
    m_RDBRIsSet = true;
}

bool CivicAddress::rDBRIsSet() const
{
    return m_RDBRIsSet;
}

void CivicAddress::unsetRDBR()
{
    m_RDBRIsSet = false;
}
utility::string_t CivicAddress::getRDSUBBR() const
{
    return m_RDSUBBR;
}

void CivicAddress::setRDSUBBR(const utility::string_t& value)
{
    m_RDSUBBR = value;
    m_RDSUBBRIsSet = true;
}

bool CivicAddress::rDSUBBRIsSet() const
{
    return m_RDSUBBRIsSet;
}

void CivicAddress::unsetRDSUBBR()
{
    m_RDSUBBRIsSet = false;
}
utility::string_t CivicAddress::getPRM() const
{
    return m_PRM;
}

void CivicAddress::setPRM(const utility::string_t& value)
{
    m_PRM = value;
    m_PRMIsSet = true;
}

bool CivicAddress::pRMIsSet() const
{
    return m_PRMIsSet;
}

void CivicAddress::unsetPRM()
{
    m_PRMIsSet = false;
}
utility::string_t CivicAddress::getPOM() const
{
    return m_POM;
}

void CivicAddress::setPOM(const utility::string_t& value)
{
    m_POM = value;
    m_POMIsSet = true;
}

bool CivicAddress::pOMIsSet() const
{
    return m_POMIsSet;
}

void CivicAddress::unsetPOM()
{
    m_POMIsSet = false;
}
}
}
}
}


