/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddInformation.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef NiddInformation_H_
#define NiddInformation_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class NiddInformation : public jsonParser::jsonParser<NiddInformation> {
public:
  explicit NiddInformation() {
    // constructor
    m_AfId = "";

    m_AfIdFlag = staticjson::Flags::Default;
    m_AfIdOutFlag.reset(new unsigned);
    *m_AfIdOutFlag.get() = 0;
    m_Gpsi = "";

    m_GpsiFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_GpsiOutFlag.reset(new unsigned);
    *m_GpsiOutFlag.get() = 0;
    m_ExtGroupId = "";

    m_ExtGroupIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ExtGroupIdOutFlag.reset(new unsigned);
    *m_ExtGroupIdOutFlag.get() = 0;
  };
  virtual ~NiddInformation(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : AfId Gpsi ExtGroupId
    h->add_property("afId", &this->m_AfId, m_AfIdFlag);
    h->add_optional_property("gpsi", &this->m_Gpsi, m_GpsiFlag, m_GpsiOutFlag);
    h->add_optional_property("extGroupId", &this->m_ExtGroupId,
                             m_ExtGroupIdFlag, m_ExtGroupIdOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const NiddInformation &obj) {

    o << "AfId : " << obj.m_AfId << std::endl;

    o << "Gpsi, optional flag is : " << *m_GpsiOutFlag
      << ", content is : " << obj.m_Gpsi << std::endl;

    o << "ExtGroupId, optional flag is : " << *m_ExtGroupIdOutFlag
      << ", content is : " << obj.m_ExtGroupId << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// NiddInformation members vars : AfId Gpsi ExtGroupId

  std::string getAfId() const { return m_AfId; }
  void setAfId(std::string const &value) { m_AfId = value; }

  std::string getGpsi() const { return m_Gpsi; }
  void setGpsi(std::string const &value) { m_Gpsi = value; }

  std::string getExtGroupId() const { return m_ExtGroupId; }
  void setExtGroupId(std::string const &value) { m_ExtGroupId = value; }

public:
  std::string m_AfId;

  unsigned m_AfIdFlag;
  shared_ptr<unsigned> m_AfIdOutFlag;
  std::string m_Gpsi;

  unsigned m_GpsiFlag;
  shared_ptr<unsigned> m_GpsiOutFlag;
  std::string m_ExtGroupId;

  unsigned m_ExtGroupIdFlag;
  shared_ptr<unsigned> m_ExtGroupIdOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddInformation_H_ */
