/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeregistrationReason_anyOf.h"
#include <stdexcept>
#include <sstream>

namespace org {
namespace openapitools {
namespace server {
namespace model {

DeregistrationReason_anyOf::DeregistrationReason_anyOf()
{
    
}

DeregistrationReason_anyOf::~DeregistrationReason_anyOf()
{
}

void DeregistrationReason_anyOf::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const DeregistrationReason_anyOf& o)
{
    j = nlohmann::json();
    
    switch (o.getValue())
    {
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
            j = "INVALID_VALUE_OPENAPI_GENERATED";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::UE_INITIAL_REGISTRATION:
            j = "UE_INITIAL_REGISTRATION";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::UE_REGISTRATION_AREA_CHANGE:
            j = "UE_REGISTRATION_AREA_CHANGE";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::SUBSCRIPTION_WITHDRAWN:
            j = "SUBSCRIPTION_WITHDRAWN";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::_5GS_TO_EPS_MOBILITY:
            j = "5GS_TO_EPS_MOBILITY";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::_5GS_TO_EPS_MOBILITY_UE_INITIAL_REGISTRATION:
            j = "5GS_TO_EPS_MOBILITY_UE_INITIAL_REGISTRATION";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::REREGISTRATION_REQUIRED:
            j = "REREGISTRATION_REQUIRED";
            break;
        case DeregistrationReason_anyOf::eDeregistrationReason_anyOf::SMF_CONTEXT_TRANSFERRED:
            j = "SMF_CONTEXT_TRANSFERRED";
            break;
    }
}

void from_json(const nlohmann::json& j, DeregistrationReason_anyOf& o)
{
    
    auto s = j.get<std::string>();
    if (s == "UE_INITIAL_REGISTRATION") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::UE_INITIAL_REGISTRATION);
    } 
    else if (s == "UE_REGISTRATION_AREA_CHANGE") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::UE_REGISTRATION_AREA_CHANGE);
    } 
    else if (s == "SUBSCRIPTION_WITHDRAWN") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::SUBSCRIPTION_WITHDRAWN);
    } 
    else if (s == "5GS_TO_EPS_MOBILITY") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::_5GS_TO_EPS_MOBILITY);
    } 
    else if (s == "5GS_TO_EPS_MOBILITY_UE_INITIAL_REGISTRATION") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::_5GS_TO_EPS_MOBILITY_UE_INITIAL_REGISTRATION);
    } 
    else if (s == "REREGISTRATION_REQUIRED") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::REREGISTRATION_REQUIRED);
    } 
    else if (s == "SMF_CONTEXT_TRANSFERRED") {
     o.setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf::SMF_CONTEXT_TRANSFERRED);
    }  else {
     std::stringstream ss;
     ss << "Unexpected value " << s << " in json"
        << " cannot be converted to enum of type"
        << " DeregistrationReason_anyOf::eDeregistrationReason_anyOf";
     throw std::invalid_argument(ss.str());
    } 

}

DeregistrationReason_anyOf::eDeregistrationReason_anyOf DeregistrationReason_anyOf::getValue() const
{
    return m_value;
}
void DeregistrationReason_anyOf::setValue(DeregistrationReason_anyOf::eDeregistrationReason_anyOf value)
{
    m_value = value;
}

}
}
}
}

