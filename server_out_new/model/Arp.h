/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Arp.h
 *
 * 
 */

#ifndef Arp_H_
#define Arp_H_


#include "PreemptionCapability.h"
#include "PreemptionVulnerability.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  Arp: public jsonParser::jsonParser<Arp>
{
public:
    explicit Arp(){
        // constructor
        m_PriorityLevel = 0;
        
            m_PriorityLevelFlag = staticjson::Flags::Default;

            m_PreemptCapFlag = staticjson::Flags::Default;

            m_PreemptVulnFlag = staticjson::Flags::Default;
    };
    virtual ~Arp(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : PriorityLevel PreemptCap PreemptVuln 
        h->add_property("priorityLevel", &this->m_PriorityLevel, m_PriorityLevelFlag);
        h->add_property("preemptCap", &this->m_PreemptCap, m_PreemptCapFlag);
        h->add_property("preemptVuln", &this->m_PreemptVuln, m_PreemptVulnFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const Arp& obj)
    {
        
        o << "PriorityLevel : " << obj.m_PriorityLevel << std::endl;

        o << "PreemptCap : " << obj.m_PreemptCap << std::endl;

        o << "PreemptVuln : " << obj.m_PreemptVuln << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// Arp members vars : PriorityLevel PreemptCap PreemptVuln 

    int32_t  getPriorityLevel() const
    {
        return m_PriorityLevel;
    }
    void  setPriorityLevel(int32_t const value)
    {
        m_PriorityLevel = value;
    }

PreemptionCapability  getPreemptCap() const
    {
        return m_PreemptCap;
    }
    void  setPreemptCap(PreemptionCapability const& value)
    {
        m_PreemptCap = value;
    }

PreemptionVulnerability  getPreemptVuln() const
    {
        return m_PreemptVuln;
    }
    void  setPreemptVuln(PreemptionVulnerability const& value)
    {
        m_PreemptVuln = value;
    }



    
public:
    int32_t m_PriorityLevel;
    
    unsigned m_PriorityLevelFlag;
    PreemptionCapability m_PreemptCap;
    
    unsigned m_PreemptCapFlag;
    PreemptionVulnerability m_PreemptVuln;
    
    unsigned m_PreemptVulnFlag;
  
};
}
}
}
}

#endif /* Arp_H_ */
