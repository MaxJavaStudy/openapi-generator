/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SdmSubscription.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SdmSubscription_H_
#define SdmSubscription_H_

#include "CSB_JsonParser.h"
#include "ContextInfo.h"
#include "PlmnId.h"
#include "Snssai.h"
#include "SubscriptionDataSets.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SdmSubscription : public jsonParser::jsonParser<SdmSubscription> {
public:
  explicit SdmSubscription() {
    // constructor
    m_NfInstanceId = "";

    m_NfInstanceIdFlag = staticjson::Flags::Default;
    m_NfInstanceIdOutFlag.reset(new unsigned);
    *m_NfInstanceIdOutFlag.get() = 0;
    m_ImplicitUnsubscribe = false;

    m_ImplicitUnsubscribeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ImplicitUnsubscribeOutFlag.reset(new unsigned);
    *m_ImplicitUnsubscribeOutFlag.get() = 0;
    m_Expires = "";

    m_ExpiresFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ExpiresOutFlag.reset(new unsigned);
    *m_ExpiresOutFlag.get() = 0;
    m_CallbackReference = "";

    m_CallbackReferenceFlag = staticjson::Flags::Default;
    m_CallbackReferenceOutFlag.reset(new unsigned);
    *m_CallbackReferenceOutFlag.get() = 0;
    m_AmfServiceName = "";

    m_AmfServiceNameFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AmfServiceNameOutFlag.reset(new unsigned);
    *m_AmfServiceNameOutFlag.get() = 0;

    m_MonitoredResourceUrisFlag = staticjson::Flags::Default;
    m_MonitoredResourceUrisOutFlag.reset(new unsigned);
    *m_MonitoredResourceUrisOutFlag.get() = 0;

    m_SingleNssaiFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SingleNssaiOutFlag.reset(new unsigned);
    *m_SingleNssaiOutFlag.get() = 0;
    m_Dnn = "";

    m_DnnFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DnnOutFlag.reset(new unsigned);
    *m_DnnOutFlag.get() = 0;
    m_SubscriptionId = "";

    m_SubscriptionIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SubscriptionIdOutFlag.reset(new unsigned);
    *m_SubscriptionIdOutFlag.get() = 0;

    m_PlmnIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PlmnIdOutFlag.reset(new unsigned);
    *m_PlmnIdOutFlag.get() = 0;
    m_ImmediateReport = false;

    m_ImmediateReportFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ImmediateReportOutFlag.reset(new unsigned);
    *m_ImmediateReportOutFlag.get() = 0;

    m_ReportFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ReportOutFlag.reset(new unsigned);
    *m_ReportOutFlag.get() = 0;
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SupportedFeaturesOutFlag.reset(new unsigned);
    *m_SupportedFeaturesOutFlag.get() = 0;

    m_ContextInfoFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ContextInfoOutFlag.reset(new unsigned);
    *m_ContextInfoOutFlag.get() = 0;
  };
  virtual ~SdmSubscription(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : NfInstanceId ImplicitUnsubscribe
    // Expires CallbackReference AmfServiceName MonitoredResourceUris
    // SingleNssai Dnn SubscriptionId PlmnId ImmediateReport Report
    // SupportedFeatures ContextInfo
    h->add_property("nfInstanceId", &this->m_NfInstanceId, m_NfInstanceIdFlag);
    h->add_optional_property(
        "implicitUnsubscribe", &this->m_ImplicitUnsubscribe,
        m_ImplicitUnsubscribeFlag, m_ImplicitUnsubscribeOutFlag);
    h->add_optional_property("expires", &this->m_Expires, m_ExpiresFlag,
                             m_ExpiresOutFlag);
    h->add_property("callbackReference", &this->m_CallbackReference,
                    m_CallbackReferenceFlag);
    h->add_optional_property("amfServiceName", &this->m_AmfServiceName,
                             m_AmfServiceNameFlag, m_AmfServiceNameOutFlag);
    h->add_property("monitoredResourceUris", &this->m_MonitoredResourceUris,
                    m_MonitoredResourceUrisFlag);
    h->add_optional_property("singleNssai", &this->m_SingleNssai,
                             m_SingleNssaiFlag, m_SingleNssaiOutFlag);
    h->add_optional_property("dnn", &this->m_Dnn, m_DnnFlag, m_DnnOutFlag);
    h->add_optional_property("subscriptionId", &this->m_SubscriptionId,
                             m_SubscriptionIdFlag, m_SubscriptionIdOutFlag);
    h->add_optional_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag,
                             m_PlmnIdOutFlag);
    h->add_optional_property("immediateReport", &this->m_ImmediateReport,
                             m_ImmediateReportFlag, m_ImmediateReportOutFlag);
    h->add_optional_property("report", &this->m_Report, m_ReportFlag,
                             m_ReportOutFlag);
    h->add_optional_property("supportedFeatures", &this->m_SupportedFeatures,
                             m_SupportedFeaturesFlag,
                             m_SupportedFeaturesOutFlag);
    h->add_optional_property("contextInfo", &this->m_ContextInfo,
                             m_ContextInfoFlag, m_ContextInfoOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const SdmSubscription &obj) {

    o << "NfInstanceId : " << obj.m_NfInstanceId << std::endl;

    o << "ImplicitUnsubscribe, optional flag is : "
      << *m_ImplicitUnsubscribeOutFlag
      << ", content is : " << obj.m_ImplicitUnsubscribe << std::endl;

    o << "Expires, optional flag is : " << *m_ExpiresOutFlag
      << ", content is : " << obj.m_Expires << std::endl;

    o << "CallbackReference : " << obj.m_CallbackReference << std::endl;

    o << "AmfServiceName, optional flag is : " << *m_AmfServiceNameOutFlag
      << ", content is : " << obj.m_AmfServiceName << std::endl;
    o << convert2string(std::string("MonitoredResourceUris"),
                        obj.m_MonitoredResourceUris)
      << std::endl;

    o << "SingleNssai, optional flag is : " << *m_SingleNssaiOutFlag
      << ", content is : " << obj.m_SingleNssai << std::endl;

    o << "Dnn, optional flag is : " << *m_DnnOutFlag
      << ", content is : " << obj.m_Dnn << std::endl;

    o << "SubscriptionId, optional flag is : " << *m_SubscriptionIdOutFlag
      << ", content is : " << obj.m_SubscriptionId << std::endl;

    o << "PlmnId, optional flag is : " << *m_PlmnIdOutFlag
      << ", content is : " << obj.m_PlmnId << std::endl;

    o << "ImmediateReport, optional flag is : " << *m_ImmediateReportOutFlag
      << ", content is : " << obj.m_ImmediateReport << std::endl;

    o << "Report, optional flag is : " << *m_ReportOutFlag
      << ", content is : " << obj.m_Report << std::endl;

    o << "SupportedFeatures, optional flag is : " << *m_SupportedFeaturesOutFlag
      << ", content is : " << obj.m_SupportedFeatures << std::endl;

    o << "ContextInfo, optional flag is : " << *m_ContextInfoOutFlag
      << ", content is : " << obj.m_ContextInfo << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SdmSubscription members vars : NfInstanceId ImplicitUnsubscribe Expires
  /// CallbackReference AmfServiceName MonitoredResourceUris SingleNssai Dnn
  /// SubscriptionId PlmnId ImmediateReport Report SupportedFeatures ContextInfo

  std::string getNfInstanceId() const { return m_NfInstanceId; }
  void setNfInstanceId(std::string const &value) { m_NfInstanceId = value; }

  bool isImplicitUnsubscribe() const { return m_ImplicitUnsubscribe; }
  void setImplicitUnsubscribe(bool const value) {
    m_ImplicitUnsubscribe = value;
  }

  std::string getExpires() const { return m_Expires; }
  void setExpires(std::string const &value) { m_Expires = value; }

  std::string getCallbackReference() const { return m_CallbackReference; }
  void setCallbackReference(std::string const &value) {
    m_CallbackReference = value;
  }

  std::string getAmfServiceName() const { return m_AmfServiceName; }
  void setAmfServiceName(std::string const &value) { m_AmfServiceName = value; }

  std::vector<std::string> &getMonitoredResourceUris() {
    return m_MonitoredResourceUris;
  }
  void setMonitoredResourceUris(std::vector<std::string> const &value) {
    m_MonitoredResourceUris = value;
  }

  Snssai getSingleNssai() const { return m_SingleNssai; }
  void setSingleNssai(Snssai const &value) { m_SingleNssai = value; }

  std::string getDnn() const { return m_Dnn; }
  void setDnn(std::string const &value) { m_Dnn = value; }

  std::string getSubscriptionId() const { return m_SubscriptionId; }
  void setSubscriptionId(std::string const &value) { m_SubscriptionId = value; }

  PlmnId getPlmnId() const { return m_PlmnId; }
  void setPlmnId(PlmnId const &value) { m_PlmnId = value; }

  bool isImmediateReport() const { return m_ImmediateReport; }
  void setImmediateReport(bool const value) { m_ImmediateReport = value; }

  SubscriptionDataSets getReport() const { return m_Report; }
  void setReport(SubscriptionDataSets const &value) { m_Report = value; }

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

  ContextInfo getContextInfo() const { return m_ContextInfo; }
  void setContextInfo(ContextInfo const &value) { m_ContextInfo = value; }

public:
  std::string m_NfInstanceId;

  unsigned m_NfInstanceIdFlag;
  shared_ptr<unsigned> m_NfInstanceIdOutFlag;
  bool m_ImplicitUnsubscribe;

  unsigned m_ImplicitUnsubscribeFlag;
  shared_ptr<unsigned> m_ImplicitUnsubscribeOutFlag;
  std::string m_Expires;

  unsigned m_ExpiresFlag;
  shared_ptr<unsigned> m_ExpiresOutFlag;
  std::string m_CallbackReference;

  unsigned m_CallbackReferenceFlag;
  shared_ptr<unsigned> m_CallbackReferenceOutFlag;
  std::string m_AmfServiceName;

  unsigned m_AmfServiceNameFlag;
  shared_ptr<unsigned> m_AmfServiceNameOutFlag;
  std::vector<std::string> m_MonitoredResourceUris;

  unsigned m_MonitoredResourceUrisFlag;
  shared_ptr<unsigned> m_MonitoredResourceUrisOutFlag;
  Snssai m_SingleNssai;

  unsigned m_SingleNssaiFlag;
  shared_ptr<unsigned> m_SingleNssaiOutFlag;
  std::string m_Dnn;

  unsigned m_DnnFlag;
  shared_ptr<unsigned> m_DnnOutFlag;
  std::string m_SubscriptionId;

  unsigned m_SubscriptionIdFlag;
  shared_ptr<unsigned> m_SubscriptionIdOutFlag;
  PlmnId m_PlmnId;

  unsigned m_PlmnIdFlag;
  shared_ptr<unsigned> m_PlmnIdOutFlag;
  bool m_ImmediateReport;

  unsigned m_ImmediateReportFlag;
  shared_ptr<unsigned> m_ImmediateReportOutFlag;
  SubscriptionDataSets m_Report;

  unsigned m_ReportFlag;
  shared_ptr<unsigned> m_ReportOutFlag;
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
  shared_ptr<unsigned> m_SupportedFeaturesOutFlag;
  ContextInfo m_ContextInfo;

  unsigned m_ContextInfoFlag;
  shared_ptr<unsigned> m_ContextInfoOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SdmSubscription_H_ */
