/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AcsInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AcsInfo::AcsInfo()
{
    m_AcsUrl = utility::conversions::to_string_t("");
    m_AcsUrlIsSet = false;
    m_AcsIpv4Addr = utility::conversions::to_string_t("");
    m_AcsIpv4AddrIsSet = false;
    m_AcsIpv6Addr = utility::conversions::to_string_t("");
    m_AcsIpv6AddrIsSet = false;
}

AcsInfo::~AcsInfo()
{
}

void AcsInfo::validate()
{
    // TODO: implement validation
}

web::json::value AcsInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AcsUrlIsSet)
    {
        val[utility::conversions::to_string_t("acsUrl")] = ModelBase::toJson(m_AcsUrl);
    }
    if(m_AcsIpv4AddrIsSet)
    {
        val[utility::conversions::to_string_t("acsIpv4Addr")] = ModelBase::toJson(m_AcsIpv4Addr);
    }
    if(m_AcsIpv6AddrIsSet)
    {
        val[utility::conversions::to_string_t("acsIpv6Addr")] = ModelBase::toJson(m_AcsIpv6Addr);
    }

    return val;
}

bool AcsInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("acsUrl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acsUrl"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_acsUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_acsUrl);
            setAcsUrl(refVal_acsUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acsIpv4Addr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acsIpv4Addr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_acsIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_acsIpv4Addr);
            setAcsIpv4Addr(refVal_acsIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acsIpv6Addr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acsIpv6Addr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_acsIpv6Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_acsIpv6Addr);
            setAcsIpv6Addr(refVal_acsIpv6Addr);
        }
    }
    return ok;
}

void AcsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AcsUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acsUrl"), m_AcsUrl));
    }
    if(m_AcsIpv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acsIpv4Addr"), m_AcsIpv4Addr));
    }
    if(m_AcsIpv6AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acsIpv6Addr"), m_AcsIpv6Addr));
    }
}

bool AcsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("acsUrl")))
    {
        utility::string_t refVal_acsUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acsUrl")), refVal_acsUrl );
        setAcsUrl(refVal_acsUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acsIpv4Addr")))
    {
        utility::string_t refVal_acsIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acsIpv4Addr")), refVal_acsIpv4Addr );
        setAcsIpv4Addr(refVal_acsIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acsIpv6Addr")))
    {
        utility::string_t refVal_acsIpv6Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acsIpv6Addr")), refVal_acsIpv6Addr );
        setAcsIpv6Addr(refVal_acsIpv6Addr);
    }
    return ok;
}

utility::string_t AcsInfo::getAcsUrl() const
{
    return m_AcsUrl;
}

void AcsInfo::setAcsUrl(const utility::string_t& value)
{
    m_AcsUrl = value;
    m_AcsUrlIsSet = true;
}

bool AcsInfo::acsUrlIsSet() const
{
    return m_AcsUrlIsSet;
}

void AcsInfo::unsetAcsUrl()
{
    m_AcsUrlIsSet = false;
}
utility::string_t AcsInfo::getAcsIpv4Addr() const
{
    return m_AcsIpv4Addr;
}

void AcsInfo::setAcsIpv4Addr(const utility::string_t& value)
{
    m_AcsIpv4Addr = value;
    m_AcsIpv4AddrIsSet = true;
}

bool AcsInfo::acsIpv4AddrIsSet() const
{
    return m_AcsIpv4AddrIsSet;
}

void AcsInfo::unsetAcsIpv4Addr()
{
    m_AcsIpv4AddrIsSet = false;
}
utility::string_t AcsInfo::getAcsIpv6Addr() const
{
    return m_AcsIpv6Addr;
}

void AcsInfo::setAcsIpv6Addr(const utility::string_t& value)
{
    m_AcsIpv6Addr = value;
    m_AcsIpv6AddrIsSet = true;
}

bool AcsInfo::acsIpv6AddrIsSet() const
{
    return m_AcsIpv6AddrIsSet;
}

void AcsInfo::unsetAcsIpv6Addr()
{
    m_AcsIpv6AddrIsSet = false;
}
}
}
}
}


