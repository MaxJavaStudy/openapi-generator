/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DnnConfiguration.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_DnnConfiguration_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_DnnConfiguration_H_


#include "../ModelBase.h"

#include "Ambr.h"
#include "FrameRouteInfo.h"
#include "IpAddress.h"
#include "NiddInformation.h"
#include "SubscribedDefaultQos.h"
#include "PduSessionContinuityInd.h"
#include "UpSecurity.h"
#include <cpprest/details/basic_types.h>
#include "SscModes.h"
#include "AcsInfo.h"
#include "PduSessionTypes.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  DnnConfiguration
    : public ModelBase
{
public:
    DnnConfiguration();
    virtual ~DnnConfiguration();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DnnConfiguration members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PduSessionTypes> getPduSessionTypes() const;
    bool pduSessionTypesIsSet() const;
    void unsetPduSessionTypes();

    void setPduSessionTypes(const std::shared_ptr<PduSessionTypes>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SscModes> getSscModes() const;
    bool sscModesIsSet() const;
    void unsetSscModes();

    void setSscModes(const std::shared_ptr<SscModes>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIwkEpsInd() const;
    bool iwkEpsIndIsSet() const;
    void unsetIwkEpsInd();

    void setIwkEpsInd(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SubscribedDefaultQos> getR5gQosProfile() const;
    bool r5gQosProfileIsSet() const;
    void unsetr_5gQosProfile();

    void setR5gQosProfile(const std::shared_ptr<SubscribedDefaultQos>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ambr> getSessionAmbr() const;
    bool sessionAmbrIsSet() const;
    void unsetSessionAmbr();

    void setSessionAmbr(const std::shared_ptr<Ambr>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getR3gppChargingCharacteristics() const;
    bool r3gppChargingCharacteristicsIsSet() const;
    void unsetr_3gppChargingCharacteristics();

    void setR3gppChargingCharacteristics(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<IpAddress>>& getStaticIpAddress();
    bool staticIpAddressIsSet() const;
    void unsetStaticIpAddress();

    void setStaticIpAddress(const std::vector<std::shared_ptr<IpAddress>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UpSecurity> getUpSecurity() const;
    bool upSecurityIsSet() const;
    void unsetUpSecurity();

    void setUpSecurity(const std::shared_ptr<UpSecurity>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PduSessionContinuityInd> getPduSessionContinuityInd() const;
    bool pduSessionContinuityIndIsSet() const;
    void unsetPduSessionContinuityInd();

    void setPduSessionContinuityInd(const std::shared_ptr<PduSessionContinuityInd>& value);

    /// <summary>
    /// Identity of the NEF
    /// </summary>
    utility::string_t getNiddNefId() const;
    bool niddNefIdIsSet() const;
    void unsetNiddNefId();

    void setNiddNefId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NiddInformation> getNiddInfo() const;
    bool niddInfoIsSet() const;
    void unsetNiddInfo();

    void setNiddInfo(const std::shared_ptr<NiddInformation>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isRedundantSessionAllowed() const;
    bool redundantSessionAllowedIsSet() const;
    void unsetRedundantSessionAllowed();

    void setRedundantSessionAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AcsInfo> getAcsInfo() const;
    bool acsInfoIsSet() const;
    void unsetAcsInfo();

    void setAcsInfo(const std::shared_ptr<AcsInfo>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FrameRouteInfo>>& getIpv4FrameRouteList();
    bool ipv4FrameRouteListIsSet() const;
    void unsetIpv4FrameRouteList();

    void setIpv4FrameRouteList(const std::vector<std::shared_ptr<FrameRouteInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FrameRouteInfo>>& getIpv6FrameRouteList();
    bool ipv6FrameRouteListIsSet() const;
    void unsetIpv6FrameRouteList();

    void setIpv6FrameRouteList(const std::vector<std::shared_ptr<FrameRouteInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isAtsssAllowed() const;
    bool atsssAllowedIsSet() const;
    void unsetAtsssAllowed();

    void setAtsssAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSecondaryAuth() const;
    bool secondaryAuthIsSet() const;
    void unsetSecondaryAuth();

    void setSecondaryAuth(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isDnAaaIpAddressAllocation() const;
    bool dnAaaIpAddressAllocationIsSet() const;
    void unsetDnAaaIpAddressAllocation();

    void setDnAaaIpAddressAllocation(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<IpAddress> getDnAaaAddress() const;
    bool dnAaaAddressIsSet() const;
    void unsetDnAaaAddress();

    void setDnAaaAddress(const std::shared_ptr<IpAddress>& value);


protected:
    std::shared_ptr<PduSessionTypes> m_PduSessionTypes;
    bool m_PduSessionTypesIsSet;
    std::shared_ptr<SscModes> m_SscModes;
    bool m_SscModesIsSet;
    bool m_IwkEpsInd;
    bool m_IwkEpsIndIsSet;
    std::shared_ptr<SubscribedDefaultQos> m_r_5gQosProfile;
    bool m_r_5gQosProfileIsSet;
    std::shared_ptr<Ambr> m_SessionAmbr;
    bool m_SessionAmbrIsSet;
    utility::string_t m_r_3gppChargingCharacteristics;
    bool m_r_3gppChargingCharacteristicsIsSet;
    std::vector<std::shared_ptr<IpAddress>> m_StaticIpAddress;
    bool m_StaticIpAddressIsSet;
    std::shared_ptr<UpSecurity> m_UpSecurity;
    bool m_UpSecurityIsSet;
    std::shared_ptr<PduSessionContinuityInd> m_PduSessionContinuityInd;
    bool m_PduSessionContinuityIndIsSet;
    utility::string_t m_NiddNefId;
    bool m_NiddNefIdIsSet;
    std::shared_ptr<NiddInformation> m_NiddInfo;
    bool m_NiddInfoIsSet;
    bool m_RedundantSessionAllowed;
    bool m_RedundantSessionAllowedIsSet;
    std::shared_ptr<AcsInfo> m_AcsInfo;
    bool m_AcsInfoIsSet;
    std::vector<std::shared_ptr<FrameRouteInfo>> m_Ipv4FrameRouteList;
    bool m_Ipv4FrameRouteListIsSet;
    std::vector<std::shared_ptr<FrameRouteInfo>> m_Ipv6FrameRouteList;
    bool m_Ipv6FrameRouteListIsSet;
    bool m_AtsssAllowed;
    bool m_AtsssAllowedIsSet;
    bool m_SecondaryAuth;
    bool m_SecondaryAuthIsSet;
    bool m_DnAaaIpAddressAllocation;
    bool m_DnAaaIpAddressAllocationIsSet;
    std::shared_ptr<IpAddress> m_DnAaaAddress;
    bool m_DnAaaAddressIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_DnnConfiguration_H_ */
