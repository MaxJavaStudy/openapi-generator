/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AcknowledgeInfo.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef AcknowledgeInfo_H_
#define AcknowledgeInfo_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AcknowledgeInfo : public jsonParser::jsonParser<AcknowledgeInfo> {
public:
  explicit AcknowledgeInfo() {
    // constructor
    m_SorMacIue = "";

    m_SorMacIueFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SorMacIueOutFlag.reset(new unsigned);
    *m_SorMacIueOutFlag.get() = 0;
    m_UpuMacIue = "";

    m_UpuMacIueFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UpuMacIueOutFlag.reset(new unsigned);
    *m_UpuMacIueOutFlag.get() = 0;
    m_SecuredPacket = "";

    m_SecuredPacketFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SecuredPacketOutFlag.reset(new unsigned);
    *m_SecuredPacketOutFlag.get() = 0;
    m_ProvisioningTime = "";

    m_ProvisioningTimeFlag = staticjson::Flags::Default;
    m_ProvisioningTimeOutFlag.reset(new unsigned);
    *m_ProvisioningTimeOutFlag.get() = 0;
  };
  virtual ~AcknowledgeInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SorMacIue UpuMacIue SecuredPacket
    // ProvisioningTime
    h->add_optional_property("sorMacIue", &this->m_SorMacIue, m_SorMacIueFlag,
                             m_SorMacIueOutFlag);
    h->add_optional_property("upuMacIue", &this->m_UpuMacIue, m_UpuMacIueFlag,
                             m_UpuMacIueOutFlag);
    h->add_optional_property("securedPacket", &this->m_SecuredPacket,
                             m_SecuredPacketFlag, m_SecuredPacketOutFlag);
    h->add_property("provisioningTime", &this->m_ProvisioningTime,
                    m_ProvisioningTimeFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const AcknowledgeInfo &obj) {

    o << "SorMacIue, optional flag is : " << *m_SorMacIueOutFlag
      << ", content is : " << obj.m_SorMacIue << std::endl;

    o << "UpuMacIue, optional flag is : " << *m_UpuMacIueOutFlag
      << ", content is : " << obj.m_UpuMacIue << std::endl;

    o << "SecuredPacket, optional flag is : " << *m_SecuredPacketOutFlag
      << ", content is : " << obj.m_SecuredPacket << std::endl;

    o << "ProvisioningTime : " << obj.m_ProvisioningTime << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// AcknowledgeInfo members vars : SorMacIue UpuMacIue SecuredPacket
  /// ProvisioningTime

  std::string getSorMacIue() const { return m_SorMacIue; }
  void setSorMacIue(std::string const &value) { m_SorMacIue = value; }

  std::string getUpuMacIue() const { return m_UpuMacIue; }
  void setUpuMacIue(std::string const &value) { m_UpuMacIue = value; }

  std::string getSecuredPacket() const { return m_SecuredPacket; }
  void setSecuredPacket(std::string const &value) { m_SecuredPacket = value; }

  std::string getProvisioningTime() const { return m_ProvisioningTime; }
  void setProvisioningTime(std::string const &value) {
    m_ProvisioningTime = value;
  }

public:
  std::string m_SorMacIue;

  unsigned m_SorMacIueFlag;
  shared_ptr<unsigned> m_SorMacIueOutFlag;
  std::string m_UpuMacIue;

  unsigned m_UpuMacIueFlag;
  shared_ptr<unsigned> m_UpuMacIueOutFlag;
  std::string m_SecuredPacket;

  unsigned m_SecuredPacketFlag;
  shared_ptr<unsigned> m_SecuredPacketOutFlag;
  std::string m_ProvisioningTime;

  unsigned m_ProvisioningTimeFlag;
  shared_ptr<unsigned> m_ProvisioningTimeOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AcknowledgeInfo_H_ */
