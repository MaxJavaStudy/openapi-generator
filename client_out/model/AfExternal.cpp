/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AfExternal.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AfExternal::AfExternal()
{
    m_AfId = utility::conversions::to_string_t("");
    m_AfIdIsSet = false;
    m_AllowedGeographicAreaIsSet = false;
    m_PrivacyCheckRelatedActionIsSet = false;
    m_ValidTimePeriodIsSet = false;
}

AfExternal::~AfExternal()
{
}

void AfExternal::validate()
{
    // TODO: implement validation
}

web::json::value AfExternal::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AfIdIsSet)
    {
        val[utility::conversions::to_string_t("afId")] = ModelBase::toJson(m_AfId);
    }
    if(m_AllowedGeographicAreaIsSet)
    {
        val[utility::conversions::to_string_t("allowedGeographicArea")] = ModelBase::toJson(m_AllowedGeographicArea);
    }
    if(m_PrivacyCheckRelatedActionIsSet)
    {
        val[utility::conversions::to_string_t("privacyCheckRelatedAction")] = ModelBase::toJson(m_PrivacyCheckRelatedAction);
    }
    if(m_ValidTimePeriodIsSet)
    {
        val[utility::conversions::to_string_t("validTimePeriod")] = ModelBase::toJson(m_ValidTimePeriod);
    }

    return val;
}

bool AfExternal::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("afId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("afId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_afId;
            ok &= ModelBase::fromJson(fieldValue, refVal_afId);
            setAfId(refVal_afId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedGeographicArea")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowedGeographicArea"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GeographicArea>> refVal_allowedGeographicArea;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowedGeographicArea);
            setAllowedGeographicArea(refVal_allowedGeographicArea);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("privacyCheckRelatedAction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("privacyCheckRelatedAction"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PrivacyCheckRelatedAction> refVal_privacyCheckRelatedAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_privacyCheckRelatedAction);
            setPrivacyCheckRelatedAction(refVal_privacyCheckRelatedAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validTimePeriod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validTimePeriod"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ValidTimePeriod> refVal_validTimePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_validTimePeriod);
            setValidTimePeriod(refVal_validTimePeriod);
        }
    }
    return ok;
}

void AfExternal::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("afId"), m_AfId));
    }
    if(m_AllowedGeographicAreaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowedGeographicArea"), m_AllowedGeographicArea));
    }
    if(m_PrivacyCheckRelatedActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("privacyCheckRelatedAction"), m_PrivacyCheckRelatedAction));
    }
    if(m_ValidTimePeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validTimePeriod"), m_ValidTimePeriod));
    }
}

bool AfExternal::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("afId")))
    {
        utility::string_t refVal_afId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("afId")), refVal_afId );
        setAfId(refVal_afId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedGeographicArea")))
    {
        std::vector<std::shared_ptr<GeographicArea>> refVal_allowedGeographicArea;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowedGeographicArea")), refVal_allowedGeographicArea );
        setAllowedGeographicArea(refVal_allowedGeographicArea);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("privacyCheckRelatedAction")))
    {
        std::shared_ptr<PrivacyCheckRelatedAction> refVal_privacyCheckRelatedAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("privacyCheckRelatedAction")), refVal_privacyCheckRelatedAction );
        setPrivacyCheckRelatedAction(refVal_privacyCheckRelatedAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validTimePeriod")))
    {
        std::shared_ptr<ValidTimePeriod> refVal_validTimePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validTimePeriod")), refVal_validTimePeriod );
        setValidTimePeriod(refVal_validTimePeriod);
    }
    return ok;
}

utility::string_t AfExternal::getAfId() const
{
    return m_AfId;
}

void AfExternal::setAfId(const utility::string_t& value)
{
    m_AfId = value;
    m_AfIdIsSet = true;
}

bool AfExternal::afIdIsSet() const
{
    return m_AfIdIsSet;
}

void AfExternal::unsetAfId()
{
    m_AfIdIsSet = false;
}
std::vector<std::shared_ptr<GeographicArea>>& AfExternal::getAllowedGeographicArea()
{
    return m_AllowedGeographicArea;
}

void AfExternal::setAllowedGeographicArea(const std::vector<std::shared_ptr<GeographicArea>>& value)
{
    m_AllowedGeographicArea = value;
    m_AllowedGeographicAreaIsSet = true;
}

bool AfExternal::allowedGeographicAreaIsSet() const
{
    return m_AllowedGeographicAreaIsSet;
}

void AfExternal::unsetAllowedGeographicArea()
{
    m_AllowedGeographicAreaIsSet = false;
}
std::shared_ptr<PrivacyCheckRelatedAction> AfExternal::getPrivacyCheckRelatedAction() const
{
    return m_PrivacyCheckRelatedAction;
}

void AfExternal::setPrivacyCheckRelatedAction(const std::shared_ptr<PrivacyCheckRelatedAction>& value)
{
    m_PrivacyCheckRelatedAction = value;
    m_PrivacyCheckRelatedActionIsSet = true;
}

bool AfExternal::privacyCheckRelatedActionIsSet() const
{
    return m_PrivacyCheckRelatedActionIsSet;
}

void AfExternal::unsetPrivacyCheckRelatedAction()
{
    m_PrivacyCheckRelatedActionIsSet = false;
}
std::shared_ptr<ValidTimePeriod> AfExternal::getValidTimePeriod() const
{
    return m_ValidTimePeriod;
}

void AfExternal::setValidTimePeriod(const std::shared_ptr<ValidTimePeriod>& value)
{
    m_ValidTimePeriod = value;
    m_ValidTimePeriodIsSet = true;
}

bool AfExternal::validTimePeriodIsSet() const
{
    return m_ValidTimePeriodIsSet;
}

void AfExternal::unsetValidTimePeriod()
{
    m_ValidTimePeriodIsSet = false;
}
}
}
}
}


