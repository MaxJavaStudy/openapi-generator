/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DnnInfo.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef DnnInfo_H_
#define DnnInfo_H_

#include "CSB_JsonParser.h"
#include "NokiaDnnInfoAttributes.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class DnnInfo : public jsonParser::jsonParser<DnnInfo> {
public:
  explicit DnnInfo() {
    // constructor
    m_Dnn = "";

    m_DnnFlag = staticjson::Flags::Default;
    m_DnnOutFlag.reset(new unsigned);
    *m_DnnOutFlag.get() = 0;
    m_DefaultDnnIndicator = false;

    m_DefaultDnnIndicatorFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DefaultDnnIndicatorOutFlag.reset(new unsigned);
    *m_DefaultDnnIndicatorOutFlag.get() = 0;
    m_LboRoamingAllowed = false;

    m_LboRoamingAllowedFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LboRoamingAllowedOutFlag.reset(new unsigned);
    *m_LboRoamingAllowedOutFlag.get() = 0;
    m_IwkEpsInd = false;

    m_IwkEpsIndFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_IwkEpsIndOutFlag.reset(new unsigned);
    *m_IwkEpsIndOutFlag.get() = 0;
    m_DnnBarred = false;

    m_DnnBarredFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DnnBarredOutFlag.reset(new unsigned);
    *m_DnnBarredOutFlag.get() = 0;
    m_LadnIndicator = false;

    m_LadnIndicatorFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LadnIndicatorOutFlag.reset(new unsigned);
    *m_LadnIndicatorOutFlag.get() = 0;

    m_VendorSpecific_51450Flag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_VendorSpecific_51450OutFlag.reset(new unsigned);
    *m_VendorSpecific_51450OutFlag.get() = 0;
  };
  virtual ~DnnInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Dnn DefaultDnnIndicator
    // LboRoamingAllowed IwkEpsInd DnnBarred LadnIndicator VendorSpecific_51450
    h->add_property("dnn", &this->m_Dnn, m_DnnFlag);
    h->add_optional_property(
        "defaultDnnIndicator", &this->m_DefaultDnnIndicator,
        m_DefaultDnnIndicatorFlag, m_DefaultDnnIndicatorOutFlag);
    h->add_optional_property("lboRoamingAllowed", &this->m_LboRoamingAllowed,
                             m_LboRoamingAllowedFlag,
                             m_LboRoamingAllowedOutFlag);
    h->add_optional_property("iwkEpsInd", &this->m_IwkEpsInd, m_IwkEpsIndFlag,
                             m_IwkEpsIndOutFlag);
    h->add_optional_property("dnnBarred", &this->m_DnnBarred, m_DnnBarredFlag,
                             m_DnnBarredOutFlag);
    h->add_optional_property("ladnIndicator", &this->m_LadnIndicator,
                             m_LadnIndicatorFlag, m_LadnIndicatorOutFlag);
    h->add_optional_property(
        "vendorSpecific51450", &this->m_VendorSpecific_51450,
        m_VendorSpecific_51450Flag, m_VendorSpecific_51450OutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const DnnInfo &obj) {

    o << "Dnn : " << obj.m_Dnn << std::endl;

    o << "DefaultDnnIndicator, optional flag is : "
      << *m_DefaultDnnIndicatorOutFlag
      << ", content is : " << obj.m_DefaultDnnIndicator << std::endl;

    o << "LboRoamingAllowed, optional flag is : " << *m_LboRoamingAllowedOutFlag
      << ", content is : " << obj.m_LboRoamingAllowed << std::endl;

    o << "IwkEpsInd, optional flag is : " << *m_IwkEpsIndOutFlag
      << ", content is : " << obj.m_IwkEpsInd << std::endl;

    o << "DnnBarred, optional flag is : " << *m_DnnBarredOutFlag
      << ", content is : " << obj.m_DnnBarred << std::endl;

    o << "LadnIndicator, optional flag is : " << *m_LadnIndicatorOutFlag
      << ", content is : " << obj.m_LadnIndicator << std::endl;

    o << "VendorSpecific_51450, optional flag is : "
      << *m_VendorSpecific_51450OutFlag
      << ", content is : " << obj.m_VendorSpecific_51450 << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// DnnInfo members vars : Dnn DefaultDnnIndicator LboRoamingAllowed IwkEpsInd
  /// DnnBarred LadnIndicator VendorSpecific_51450

  std::string getDnn() const { return m_Dnn; }
  void setDnn(std::string const &value) { m_Dnn = value; }

  bool isDefaultDnnIndicator() const { return m_DefaultDnnIndicator; }
  void setDefaultDnnIndicator(bool const value) {
    m_DefaultDnnIndicator = value;
  }

  bool isLboRoamingAllowed() const { return m_LboRoamingAllowed; }
  void setLboRoamingAllowed(bool const value) { m_LboRoamingAllowed = value; }

  bool isIwkEpsInd() const { return m_IwkEpsInd; }
  void setIwkEpsInd(bool const value) { m_IwkEpsInd = value; }

  bool isDnnBarred() const { return m_DnnBarred; }
  void setDnnBarred(bool const value) { m_DnnBarred = value; }

  bool isLadnIndicator() const { return m_LadnIndicator; }
  void setLadnIndicator(bool const value) { m_LadnIndicator = value; }

  NokiaDnnInfoAttributes getVendorSpecific51450() const {
    return m_VendorSpecific_51450;
  }
  void setVendorSpecific51450(NokiaDnnInfoAttributes const &value) {
    m_VendorSpecific_51450 = value;
  }

public:
  std::string m_Dnn;

  unsigned m_DnnFlag;
  shared_ptr<unsigned> m_DnnOutFlag;
  bool m_DefaultDnnIndicator;

  unsigned m_DefaultDnnIndicatorFlag;
  shared_ptr<unsigned> m_DefaultDnnIndicatorOutFlag;
  bool m_LboRoamingAllowed;

  unsigned m_LboRoamingAllowedFlag;
  shared_ptr<unsigned> m_LboRoamingAllowedOutFlag;
  bool m_IwkEpsInd;

  unsigned m_IwkEpsIndFlag;
  shared_ptr<unsigned> m_IwkEpsIndOutFlag;
  bool m_DnnBarred;

  unsigned m_DnnBarredFlag;
  shared_ptr<unsigned> m_DnnBarredOutFlag;
  bool m_LadnIndicator;

  unsigned m_LadnIndicatorFlag;
  shared_ptr<unsigned> m_LadnIndicatorOutFlag;
  NokiaDnnInfoAttributes m_VendorSpecific_51450;

  unsigned m_VendorSpecific_51450Flag;
  shared_ptr<unsigned> m_VendorSpecific_51450OutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DnnInfo_H_ */
