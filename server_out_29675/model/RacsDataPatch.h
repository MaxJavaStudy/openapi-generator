/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RacsDataPatch.h
 *
 * Represents a modification of a UE radio capability data provided by the NF
 * service consumer.
 */

#ifndef RacsDataPatch_H_
#define RacsDataPatch_H_

#include "RacsConfigurationRm.h"
#include "jsonParser/jsonParser.hpp"
#include <map>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a modification of a UE radio capability data provided by the NF
/// service consumer.
/// </summary>
class RacsDataPatch : public jsonParser::jsonParser<RacsDataPatch> {
public:
  explicit RacsDataPatch() {
    // constructor

    m_RacsConfigsFlag = (staticjson::Flags::Optional);
  };
  virtual ~RacsDataPatch(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : RacsConfigs
    h->add_property("racsConfigs", &this->m_RacsConfigs, m_RacsConfigsFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const RacsDataPatch &obj) {
    o << convert2string(std::string("RacsConfigs"), obj.m_RacsConfigs)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// RacsDataPatch members vars : RacsConfigs

  std::map<std::string, RacsConfigurationRm> &getRacsConfigs() {
    return m_RacsConfigs;
  }
  void setRacsConfigs(std::map<std::string, RacsConfigurationRm> const &value) {
    m_RacsConfigs = value;
  }

public:
  std::map<std::string, RacsConfigurationRm> m_RacsConfigs;

  unsigned m_RacsConfigsFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RacsDataPatch_H_ */
