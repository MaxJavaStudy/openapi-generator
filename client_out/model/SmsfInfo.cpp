/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsfInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SmsfInfo::SmsfInfo()
{
    m_SmsfInstanceId = utility::conversions::to_string_t("");
    m_SmsfInstanceIdIsSet = false;
    m_PlmnIdIsSet = false;
}

SmsfInfo::~SmsfInfo()
{
}

void SmsfInfo::validate()
{
    // TODO: implement validation
}

web::json::value SmsfInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SmsfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t("smsfInstanceId")] = ModelBase::toJson(m_SmsfInstanceId);
    }
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t("plmnId")] = ModelBase::toJson(m_PlmnId);
    }

    return val;
}

bool SmsfInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("smsfInstanceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smsfInstanceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smsfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_smsfInstanceId);
            setSmsfInstanceId(refVal_smsfInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plmnId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plmnId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_plmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_plmnId);
            setPlmnId(refVal_plmnId);
        }
    }
    return ok;
}

void SmsfInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SmsfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smsfInstanceId"), m_SmsfInstanceId));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plmnId"), m_PlmnId));
    }
}

bool SmsfInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("smsfInstanceId")))
    {
        utility::string_t refVal_smsfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smsfInstanceId")), refVal_smsfInstanceId );
        setSmsfInstanceId(refVal_smsfInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plmnId")))
    {
        std::shared_ptr<PlmnId> refVal_plmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plmnId")), refVal_plmnId );
        setPlmnId(refVal_plmnId);
    }
    return ok;
}

utility::string_t SmsfInfo::getSmsfInstanceId() const
{
    return m_SmsfInstanceId;
}

void SmsfInfo::setSmsfInstanceId(const utility::string_t& value)
{
    m_SmsfInstanceId = value;
    m_SmsfInstanceIdIsSet = true;
}

bool SmsfInfo::smsfInstanceIdIsSet() const
{
    return m_SmsfInstanceIdIsSet;
}

void SmsfInfo::unsetSmsfInstanceId()
{
    m_SmsfInstanceIdIsSet = false;
}
std::shared_ptr<PlmnId> SmsfInfo::getPlmnId() const
{
    return m_PlmnId;
}

void SmsfInfo::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool SmsfInfo::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void SmsfInfo::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
}
}
}
}


