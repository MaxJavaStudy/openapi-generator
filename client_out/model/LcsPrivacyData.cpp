/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LcsPrivacyData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




LcsPrivacyData::LcsPrivacyData()
{
    m_LpiIsSet = false;
    m_UnrelatedClassIsSet = false;
    m_PlmnOperatorClassesIsSet = false;
}

LcsPrivacyData::~LcsPrivacyData()
{
}

void LcsPrivacyData::validate()
{
    // TODO: implement validation
}

web::json::value LcsPrivacyData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LpiIsSet)
    {
        val[utility::conversions::to_string_t("lpi")] = ModelBase::toJson(m_Lpi);
    }
    if(m_UnrelatedClassIsSet)
    {
        val[utility::conversions::to_string_t("unrelatedClass")] = ModelBase::toJson(m_UnrelatedClass);
    }
    if(m_PlmnOperatorClassesIsSet)
    {
        val[utility::conversions::to_string_t("plmnOperatorClasses")] = ModelBase::toJson(m_PlmnOperatorClasses);
    }

    return val;
}

bool LcsPrivacyData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("lpi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lpi"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Lpi> refVal_lpi;
            ok &= ModelBase::fromJson(fieldValue, refVal_lpi);
            setLpi(refVal_lpi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrelatedClass")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("unrelatedClass"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UnrelatedClass> refVal_unrelatedClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_unrelatedClass);
            setUnrelatedClass(refVal_unrelatedClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plmnOperatorClasses")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plmnOperatorClasses"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlmnOperatorClass>> refVal_plmnOperatorClasses;
            ok &= ModelBase::fromJson(fieldValue, refVal_plmnOperatorClasses);
            setPlmnOperatorClasses(refVal_plmnOperatorClasses);
        }
    }
    return ok;
}

void LcsPrivacyData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LpiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lpi"), m_Lpi));
    }
    if(m_UnrelatedClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrelatedClass"), m_UnrelatedClass));
    }
    if(m_PlmnOperatorClassesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plmnOperatorClasses"), m_PlmnOperatorClasses));
    }
}

bool LcsPrivacyData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("lpi")))
    {
        std::shared_ptr<Lpi> refVal_lpi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lpi")), refVal_lpi );
        setLpi(refVal_lpi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrelatedClass")))
    {
        std::shared_ptr<UnrelatedClass> refVal_unrelatedClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrelatedClass")), refVal_unrelatedClass );
        setUnrelatedClass(refVal_unrelatedClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plmnOperatorClasses")))
    {
        std::vector<std::shared_ptr<PlmnOperatorClass>> refVal_plmnOperatorClasses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plmnOperatorClasses")), refVal_plmnOperatorClasses );
        setPlmnOperatorClasses(refVal_plmnOperatorClasses);
    }
    return ok;
}

std::shared_ptr<Lpi> LcsPrivacyData::getLpi() const
{
    return m_Lpi;
}

void LcsPrivacyData::setLpi(const std::shared_ptr<Lpi>& value)
{
    m_Lpi = value;
    m_LpiIsSet = true;
}

bool LcsPrivacyData::lpiIsSet() const
{
    return m_LpiIsSet;
}

void LcsPrivacyData::unsetLpi()
{
    m_LpiIsSet = false;
}
std::shared_ptr<UnrelatedClass> LcsPrivacyData::getUnrelatedClass() const
{
    return m_UnrelatedClass;
}

void LcsPrivacyData::setUnrelatedClass(const std::shared_ptr<UnrelatedClass>& value)
{
    m_UnrelatedClass = value;
    m_UnrelatedClassIsSet = true;
}

bool LcsPrivacyData::unrelatedClassIsSet() const
{
    return m_UnrelatedClassIsSet;
}

void LcsPrivacyData::unsetUnrelatedClass()
{
    m_UnrelatedClassIsSet = false;
}
std::vector<std::shared_ptr<PlmnOperatorClass>>& LcsPrivacyData::getPlmnOperatorClasses()
{
    return m_PlmnOperatorClasses;
}

void LcsPrivacyData::setPlmnOperatorClasses(const std::vector<std::shared_ptr<PlmnOperatorClass>>& value)
{
    m_PlmnOperatorClasses = value;
    m_PlmnOperatorClassesIsSet = true;
}

bool LcsPrivacyData::plmnOperatorClassesIsSet() const
{
    return m_PlmnOperatorClassesIsSet;
}

void LcsPrivacyData::unsetPlmnOperatorClasses()
{
    m_PlmnOperatorClassesIsSet = false;
}
}
}
}
}


