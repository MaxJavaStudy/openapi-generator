/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DataSetName.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DataSetName::DataSetName()
{
}

DataSetName::~DataSetName()
{
}

void DataSetName::validate()
{
    // TODO: implement validation
}

web::json::value DataSetName::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eDataSetName::DataSetName_AM) val = web::json::value::string(U(AM));
    if (m_value == eDataSetName::DataSetName_SMF_SEL) val = web::json::value::string(U(SMF_SEL));
    if (m_value == eDataSetName::DataSetName_UEC_SMF) val = web::json::value::string(U(UEC_SMF));
    if (m_value == eDataSetName::DataSetName_UEC_SMSF) val = web::json::value::string(U(UEC_SMSF));
    if (m_value == eDataSetName::DataSetName_SMS_SUB) val = web::json::value::string(U(SMS_SUB));
    if (m_value == eDataSetName::DataSetName_SM) val = web::json::value::string(U(SM));
    if (m_value == eDataSetName::DataSetName_TRACE) val = web::json::value::string(U(TRACE));
    if (m_value == eDataSetName::DataSetName_SMS_MNG) val = web::json::value::string(U(SMS_MNG));
    if (m_value == eDataSetName::DataSetName_LCS_PRIVACY) val = web::json::value::string(U(LCS_PRIVACY));
    if (m_value == eDataSetName::DataSetName_LCS_MO) val = web::json::value::string(U(LCS_MO));
    if (m_value == eDataSetName::DataSetName_UEC_AMF) val = web::json::value::string(U(UEC_AMF));
    if (m_value == eDataSetName::DataSetName_V2X) val = web::json::value::string(U(V2X));

    return val;
}

bool DataSetName::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(AM)) m_value = eDataSetName::DataSetName_AM;
    if (s == utility::conversions::to_string_t(SMF_SEL)) m_value = eDataSetName::DataSetName_SMF_SEL;
    if (s == utility::conversions::to_string_t(UEC_SMF)) m_value = eDataSetName::DataSetName_UEC_SMF;
    if (s == utility::conversions::to_string_t(UEC_SMSF)) m_value = eDataSetName::DataSetName_UEC_SMSF;
    if (s == utility::conversions::to_string_t(SMS_SUB)) m_value = eDataSetName::DataSetName_SMS_SUB;
    if (s == utility::conversions::to_string_t(SM)) m_value = eDataSetName::DataSetName_SM;
    if (s == utility::conversions::to_string_t(TRACE)) m_value = eDataSetName::DataSetName_TRACE;
    if (s == utility::conversions::to_string_t(SMS_MNG)) m_value = eDataSetName::DataSetName_SMS_MNG;
    if (s == utility::conversions::to_string_t(LCS_PRIVACY)) m_value = eDataSetName::DataSetName_LCS_PRIVACY;
    if (s == utility::conversions::to_string_t(LCS_MO)) m_value = eDataSetName::DataSetName_LCS_MO;
    if (s == utility::conversions::to_string_t(UEC_AMF)) m_value = eDataSetName::DataSetName_UEC_AMF;
    if (s == utility::conversions::to_string_t(V2X)) m_value = eDataSetName::DataSetName_V2X;
    return true;
}

void DataSetName::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eDataSetName::DataSetName_AM) s = utility::conversions::to_string_t(AM);
    if (m_value == eDataSetName::DataSetName_SMF_SEL) s = utility::conversions::to_string_t(SMF_SEL);
    if (m_value == eDataSetName::DataSetName_UEC_SMF) s = utility::conversions::to_string_t(UEC_SMF);
    if (m_value == eDataSetName::DataSetName_UEC_SMSF) s = utility::conversions::to_string_t(UEC_SMSF);
    if (m_value == eDataSetName::DataSetName_SMS_SUB) s = utility::conversions::to_string_t(SMS_SUB);
    if (m_value == eDataSetName::DataSetName_SM) s = utility::conversions::to_string_t(SM);
    if (m_value == eDataSetName::DataSetName_TRACE) s = utility::conversions::to_string_t(TRACE);
    if (m_value == eDataSetName::DataSetName_SMS_MNG) s = utility::conversions::to_string_t(SMS_MNG);
    if (m_value == eDataSetName::DataSetName_LCS_PRIVACY) s = utility::conversions::to_string_t(LCS_PRIVACY);
    if (m_value == eDataSetName::DataSetName_LCS_MO) s = utility::conversions::to_string_t(LCS_MO);
    if (m_value == eDataSetName::DataSetName_UEC_AMF) s = utility::conversions::to_string_t(UEC_AMF);
    if (m_value == eDataSetName::DataSetName_V2X) s = utility::conversions::to_string_t(V2X);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool DataSetName::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eDataSetName v;

        
        if (s == utility::conversions::to_string_t(AM)) v = eDataSetName::DataSetName_AM;
        if (s == utility::conversions::to_string_t(SMF_SEL)) v = eDataSetName::DataSetName_SMF_SEL;
        if (s == utility::conversions::to_string_t(UEC_SMF)) v = eDataSetName::DataSetName_UEC_SMF;
        if (s == utility::conversions::to_string_t(UEC_SMSF)) v = eDataSetName::DataSetName_UEC_SMSF;
        if (s == utility::conversions::to_string_t(SMS_SUB)) v = eDataSetName::DataSetName_SMS_SUB;
        if (s == utility::conversions::to_string_t(SM)) v = eDataSetName::DataSetName_SM;
        if (s == utility::conversions::to_string_t(TRACE)) v = eDataSetName::DataSetName_TRACE;
        if (s == utility::conversions::to_string_t(SMS_MNG)) v = eDataSetName::DataSetName_SMS_MNG;
        if (s == utility::conversions::to_string_t(LCS_PRIVACY)) v = eDataSetName::DataSetName_LCS_PRIVACY;
        if (s == utility::conversions::to_string_t(LCS_MO)) v = eDataSetName::DataSetName_LCS_MO;
        if (s == utility::conversions::to_string_t(UEC_AMF)) v = eDataSetName::DataSetName_UEC_AMF;
        if (s == utility::conversions::to_string_t(V2X)) v = eDataSetName::DataSetName_V2X;

        setValue(v);
    }
    return ok;
}

DataSetName::eDataSetName DataSetName::getValue() const
{
   return m_value;
}

void DataSetName::setValue(DataSetName::eDataSetName const value)
{
   m_value = value;
}


}
}
}
}


