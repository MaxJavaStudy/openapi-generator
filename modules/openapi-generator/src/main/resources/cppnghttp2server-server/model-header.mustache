{{>licenseInfo}}
{{#models}}{{#model}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

{{{defaultInclude}}}
{{#imports}}{{{this}}}
{{/imports}}
#include "jsonParser.hpp"
#include <type_traits>
	
{{#modelNamespaceDeclarations}}
namespace {{this}} {
{{/modelNamespaceDeclarations}}


{{#isEnum}}
    



/// <summary>
/// {{description}}
/// </summary>
class {{declspec}} {{classname}}: public jsonParser::jsonParser<{{classname}}>{
public:
    explicit {{classname}}(){
        // constructor
      
        {{{dataType}}} m_{{name}};
    };
    virtual ~{{classname}}(){};

      std::pair<jsonRet, std::string> decode(const std::string &jsonBuffer,
                                               staticjson::ParseStatus &result)
                                               {
                                                   std::pair<jsonRet, std::string> ret;
                                                   m_{{name}} = jsonBuffer;
                                                   return ret;
                                               }

  void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : {{#vars}}{{{name}}} {{/vars}}
        {{#vars}}
        //h->add_property("{{nameInCamelCase}}", &this->m_{{name}}, m_{{name}}Flag);
        {{/vars}}



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    friend std::ostream& operator<<(std::ostream& o, const {{classname}}& obj)
    {
        {{#vars}}{{^isContainer}}
        o << "{{name}} : " << obj.m_{{name}} << std::endl;
       {{/isContainer}}
       {{#isContainer}}
        o<< convert2string(std::string("{{name}}"), obj.m_{{name}}) <<std::endl;
       {{/isContainer}}{{/vars}}
     
        return o;
    }
    
public:
    
    {{{dataType}}} m_{{name}};
    
 
  
};

{{/isEnum}}






{{^isEnum}}
/// <summary>
/// {{description}}
/// </summary>
class {{declspec}} {{classname}}: public jsonParser::jsonParser<{{classname}}>
{
public:
    explicit {{classname}}(){
        // constructor
        {{#vars}}{{^isContainer}}{{#isPrimitiveType}}m_{{name}} = {{{defaultValue}}};
        {{/isPrimitiveType}}{{^isPrimitiveType}}{{#isString}}m_{{name}} = {{{defaultValue}}};
        {{/isString}}{{#isDateTime}}m_{{name}} = {{{defaultValue}}};
        {{/isDateTime}}{{/isPrimitiveType}}{{/isContainer}}
        {{#required}}   
            m_{{name}}Flag = staticjson::Flags::Default;
        {{/required}}
        {{^required}}     
            m_{{name}}Flag = (staticjson::Flags::Optional);
        {{/required}}
        {{/vars}}
    };
    virtual ~{{classname}}(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : {{#vars}}{{{name}}} {{/vars}}
        {{#vars}}
        h->add_property("{{nameInCamelCase}}", &this->m_{{name}}, m_{{name}}Flag);
        {{/vars}}



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const {{classname}}& obj)
    {
        {{#vars}}{{^isContainer}}
        o << "{{name}} : " << obj.m_{{name}} << std::endl;
       {{/isContainer}}
       {{#isContainer}}
        o<< convert2string(std::string("{{name}}"), obj.m_{{name}}) <<std::endl;
       {{/isContainer}}{{/vars}}
     
        return o;
    }

    /////////////////////////////////////////////
    /// {{classname}} members vars : {{#vars}}{{{name}}} {{/vars}}

    {{#vars}}{{{dataType}}}{{#isContainer}}&{{/isContainer}}  {{getter}}(){{^isContainer}} const{{/isContainer}}
    {
        return m_{{name}};
    }
    void  {{setter}}({{{dataType}}} const{{^isPrimitiveType}}&{{/isPrimitiveType}} value)
    {
        m_{{name}} = value;
    }

    {{/vars}}


    
public:
    {{#vars}}
    {{{dataType}}} m_{{name}};
    
    unsigned m_{{name}}Flag;
    {{/vars}}
  
};
{{/isEnum}}
{{#modelNamespaceDeclarations}}
}
{{/modelNamespaceDeclarations}}

#endif /* {{classname}}_H_ */
{{/model}}
{{/models}}
