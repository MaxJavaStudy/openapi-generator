/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include <vector>
#include <signal.h>
#include <unistd.h>
#include "jsonParser.h"

#include "AccessAndMobilitySubscriptionDataRetrievalApi.h"
#include "EnhancedCoverageRestrictionDataRetrievalApi.h"
#include "GPSIToSUPITranslationApi.h"
#include "GroupIdentifiersApi.h"
#include "LCSBroadcastAssistanceDataTypesRetrievalApi.h"
#include "LCSMobileOriginatedDataRetrievalApi.h"
#include "LCSPrivacyDataRetrievalApi.h"
#include "ProvidingAcknowledgementOfCAGUpdateApi.h"
#include "ProvidingAcknowledgementOfSNSSAIsUpdateApi.h"
#include "ProvidingAcknowledgementOfSteeringOfRoamingApi.h"
#include "ProvidingAcknowledgementOfUEParametersUpdateApi.h"
#include "RetrievalOfMultipleDataSetsApi.h"
#include "RetrievalOfSharedDataApi.h"
#include "SMFSelectionSubscriptionDataRetrievalApi.h"
#include "SMSManagementSubscriptionDataRetrievalApi.h"
#include "SMSSubscriptionDataRetrievalApi.h"
#include "SessionManagementSubscriptionDataRetrievalApi.h"
#include "SliceSelectionSubscriptionDataRetrievalApi.h"
#include "SubscriptionCreationApi.h"
#include "SubscriptionCreationForSharedDataApi.h"
#include "SubscriptionDeletionApi.h"
#include "SubscriptionDeletionForSharedDataApi.h"
#include "SubscriptionModificationApi.h"
#include "TraceConfigurationDataRetrievalApi.h"
#include "TriggerSORInfoUpdateApi.h"
#include "UEContextInAMFDataRetrievalApi.h"
#include "UEContextInSMFDataRetrievalApi.h"
#include "UEContextInSMSFDataRetrievalApi.h"
#include "V2XSubscriptionDataRetrievalApi.h"

static void sigHandler [[noreturn]] (int sig)
{
  switch (sig)
  {
  case SIGINT:
  case SIGQUIT:
  case SIGTERM:
  case SIGHUP:
  default:
    // to do
    // what should we do when signal happens?
    break;
  }
  exit(0);
}

static void setUpUnixSignals(std::vector<int> quitSignals)
{
  sigset_t blocking_mask;
  sigemptyset(&blocking_mask);
  for (auto sig : quitSignals)
    sigaddset(&blocking_mask, sig);

  struct sigaction sa;
  sa.sa_handler = sigHandler;
  sa.sa_mask = blocking_mask;
  sa.sa_flags = 0;

  for (auto sig : quitSignals)
    sigaction(sig, &sa, nullptr);
}

using namespace org::openapitools::server::api;

int main(int argc, char *argv[])
{

  std::vector<int> sigs{SIGQUIT, SIGINT, SIGTERM, SIGHUP};
  setUpUnixSignals(sigs);

  // server
  try
  {
    // Check command line arguments.
    if (argc < 4)
    {
      std::cerr
          << "Usage: asio-sv <address> <port> <threads> [<private-key-file> "
          << "<cert-file>]\n";
      return 1;
    }

    boost::system::error_code ec;

    std::string addr = argv[1];
    std::string port = argv[2];
    std::size_t num_threads = std::stoi(argv[3]);

    std::cout << "start server with addr :" << addr << ", port : " << port << ", thread mumber :" << num_threads << std::endl;

    http2 server;

    server.num_threads(num_threads);

    // load API schema
    static std::string apiSchemaBasePath = "";

    jsonParser::jsonParser<AccessAndMobilitySubscriptionData>::loadApiSchema(apiSchemaBasePath + "AccessAndMobilitySubscriptionData");

    jsonParser::jsonParser<AccessTech>::loadApiSchema(apiSchemaBasePath + "AccessTech");

    jsonParser::jsonParser<AccessTech_anyOf>::loadApiSchema(apiSchemaBasePath + "AccessTech_anyOf");

    jsonParser::jsonParser<AcknowledgeInfo>::loadApiSchema(apiSchemaBasePath + "AcknowledgeInfo");

    jsonParser::jsonParser<AcsInfo>::loadApiSchema(apiSchemaBasePath + "AcsInfo");

    jsonParser::jsonParser<AdditionalSnssaiData>::loadApiSchema(apiSchemaBasePath + "AdditionalSnssaiData");

    jsonParser::jsonParser<AfExternal>::loadApiSchema(apiSchemaBasePath + "AfExternal");

    jsonParser::jsonParser<Ambr>::loadApiSchema(apiSchemaBasePath + "Ambr");

    jsonParser::jsonParser<AmbrRm>::loadApiSchema(apiSchemaBasePath + "AmbrRm");

    jsonParser::jsonParser<AppDescriptor>::loadApiSchema(apiSchemaBasePath + "AppDescriptor");

    jsonParser::jsonParser<AppPortId>::loadApiSchema(apiSchemaBasePath + "AppPortId");

    jsonParser::jsonParser<Area>::loadApiSchema(apiSchemaBasePath + "Area");

    jsonParser::jsonParser<AreaScope>::loadApiSchema(apiSchemaBasePath + "AreaScope");

    jsonParser::jsonParser<Arp>::loadApiSchema(apiSchemaBasePath + "Arp");

    jsonParser::jsonParser<BatteryIndication>::loadApiSchema(apiSchemaBasePath + "BatteryIndication");

    jsonParser::jsonParser<CagData>::loadApiSchema(apiSchemaBasePath + "CagData");

    jsonParser::jsonParser<CagInfo>::loadApiSchema(apiSchemaBasePath + "CagInfo");

    jsonParser::jsonParser<ChangeItem>::loadApiSchema(apiSchemaBasePath + "ChangeItem");

    jsonParser::jsonParser<ChangeType>::loadApiSchema(apiSchemaBasePath + "ChangeType");

    jsonParser::jsonParser<CivicAddress>::loadApiSchema(apiSchemaBasePath + "CivicAddress");

    jsonParser::jsonParser<CodeWordInd>::loadApiSchema(apiSchemaBasePath + "CodeWordInd");

    jsonParser::jsonParser<CollectionPeriodRmmLteMdt>::loadApiSchema(apiSchemaBasePath + "CollectionPeriodRmmLteMdt");

    jsonParser::jsonParser<CollectionPeriodRmmNrMdt>::loadApiSchema(apiSchemaBasePath + "CollectionPeriodRmmNrMdt");

    jsonParser::jsonParser<ContextInfo>::loadApiSchema(apiSchemaBasePath + "ContextInfo");

    jsonParser::jsonParser<CoreNetworkType>::loadApiSchema(apiSchemaBasePath + "CoreNetworkType");

    jsonParser::jsonParser<DataSetName>::loadApiSchema(apiSchemaBasePath + "DataSetName");

    jsonParser::jsonParser<DefaultUnrelatedClass>::loadApiSchema(apiSchemaBasePath + "DefaultUnrelatedClass");

    jsonParser::jsonParser<DnnConfiguration>::loadApiSchema(apiSchemaBasePath + "DnnConfiguration");

    jsonParser::jsonParser<DnnInfo>::loadApiSchema(apiSchemaBasePath + "DnnInfo");

    jsonParser::jsonParser<EcRestrictionDataWb>::loadApiSchema(apiSchemaBasePath + "EcRestrictionDataWb");

    jsonParser::jsonParser<Ecgi>::loadApiSchema(apiSchemaBasePath + "Ecgi");

    jsonParser::jsonParser<EdrxParameters>::loadApiSchema(apiSchemaBasePath + "EdrxParameters");

    jsonParser::jsonParser<EllipsoidArc>::loadApiSchema(apiSchemaBasePath + "EllipsoidArc");

    jsonParser::jsonParser<EllipsoidArc_allOf>::loadApiSchema(apiSchemaBasePath + "EllipsoidArc_allOf");

    jsonParser::jsonParser<EmergencyInfo>::loadApiSchema(apiSchemaBasePath + "EmergencyInfo");

    jsonParser::jsonParser<EnhancedCoverageRestrictionData>::loadApiSchema(apiSchemaBasePath + "EnhancedCoverageRestrictionData");

    jsonParser::jsonParser<EpsInterworkingInfo>::loadApiSchema(apiSchemaBasePath + "EpsInterworkingInfo");

    jsonParser::jsonParser<EpsIwkPgw>::loadApiSchema(apiSchemaBasePath + "EpsIwkPgw");

    jsonParser::jsonParser<EventForMdt>::loadApiSchema(apiSchemaBasePath + "EventForMdt");

    jsonParser::jsonParser<ExpectedUeBehaviourData>::loadApiSchema(apiSchemaBasePath + "ExpectedUeBehaviourData");

    jsonParser::jsonParser<ExternalUnrelatedClass>::loadApiSchema(apiSchemaBasePath + "ExternalUnrelatedClass");

    jsonParser::jsonParser<FrameRouteInfo>::loadApiSchema(apiSchemaBasePath + "FrameRouteInfo");

    jsonParser::jsonParser<GADShape>::loadApiSchema(apiSchemaBasePath + "GADShape");

    jsonParser::jsonParser<GNbId>::loadApiSchema(apiSchemaBasePath + "GNbId");

    jsonParser::jsonParser<GeographicArea>::loadApiSchema(apiSchemaBasePath + "GeographicArea");

    jsonParser::jsonParser<GeographicalCoordinates>::loadApiSchema(apiSchemaBasePath + "GeographicalCoordinates");

    jsonParser::jsonParser<GlobalRanNodeId>::loadApiSchema(apiSchemaBasePath + "GlobalRanNodeId");

    jsonParser::jsonParser<GroupIdentifiers>::loadApiSchema(apiSchemaBasePath + "GroupIdentifiers");

    jsonParser::jsonParser<IdTranslationResult>::loadApiSchema(apiSchemaBasePath + "IdTranslationResult");

    jsonParser::jsonParser<InterFreqTargetInfo>::loadApiSchema(apiSchemaBasePath + "InterFreqTargetInfo");

    jsonParser::jsonParser<InvalidParam>::loadApiSchema(apiSchemaBasePath + "InvalidParam");

    jsonParser::jsonParser<IpAddress>::loadApiSchema(apiSchemaBasePath + "IpAddress");

    jsonParser::jsonParser<JobType>::loadApiSchema(apiSchemaBasePath + "JobType");

    jsonParser::jsonParser<LcsBroadcastAssistanceTypesData>::loadApiSchema(apiSchemaBasePath + "LcsBroadcastAssistanceTypesData");

    jsonParser::jsonParser<LcsClientClass>::loadApiSchema(apiSchemaBasePath + "LcsClientClass");

    jsonParser::jsonParser<LcsClientExternal>::loadApiSchema(apiSchemaBasePath + "LcsClientExternal");

    jsonParser::jsonParser<LcsClientGroupExternal>::loadApiSchema(apiSchemaBasePath + "LcsClientGroupExternal");

    jsonParser::jsonParser<LcsMoData>::loadApiSchema(apiSchemaBasePath + "LcsMoData");

    jsonParser::jsonParser<LcsMoServiceClass>::loadApiSchema(apiSchemaBasePath + "LcsMoServiceClass");

    jsonParser::jsonParser<LcsPrivacyData>::loadApiSchema(apiSchemaBasePath + "LcsPrivacyData");

    jsonParser::jsonParser<LocationArea>::loadApiSchema(apiSchemaBasePath + "LocationArea");

    jsonParser::jsonParser<LocationPrivacyInd>::loadApiSchema(apiSchemaBasePath + "LocationPrivacyInd");

    jsonParser::jsonParser<LoggingDurationMdt>::loadApiSchema(apiSchemaBasePath + "LoggingDurationMdt");

    jsonParser::jsonParser<LoggingDurationNrMdt>::loadApiSchema(apiSchemaBasePath + "LoggingDurationNrMdt");

    jsonParser::jsonParser<LoggingIntervalMdt>::loadApiSchema(apiSchemaBasePath + "LoggingIntervalMdt");

    jsonParser::jsonParser<LoggingIntervalNrMdt>::loadApiSchema(apiSchemaBasePath + "LoggingIntervalNrMdt");

    jsonParser::jsonParser<Lpi>::loadApiSchema(apiSchemaBasePath + "Lpi");

    jsonParser::jsonParser<LteV2xAuth>::loadApiSchema(apiSchemaBasePath + "LteV2xAuth");

    jsonParser::jsonParser<MbsfnArea>::loadApiSchema(apiSchemaBasePath + "MbsfnArea");

    jsonParser::jsonParser<MdtConfiguration>::loadApiSchema(apiSchemaBasePath + "MdtConfiguration");

    jsonParser::jsonParser<MdtUserConsent>::loadApiSchema(apiSchemaBasePath + "MdtUserConsent");

    jsonParser::jsonParser<MeasurementLteForMdt>::loadApiSchema(apiSchemaBasePath + "MeasurementLteForMdt");

    jsonParser::jsonParser<MeasurementNrForMdt>::loadApiSchema(apiSchemaBasePath + "MeasurementNrForMdt");

    jsonParser::jsonParser<MeasurementPeriodLteMdt>::loadApiSchema(apiSchemaBasePath + "MeasurementPeriodLteMdt");

    jsonParser::jsonParser<ModificationNotification>::loadApiSchema(apiSchemaBasePath + "ModificationNotification");

    jsonParser::jsonParser<Ncgi>::loadApiSchema(apiSchemaBasePath + "Ncgi");

    jsonParser::jsonParser<NetworkAreaInfo>::loadApiSchema(apiSchemaBasePath + "NetworkAreaInfo");

    jsonParser::jsonParser<NiddInformation>::loadApiSchema(apiSchemaBasePath + "NiddInformation");

    jsonParser::jsonParser<NotifyItem>::loadApiSchema(apiSchemaBasePath + "NotifyItem");

    jsonParser::jsonParser<NrV2xAuth>::loadApiSchema(apiSchemaBasePath + "NrV2xAuth");

    jsonParser::jsonParser<Nssai>::loadApiSchema(apiSchemaBasePath + "Nssai");

    jsonParser::jsonParser<NullValue>::loadApiSchema(apiSchemaBasePath + "NullValue");

    jsonParser::jsonParser<OdbPacketServices>::loadApiSchema(apiSchemaBasePath + "OdbPacketServices");

    jsonParser::jsonParser<OperationMode>::loadApiSchema(apiSchemaBasePath + "OperationMode");

    jsonParser::jsonParser<PatchResult>::loadApiSchema(apiSchemaBasePath + "PatchResult");

    jsonParser::jsonParser<PduSession>::loadApiSchema(apiSchemaBasePath + "PduSession");

    jsonParser::jsonParser<PduSessionContinuityInd>::loadApiSchema(apiSchemaBasePath + "PduSessionContinuityInd");

    jsonParser::jsonParser<PduSessionType>::loadApiSchema(apiSchemaBasePath + "PduSessionType");

    jsonParser::jsonParser<PduSessionTypes>::loadApiSchema(apiSchemaBasePath + "PduSessionTypes");

    jsonParser::jsonParser<PgwInfo>::loadApiSchema(apiSchemaBasePath + "PgwInfo");

    jsonParser::jsonParser<PlmnEcInfo>::loadApiSchema(apiSchemaBasePath + "PlmnEcInfo");

    jsonParser::jsonParser<PlmnId>::loadApiSchema(apiSchemaBasePath + "PlmnId");

    jsonParser::jsonParser<PlmnOperatorClass>::loadApiSchema(apiSchemaBasePath + "PlmnOperatorClass");

    jsonParser::jsonParser<Point>::loadApiSchema(apiSchemaBasePath + "Point");

    jsonParser::jsonParser<PointAltitude>::loadApiSchema(apiSchemaBasePath + "PointAltitude");

    jsonParser::jsonParser<PointAltitudeUncertainty>::loadApiSchema(apiSchemaBasePath + "PointAltitudeUncertainty");

    jsonParser::jsonParser<PointAltitudeUncertainty_allOf>::loadApiSchema(apiSchemaBasePath + "PointAltitudeUncertainty_allOf");

    jsonParser::jsonParser<PointAltitude_allOf>::loadApiSchema(apiSchemaBasePath + "PointAltitude_allOf");

    jsonParser::jsonParser<PointUncertaintyCircle>::loadApiSchema(apiSchemaBasePath + "PointUncertaintyCircle");

    jsonParser::jsonParser<PointUncertaintyCircle_allOf>::loadApiSchema(apiSchemaBasePath + "PointUncertaintyCircle_allOf");

    jsonParser::jsonParser<PointUncertaintyEllipse>::loadApiSchema(apiSchemaBasePath + "PointUncertaintyEllipse");

    jsonParser::jsonParser<PointUncertaintyEllipse_allOf>::loadApiSchema(apiSchemaBasePath + "PointUncertaintyEllipse_allOf");

    jsonParser::jsonParser<Point_allOf>::loadApiSchema(apiSchemaBasePath + "Point_allOf");

    jsonParser::jsonParser<Polygon>::loadApiSchema(apiSchemaBasePath + "Polygon");

    jsonParser::jsonParser<Polygon_allOf>::loadApiSchema(apiSchemaBasePath + "Polygon_allOf");

    jsonParser::jsonParser<PositioningMethodMdt>::loadApiSchema(apiSchemaBasePath + "PositioningMethodMdt");

    jsonParser::jsonParser<PreemptionCapability>::loadApiSchema(apiSchemaBasePath + "PreemptionCapability");

    jsonParser::jsonParser<PreemptionVulnerability>::loadApiSchema(apiSchemaBasePath + "PreemptionVulnerability");

    jsonParser::jsonParser<PrivacyCheckRelatedAction>::loadApiSchema(apiSchemaBasePath + "PrivacyCheckRelatedAction");

    jsonParser::jsonParser<ProblemDetails>::loadApiSchema(apiSchemaBasePath + "ProblemDetails");

    jsonParser::jsonParser<PtwParameters>::loadApiSchema(apiSchemaBasePath + "PtwParameters");

    jsonParser::jsonParser<RatType>::loadApiSchema(apiSchemaBasePath + "RatType");

    jsonParser::jsonParser<ReportAmountMdt>::loadApiSchema(apiSchemaBasePath + "ReportAmountMdt");

    jsonParser::jsonParser<ReportIntervalMdt>::loadApiSchema(apiSchemaBasePath + "ReportIntervalMdt");

    jsonParser::jsonParser<ReportIntervalNrMdt>::loadApiSchema(apiSchemaBasePath + "ReportIntervalNrMdt");

    jsonParser::jsonParser<ReportItem>::loadApiSchema(apiSchemaBasePath + "ReportItem");

    jsonParser::jsonParser<ReportTypeMdt>::loadApiSchema(apiSchemaBasePath + "ReportTypeMdt");

    jsonParser::jsonParser<ReportingTrigger>::loadApiSchema(apiSchemaBasePath + "ReportingTrigger");

    jsonParser::jsonParser<RestrictionType>::loadApiSchema(apiSchemaBasePath + "RestrictionType");

    jsonParser::jsonParser<ScheduledCommunicationTime>::loadApiSchema(apiSchemaBasePath + "ScheduledCommunicationTime");

    jsonParser::jsonParser<ScheduledCommunicationType>::loadApiSchema(apiSchemaBasePath + "ScheduledCommunicationType");

    jsonParser::jsonParser<SdmSubsModification>::loadApiSchema(apiSchemaBasePath + "SdmSubsModification");

    jsonParser::jsonParser<SdmSubscription>::loadApiSchema(apiSchemaBasePath + "SdmSubscription");

    jsonParser::jsonParser<SensorMeasurement>::loadApiSchema(apiSchemaBasePath + "SensorMeasurement");

    jsonParser::jsonParser<ServiceAreaRestriction>::loadApiSchema(apiSchemaBasePath + "ServiceAreaRestriction");

    jsonParser::jsonParser<ServiceTypeUnrelatedClass>::loadApiSchema(apiSchemaBasePath + "ServiceTypeUnrelatedClass");

    jsonParser::jsonParser<SessionManagementSubscriptionData>::loadApiSchema(apiSchemaBasePath + "SessionManagementSubscriptionData");

    jsonParser::jsonParser<SharedData>::loadApiSchema(apiSchemaBasePath + "SharedData");

    jsonParser::jsonParser<SmfSelectionSubscriptionData>::loadApiSchema(apiSchemaBasePath + "SmfSelectionSubscriptionData");

    jsonParser::jsonParser<SmsManagementSubscriptionData>::loadApiSchema(apiSchemaBasePath + "SmsManagementSubscriptionData");

    jsonParser::jsonParser<SmsSubscriptionData>::loadApiSchema(apiSchemaBasePath + "SmsSubscriptionData");

    jsonParser::jsonParser<SmsfInfo>::loadApiSchema(apiSchemaBasePath + "SmsfInfo");

    jsonParser::jsonParser<Snssai>::loadApiSchema(apiSchemaBasePath + "Snssai");

    jsonParser::jsonParser<SnssaiInfo>::loadApiSchema(apiSchemaBasePath + "SnssaiInfo");

    jsonParser::jsonParser<SorInfo>::loadApiSchema(apiSchemaBasePath + "SorInfo");

    jsonParser::jsonParser<SorUpdateIndicator>::loadApiSchema(apiSchemaBasePath + "SorUpdateIndicator");

    jsonParser::jsonParser<SorUpdateInfo>::loadApiSchema(apiSchemaBasePath + "SorUpdateInfo");

    jsonParser::jsonParser<SscMode>::loadApiSchema(apiSchemaBasePath + "SscMode");

    jsonParser::jsonParser<SscModes>::loadApiSchema(apiSchemaBasePath + "SscModes");

    jsonParser::jsonParser<StationaryIndication>::loadApiSchema(apiSchemaBasePath + "StationaryIndication");

    jsonParser::jsonParser<SteeringContainer>::loadApiSchema(apiSchemaBasePath + "SteeringContainer");

    jsonParser::jsonParser<SteeringInfo>::loadApiSchema(apiSchemaBasePath + "SteeringInfo");

    jsonParser::jsonParser<SubscribedDefaultQos>::loadApiSchema(apiSchemaBasePath + "SubscribedDefaultQos");

    jsonParser::jsonParser<SubscriptionDataSets>::loadApiSchema(apiSchemaBasePath + "SubscriptionDataSets");

    jsonParser::jsonParser<SuggestedPacketNumDl>::loadApiSchema(apiSchemaBasePath + "SuggestedPacketNumDl");

    jsonParser::jsonParser<SupportedGADShapes>::loadApiSchema(apiSchemaBasePath + "SupportedGADShapes");

    jsonParser::jsonParser<SupportedGADShapes_anyOf>::loadApiSchema(apiSchemaBasePath + "SupportedGADShapes_anyOf");

    jsonParser::jsonParser<TacInfo>::loadApiSchema(apiSchemaBasePath + "TacInfo");

    jsonParser::jsonParser<Tai>::loadApiSchema(apiSchemaBasePath + "Tai");

    jsonParser::jsonParser<TraceData>::loadApiSchema(apiSchemaBasePath + "TraceData");

    jsonParser::jsonParser<TraceDataResponse>::loadApiSchema(apiSchemaBasePath + "TraceDataResponse");

    jsonParser::jsonParser<TraceDepth>::loadApiSchema(apiSchemaBasePath + "TraceDepth");

    jsonParser::jsonParser<TrafficProfile>::loadApiSchema(apiSchemaBasePath + "TrafficProfile");

    jsonParser::jsonParser<UeAuth>::loadApiSchema(apiSchemaBasePath + "UeAuth");

    jsonParser::jsonParser<UeContextInAmfData>::loadApiSchema(apiSchemaBasePath + "UeContextInAmfData");

    jsonParser::jsonParser<UeContextInSmfData>::loadApiSchema(apiSchemaBasePath + "UeContextInSmfData");

    jsonParser::jsonParser<UeContextInSmsfData>::loadApiSchema(apiSchemaBasePath + "UeContextInSmsfData");

    jsonParser::jsonParser<UeId>::loadApiSchema(apiSchemaBasePath + "UeId");

    jsonParser::jsonParser<UncertaintyEllipse>::loadApiSchema(apiSchemaBasePath + "UncertaintyEllipse");

    jsonParser::jsonParser<UnrelatedClass>::loadApiSchema(apiSchemaBasePath + "UnrelatedClass");

    jsonParser::jsonParser<UpConfidentiality>::loadApiSchema(apiSchemaBasePath + "UpConfidentiality");

    jsonParser::jsonParser<UpIntegrity>::loadApiSchema(apiSchemaBasePath + "UpIntegrity");

    jsonParser::jsonParser<UpSecurity>::loadApiSchema(apiSchemaBasePath + "UpSecurity");

    jsonParser::jsonParser<UpuData>::loadApiSchema(apiSchemaBasePath + "UpuData");

    jsonParser::jsonParser<UpuInfo>::loadApiSchema(apiSchemaBasePath + "UpuInfo");

    jsonParser::jsonParser<V2xSubscriptionData>::loadApiSchema(apiSchemaBasePath + "V2xSubscriptionData");

    jsonParser::jsonParser<ValidTimePeriod>::loadApiSchema(apiSchemaBasePath + "ValidTimePeriod");

    jsonParser::jsonParser<VnGroupData>::loadApiSchema(apiSchemaBasePath + "VnGroupData");

    jsonParser::jsonParser<WirelineArea>::loadApiSchema(apiSchemaBasePath + "WirelineArea");

    jsonParser::jsonParser<WirelineServiceAreaRestriction>::loadApiSchema(apiSchemaBasePath + "WirelineServiceAreaRestriction");

    // register server handler

    server.register_handler<GET>("/:supi/am-data", &AccessAndMobilitySubscriptionDataRetrievalApi::get_am_data_handler);

    server.register_handler<GET>("/:supi/am-data/ecr-data", &EnhancedCoverageRestrictionDataRetrievalApi::get_ecr_data_handler);

    server.register_handler<GET>("/:ueId/id-translation-result", &GPSIToSUPITranslationApi::get_supi_or_gpsi_handler);

    server.register_handler<GET>("/group-data/group-identifiers", &GroupIdentifiersApi::get_group_identifiers_handler);

    server.register_handler<GET>("/:supi/lcs-bca-data", &LCSBroadcastAssistanceDataTypesRetrievalApi::get_lcs_bca_data_handler);

    server.register_handler<GET>("/:supi/lcs-mo-data", &LCSMobileOriginatedDataRetrievalApi::get_lcs_mo_data_handler);

    server.register_handler<GET>("/:ueId/lcs-privacy-data", &LCSPrivacyDataRetrievalApi::get_lcs_privacy_data_handler);

    server.register_handler<PUT>("/:supi/am-data/cag-ack", &ProvidingAcknowledgementOfCAGUpdateApi::c_ag_ack_handler);

    server.register_handler<PUT>("/:supi/am-data/subscribed-snssais-ack", &ProvidingAcknowledgementOfSNSSAIsUpdateApi::s_nssais_ack_handler);

    server.register_handler<PUT>("/:supi/am-data/sor-ack", &ProvidingAcknowledgementOfSteeringOfRoamingApi::sor_ack_info_handler);

    server.register_handler<PUT>("/:supi/am-data/upu-ack", &ProvidingAcknowledgementOfUEParametersUpdateApi::upu_ack_handler);

    server.register_handler<GET>("/:supi", &RetrievalOfMultipleDataSetsApi::get_data_sets_handler);

    server.register_handler<GET>("/shared-data", &RetrievalOfSharedDataApi::get_shared_data_handler);

    server.register_handler<GET>("/:supi/smf-select-data", &SMFSelectionSubscriptionDataRetrievalApi::get_smf_sel_data_handler);

    server.register_handler<GET>("/:supi/sms-mng-data", &SMSManagementSubscriptionDataRetrievalApi::get_sms_mngt_data_handler);

    server.register_handler<GET>("/:supi/sms-data", &SMSSubscriptionDataRetrievalApi::get_sms_data_handler);

    server.register_handler<GET>("/:supi/sm-data", &SessionManagementSubscriptionDataRetrievalApi::get_sm_data_handler);

    server.register_handler<GET>("/:supi/nssai", &SliceSelectionSubscriptionDataRetrievalApi::get_nssai_handler);

    server.register_handler<POST>("/:ueId/sdm-subscriptions", &SubscriptionCreationApi::subscribe_handler);

    server.register_handler<POST>("/shared-data-subscriptions", &SubscriptionCreationForSharedDataApi::subscribe_to_shared_data_handler);

    server.register_handler<DELETE>("/:ueId/sdm-subscriptions/:subscriptionId", &SubscriptionDeletionApi::unsubscribe_handler);

    server.register_handler<DELETE>("/shared-data-subscriptions/:subscriptionId", &SubscriptionDeletionForSharedDataApi::unsubscribe_for_shared_data_handler);

    server.register_handler<PATCH>("/:ueId/sdm-subscriptions/:subscriptionId", &SubscriptionModificationApi::modify_handler);

    server.register_handler<PATCH>("/shared-data-subscriptions/:subscriptionId", &SubscriptionModificationApi::modify_shared_data_subs_handler);

    server.register_handler<GET>("/:supi/trace-data", &TraceConfigurationDataRetrievalApi::get_trace_config_data_handler);

    server.register_handler<POST>("/:supi/am-data/update-sor", &TriggerSORInfoUpdateApi::update_sor_info_handler);

    server.register_handler<GET>("/:supi/ue-context-in-amf-data", &UEContextInAMFDataRetrievalApi::get_ue_ctx_in_amf_data_handler);

    server.register_handler<GET>("/:supi/ue-context-in-smf-data", &UEContextInSMFDataRetrievalApi::get_ue_ctx_in_smf_data_handler);

    server.register_handler<GET>("/:supi/ue-context-in-smsf-data", &UEContextInSMSFDataRetrievalApi::get_ue_ctx_in_smsf_data_handler);

    server.register_handler<GET>("/:supi/v2x-data", &V2XSubscriptionDataRetrievalApi::get_v2x_data_handler);

    // ssl? server start
    if (argc >= 6)
    {
      boost::asio::ssl::context tls(boost::asio::ssl::context::sslv23);
      tls.use_private_key_file(argv[4], boost::asio::ssl::context::pem);
      tls.use_certificate_chain_file(argv[5]);

      configure_tls_context_easy(ec, tls);

      if (server.listen_and_serve(ec, tls, addr, port))
      {
        std::cerr << "error: " << ec.message() << std::endl;
      }
    }
    else
    {
      if (server.listen_and_serve(ec, addr, port))
      {
        std::cerr << "error: " << ec.message() << std::endl;
      }
    }
  }
  catch (std::exception &e)
  {
    std::cerr << "exception: " << e.what() << "\n";
  }

  return 0;
}
