/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TraceData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TraceData::TraceData()
{
    m_TraceRef = utility::conversions::to_string_t("");
    m_TraceRefIsSet = false;
    m_TraceDepthIsSet = false;
    m_NeTypeList = utility::conversions::to_string_t("");
    m_NeTypeListIsSet = false;
    m_EventList = utility::conversions::to_string_t("");
    m_EventListIsSet = false;
    m_CollectionEntityIpv4Addr = utility::conversions::to_string_t("");
    m_CollectionEntityIpv4AddrIsSet = false;
    m_CollectionEntityIpv6Addr = utility::conversions::to_string_t("");
    m_CollectionEntityIpv6AddrIsSet = false;
    m_InterfaceList = utility::conversions::to_string_t("");
    m_InterfaceListIsSet = false;
}

TraceData::~TraceData()
{
}

void TraceData::validate()
{
    // TODO: implement validation
}

web::json::value TraceData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TraceRefIsSet)
    {
        val[utility::conversions::to_string_t("traceRef")] = ModelBase::toJson(m_TraceRef);
    }
    if(m_TraceDepthIsSet)
    {
        val[utility::conversions::to_string_t("traceDepth")] = ModelBase::toJson(m_TraceDepth);
    }
    if(m_NeTypeListIsSet)
    {
        val[utility::conversions::to_string_t("neTypeList")] = ModelBase::toJson(m_NeTypeList);
    }
    if(m_EventListIsSet)
    {
        val[utility::conversions::to_string_t("eventList")] = ModelBase::toJson(m_EventList);
    }
    if(m_CollectionEntityIpv4AddrIsSet)
    {
        val[utility::conversions::to_string_t("collectionEntityIpv4Addr")] = ModelBase::toJson(m_CollectionEntityIpv4Addr);
    }
    if(m_CollectionEntityIpv6AddrIsSet)
    {
        val[utility::conversions::to_string_t("collectionEntityIpv6Addr")] = ModelBase::toJson(m_CollectionEntityIpv6Addr);
    }
    if(m_InterfaceListIsSet)
    {
        val[utility::conversions::to_string_t("interfaceList")] = ModelBase::toJson(m_InterfaceList);
    }

    return val;
}

bool TraceData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("traceRef")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traceRef"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_traceRef;
            ok &= ModelBase::fromJson(fieldValue, refVal_traceRef);
            setTraceRef(refVal_traceRef);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("traceDepth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traceDepth"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TraceDepth> refVal_traceDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_traceDepth);
            setTraceDepth(refVal_traceDepth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("neTypeList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("neTypeList"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_neTypeList;
            ok &= ModelBase::fromJson(fieldValue, refVal_neTypeList);
            setNeTypeList(refVal_neTypeList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventList"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_eventList;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventList);
            setEventList(refVal_eventList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collectionEntityIpv4Addr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionEntityIpv4Addr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_collectionEntityIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionEntityIpv4Addr);
            setCollectionEntityIpv4Addr(refVal_collectionEntityIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collectionEntityIpv6Addr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionEntityIpv6Addr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_collectionEntityIpv6Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionEntityIpv6Addr);
            setCollectionEntityIpv6Addr(refVal_collectionEntityIpv6Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interfaceList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("interfaceList"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_interfaceList;
            ok &= ModelBase::fromJson(fieldValue, refVal_interfaceList);
            setInterfaceList(refVal_interfaceList);
        }
    }
    return ok;
}

void TraceData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TraceRefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceRef"), m_TraceRef));
    }
    if(m_TraceDepthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceDepth"), m_TraceDepth));
    }
    if(m_NeTypeListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("neTypeList"), m_NeTypeList));
    }
    if(m_EventListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventList"), m_EventList));
    }
    if(m_CollectionEntityIpv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionEntityIpv4Addr"), m_CollectionEntityIpv4Addr));
    }
    if(m_CollectionEntityIpv6AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionEntityIpv6Addr"), m_CollectionEntityIpv6Addr));
    }
    if(m_InterfaceListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("interfaceList"), m_InterfaceList));
    }
}

bool TraceData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("traceRef")))
    {
        utility::string_t refVal_traceRef;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceRef")), refVal_traceRef );
        setTraceRef(refVal_traceRef);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("traceDepth")))
    {
        std::shared_ptr<TraceDepth> refVal_traceDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceDepth")), refVal_traceDepth );
        setTraceDepth(refVal_traceDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("neTypeList")))
    {
        utility::string_t refVal_neTypeList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("neTypeList")), refVal_neTypeList );
        setNeTypeList(refVal_neTypeList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventList")))
    {
        utility::string_t refVal_eventList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventList")), refVal_eventList );
        setEventList(refVal_eventList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collectionEntityIpv4Addr")))
    {
        utility::string_t refVal_collectionEntityIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionEntityIpv4Addr")), refVal_collectionEntityIpv4Addr );
        setCollectionEntityIpv4Addr(refVal_collectionEntityIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collectionEntityIpv6Addr")))
    {
        utility::string_t refVal_collectionEntityIpv6Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionEntityIpv6Addr")), refVal_collectionEntityIpv6Addr );
        setCollectionEntityIpv6Addr(refVal_collectionEntityIpv6Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interfaceList")))
    {
        utility::string_t refVal_interfaceList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("interfaceList")), refVal_interfaceList );
        setInterfaceList(refVal_interfaceList);
    }
    return ok;
}

utility::string_t TraceData::getTraceRef() const
{
    return m_TraceRef;
}

void TraceData::setTraceRef(const utility::string_t& value)
{
    m_TraceRef = value;
    m_TraceRefIsSet = true;
}

bool TraceData::traceRefIsSet() const
{
    return m_TraceRefIsSet;
}

void TraceData::unsetTraceRef()
{
    m_TraceRefIsSet = false;
}
std::shared_ptr<TraceDepth> TraceData::getTraceDepth() const
{
    return m_TraceDepth;
}

void TraceData::setTraceDepth(const std::shared_ptr<TraceDepth>& value)
{
    m_TraceDepth = value;
    m_TraceDepthIsSet = true;
}

bool TraceData::traceDepthIsSet() const
{
    return m_TraceDepthIsSet;
}

void TraceData::unsetTraceDepth()
{
    m_TraceDepthIsSet = false;
}
utility::string_t TraceData::getNeTypeList() const
{
    return m_NeTypeList;
}

void TraceData::setNeTypeList(const utility::string_t& value)
{
    m_NeTypeList = value;
    m_NeTypeListIsSet = true;
}

bool TraceData::neTypeListIsSet() const
{
    return m_NeTypeListIsSet;
}

void TraceData::unsetNeTypeList()
{
    m_NeTypeListIsSet = false;
}
utility::string_t TraceData::getEventList() const
{
    return m_EventList;
}

void TraceData::setEventList(const utility::string_t& value)
{
    m_EventList = value;
    m_EventListIsSet = true;
}

bool TraceData::eventListIsSet() const
{
    return m_EventListIsSet;
}

void TraceData::unsetEventList()
{
    m_EventListIsSet = false;
}
utility::string_t TraceData::getCollectionEntityIpv4Addr() const
{
    return m_CollectionEntityIpv4Addr;
}

void TraceData::setCollectionEntityIpv4Addr(const utility::string_t& value)
{
    m_CollectionEntityIpv4Addr = value;
    m_CollectionEntityIpv4AddrIsSet = true;
}

bool TraceData::collectionEntityIpv4AddrIsSet() const
{
    return m_CollectionEntityIpv4AddrIsSet;
}

void TraceData::unsetCollectionEntityIpv4Addr()
{
    m_CollectionEntityIpv4AddrIsSet = false;
}
utility::string_t TraceData::getCollectionEntityIpv6Addr() const
{
    return m_CollectionEntityIpv6Addr;
}

void TraceData::setCollectionEntityIpv6Addr(const utility::string_t& value)
{
    m_CollectionEntityIpv6Addr = value;
    m_CollectionEntityIpv6AddrIsSet = true;
}

bool TraceData::collectionEntityIpv6AddrIsSet() const
{
    return m_CollectionEntityIpv6AddrIsSet;
}

void TraceData::unsetCollectionEntityIpv6Addr()
{
    m_CollectionEntityIpv6AddrIsSet = false;
}
utility::string_t TraceData::getInterfaceList() const
{
    return m_InterfaceList;
}

void TraceData::setInterfaceList(const utility::string_t& value)
{
    m_InterfaceList = value;
    m_InterfaceListIsSet = true;
}

bool TraceData::interfaceListIsSet() const
{
    return m_InterfaceListIsSet;
}

void TraceData::unsetInterfaceList()
{
    m_InterfaceListIsSet = false;
}
}
}
}
}


