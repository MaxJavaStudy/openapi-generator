/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * WirelineArea.h
 *
 * 
 */

#ifndef WirelineArea_H_
#define WirelineArea_H_


#include <string>
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  WirelineArea: public jsonParser::jsonParser<WirelineArea>
{
public:
    explicit WirelineArea(){
        // constructor
        
            m_GlobalLineIdsFlag = (staticjson::Flags::Optional);

            m_HfcNIdsFlag = (staticjson::Flags::Optional);
m_AreaCodeB = "";
        
            m_AreaCodeBFlag = (staticjson::Flags::Optional);
m_AreaCodeC = "";
        
            m_AreaCodeCFlag = (staticjson::Flags::Optional);
    };
    virtual ~WirelineArea(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : GlobalLineIds HfcNIds AreaCodeB AreaCodeC 
        h->add_property("globalLineIds", &this->m_GlobalLineIds, m_GlobalLineIdsFlag);
        h->add_property("hfcNIds", &this->m_HfcNIds, m_HfcNIdsFlag);
        h->add_property("areaCodeB", &this->m_AreaCodeB, m_AreaCodeBFlag);
        h->add_property("areaCodeC", &this->m_AreaCodeC, m_AreaCodeCFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const WirelineArea& obj)
    {
                o<< convert2string(std::string("GlobalLineIds"), obj.m_GlobalLineIds) <<std::endl;
               o<< convert2string(std::string("HfcNIds"), obj.m_HfcNIds) <<std::endl;
       
        o << "AreaCodeB : " << obj.m_AreaCodeB << std::endl;

        o << "AreaCodeC : " << obj.m_AreaCodeC << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// WirelineArea members vars : GlobalLineIds HfcNIds AreaCodeB AreaCodeC 

    std::vector<std::string>&  getGlobalLineIds()
    {
        return m_GlobalLineIds;
    }
    void  setGlobalLineIds(std::vector<std::string> const& value)
    {
        m_GlobalLineIds = value;
    }

std::vector<std::string>&  getHfcNIds()
    {
        return m_HfcNIds;
    }
    void  setHfcNIds(std::vector<std::string> const& value)
    {
        m_HfcNIds = value;
    }

std::string  getAreaCodeB() const
    {
        return m_AreaCodeB;
    }
    void  setAreaCodeB(std::string const& value)
    {
        m_AreaCodeB = value;
    }

std::string  getAreaCodeC() const
    {
        return m_AreaCodeC;
    }
    void  setAreaCodeC(std::string const& value)
    {
        m_AreaCodeC = value;
    }



    
public:
    std::vector<std::string> m_GlobalLineIds;
    
    unsigned m_GlobalLineIdsFlag;
    std::vector<std::string> m_HfcNIds;
    
    unsigned m_HfcNIdsFlag;
    std::string m_AreaCodeB;
    
    unsigned m_AreaCodeBFlag;
    std::string m_AreaCodeC;
    
    unsigned m_AreaCodeCFlag;
  
};
}
}
}
}

#endif /* WirelineArea_H_ */
