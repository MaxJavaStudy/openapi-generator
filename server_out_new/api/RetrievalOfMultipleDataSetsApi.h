/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RetrievalOfMultipleDataSetsApi.h
 *
 * 
 */

#ifndef RetrievalOfMultipleDataSetsApi_H_
#define RetrievalOfMultipleDataSetsApi_H_






#include "RetrievalOfMultipleDataSetsApiImpl.h"

#include "DataSetName.h"
#include "PlmnId.h"
#include "ProblemDetails.h"
#include "Set.h"
#include "SubscriptionDataSets.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  RetrievalOfMultipleDataSetsApi {
public:
    RetrievalOfMultipleDataSetsApi();
    virtual ~RetrievalOfMultipleDataSetsApi() {}
 



private:
   

    static void get_data_sets_handler(request &requestIn,  response responseIn)
    {
    // Getting the path params
    std::string supi;

    if(request.param.count("supi"))
    {
      supi = request.param["supi"];
    }
    
    
    
    // Getting the query params
    auto datasetNamesQuery = request.uri().get("dataset-names");
    std::optional<std::vector<DataSetName>> datasetNames;

    if(!datasetNamesQuery.isEmpty()){
       staticjson::ParseStatus result;
        auto ret = datasetNames.decode(datasetNamesQuery, result);
        std::cout << "validation report is :" << ret.second << std::endl;
        std::cout << "parse result: " << (int)ret.first << std::endl;
        //std::move(datasetNamesQuery)    
    }
    auto plmnIdQuery = request.uri().get("plmn-id");
    std::optional<PlmnId> plmnId;

    if(!plmnIdQuery.isEmpty()){
       staticjson::ParseStatus result;
        auto ret = plmnId.decode(plmnIdQuery, result);
        std::cout << "validation report is :" << ret.second << std::endl;
        std::cout << "parse result: " << (int)ret.first << std::endl;
        //std::move(plmnIdQuery)    
    }
    auto supportedFeaturesQuery = request.uri().get("supported-features");
    std::optional<std::string> supportedFeatures;

    if(!supportedFeaturesQuery.isEmpty()){
      supportedFeatures = supportedFeaturesQuery;
    }
    
    // Getting the header params
    std::string ifNoneMatch;
    if(request.header().count("If-None-Match"))
    {
      ifNoneMatch = request.header()["If-None-Match"].value;
    }
    std::string ifModifiedSince;
    if(request.header().count("If-Modified-Since"))
    {
      ifModifiedSince = request.header()["If-Modified-Since"].value;
    }

    try {
    /// <param name="supi">Identifier of the UE</param>
    /// <param name="datasetNames">List of dataset names</param>
    /// <param name="plmnId">serving PLMN ID (optional, default to PlmnId())</param>
    /// <param name="supportedFeatures">Supported Features (optional, default to &quot;&quot;)</param>
    /// <param name="ifNoneMatch">Validator for conditional requests, as described in RFC 7232, 3.2 (optional, default to &quot;&quot;)</param>
    /// <param name="ifModifiedSince">Validator for conditional requests, as described in RFC 7232, 3.3 (optional, default to &quot;&quot;)</param>
      RetrievalOfMultipleDataSetsApiImpl::get_data_sets(supi, datasetNames, plmnId, supportedFeatures, ifNoneMatch, ifModifiedSince, response);
   
    }  catch (std::exception &e) {
        responseIn.write_head(500);
        responseIn.end(e.what());
        //send a 500 error
        return;
    }
    }
   
 

};

}
}
}
}

#endif /* RetrievalOfMultipleDataSetsApi_H_ */

