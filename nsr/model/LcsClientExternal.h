/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LcsClientExternal.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef LcsClientExternal_H_
#define LcsClientExternal_H_

#include "CSB_JsonParser.h"
#include "GeographicArea.h"
#include "PrivacyCheckRelatedAction.h"
#include "ValidTimePeriod.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class LcsClientExternal : public jsonParser::jsonParser<LcsClientExternal> {
public:
  explicit LcsClientExternal() {
    // constructor

    m_AllowedGeographicAreaFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AllowedGeographicAreaOutFlag.reset(new unsigned);
    *m_AllowedGeographicAreaOutFlag.get() = 0;

    m_PrivacyCheckRelatedActionFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PrivacyCheckRelatedActionOutFlag.reset(new unsigned);
    *m_PrivacyCheckRelatedActionOutFlag.get() = 0;

    m_ValidTimePeriodFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ValidTimePeriodOutFlag.reset(new unsigned);
    *m_ValidTimePeriodOutFlag.get() = 0;
  };
  virtual ~LcsClientExternal(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : AllowedGeographicArea
    // PrivacyCheckRelatedAction ValidTimePeriod
    h->add_optional_property(
        "allowedGeographicArea", &this->m_AllowedGeographicArea,
        m_AllowedGeographicAreaFlag, m_AllowedGeographicAreaOutFlag);
    h->add_optional_property(
        "privacyCheckRelatedAction", &this->m_PrivacyCheckRelatedAction,
        m_PrivacyCheckRelatedActionFlag, m_PrivacyCheckRelatedActionOutFlag);
    h->add_optional_property("validTimePeriod", &this->m_ValidTimePeriod,
                             m_ValidTimePeriodFlag, m_ValidTimePeriodOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const LcsClientExternal &obj) {
    o << "AllowedGeographicArea, optional flag is : "
      << *m_AllowedGeographicAreaOutFlag << std::endl;
    o << convert2string(std::string("AllowedGeographicArea"),
                        obj.m_AllowedGeographicArea)
      << std::endl;

    o << "PrivacyCheckRelatedAction, optional flag is : "
      << *m_PrivacyCheckRelatedActionOutFlag
      << ", content is : " << obj.m_PrivacyCheckRelatedAction << std::endl;

    o << "ValidTimePeriod, optional flag is : " << *m_ValidTimePeriodOutFlag
      << ", content is : " << obj.m_ValidTimePeriod << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// LcsClientExternal members vars : AllowedGeographicArea
  /// PrivacyCheckRelatedAction ValidTimePeriod

  std::vector<GeographicArea> &getAllowedGeographicArea() {
    return m_AllowedGeographicArea;
  }
  void setAllowedGeographicArea(std::vector<GeographicArea> const &value) {
    m_AllowedGeographicArea = value;
  }

  PrivacyCheckRelatedAction getPrivacyCheckRelatedAction() const {
    return m_PrivacyCheckRelatedAction;
  }
  void setPrivacyCheckRelatedAction(PrivacyCheckRelatedAction const &value) {
    m_PrivacyCheckRelatedAction = value;
  }

  ValidTimePeriod getValidTimePeriod() const { return m_ValidTimePeriod; }
  void setValidTimePeriod(ValidTimePeriod const &value) {
    m_ValidTimePeriod = value;
  }

public:
  std::vector<GeographicArea> m_AllowedGeographicArea;

  unsigned m_AllowedGeographicAreaFlag;
  shared_ptr<unsigned> m_AllowedGeographicAreaOutFlag;
  PrivacyCheckRelatedAction m_PrivacyCheckRelatedAction;

  unsigned m_PrivacyCheckRelatedActionFlag;
  shared_ptr<unsigned> m_PrivacyCheckRelatedActionOutFlag;
  ValidTimePeriod m_ValidTimePeriod;

  unsigned m_ValidTimePeriodFlag;
  shared_ptr<unsigned> m_ValidTimePeriodOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LcsClientExternal_H_ */
