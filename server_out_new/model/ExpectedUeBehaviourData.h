/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ExpectedUeBehaviourData.h
 *
 * 
 */

#ifndef ExpectedUeBehaviourData_H_
#define ExpectedUeBehaviourData_H_


#include "BatteryIndication.h"
#include "LocationArea.h"
#include "ScheduledCommunicationType.h"
#include "TrafficProfile.h"
#include <string>
#include "ScheduledCommunicationTime.h"
#include <vector>
#include "StationaryIndication.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  ExpectedUeBehaviourData: public jsonParser::jsonParser<ExpectedUeBehaviourData>
{
public:
    explicit ExpectedUeBehaviourData(){
        // constructor
        
            m_StationaryIndicationFlag = (staticjson::Flags::Optional);
m_CommunicationDurationTime = 0;
        
            m_CommunicationDurationTimeFlag = (staticjson::Flags::Optional);
m_PeriodicTime = 0;
        
            m_PeriodicTimeFlag = (staticjson::Flags::Optional);

            m_ScheduledCommunicationTimeFlag = (staticjson::Flags::Optional);

            m_ScheduledCommunicationTypeFlag = (staticjson::Flags::Optional);

            m_ExpectedUmtsFlag = (staticjson::Flags::Optional);

            m_TrafficProfileFlag = (staticjson::Flags::Optional);

            m_BatteryIndicationFlag = (staticjson::Flags::Optional);
m_ValidityTime = "";
        
            m_ValidityTimeFlag = (staticjson::Flags::Optional);
    };
    virtual ~ExpectedUeBehaviourData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : StationaryIndication CommunicationDurationTime PeriodicTime ScheduledCommunicationTime ScheduledCommunicationType ExpectedUmts TrafficProfile BatteryIndication ValidityTime 
        h->add_property("stationaryIndication", &this->m_StationaryIndication, m_StationaryIndicationFlag);
        h->add_property("communicationDurationTime", &this->m_CommunicationDurationTime, m_CommunicationDurationTimeFlag);
        h->add_property("periodicTime", &this->m_PeriodicTime, m_PeriodicTimeFlag);
        h->add_property("scheduledCommunicationTime", &this->m_ScheduledCommunicationTime, m_ScheduledCommunicationTimeFlag);
        h->add_property("scheduledCommunicationType", &this->m_ScheduledCommunicationType, m_ScheduledCommunicationTypeFlag);
        h->add_property("expectedUmts", &this->m_ExpectedUmts, m_ExpectedUmtsFlag);
        h->add_property("trafficProfile", &this->m_TrafficProfile, m_TrafficProfileFlag);
        h->add_property("batteryIndication", &this->m_BatteryIndication, m_BatteryIndicationFlag);
        h->add_property("validityTime", &this->m_ValidityTime, m_ValidityTimeFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const ExpectedUeBehaviourData& obj)
    {
        
        o << "StationaryIndication : " << obj.m_StationaryIndication << std::endl;

        o << "CommunicationDurationTime : " << obj.m_CommunicationDurationTime << std::endl;

        o << "PeriodicTime : " << obj.m_PeriodicTime << std::endl;

        o << "ScheduledCommunicationTime : " << obj.m_ScheduledCommunicationTime << std::endl;

        o << "ScheduledCommunicationType : " << obj.m_ScheduledCommunicationType << std::endl;
        o<< convert2string(std::string("ExpectedUmts"), obj.m_ExpectedUmts) <<std::endl;
       
        o << "TrafficProfile : " << obj.m_TrafficProfile << std::endl;

        o << "BatteryIndication : " << obj.m_BatteryIndication << std::endl;

        o << "ValidityTime : " << obj.m_ValidityTime << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// ExpectedUeBehaviourData members vars : StationaryIndication CommunicationDurationTime PeriodicTime ScheduledCommunicationTime ScheduledCommunicationType ExpectedUmts TrafficProfile BatteryIndication ValidityTime 

    StationaryIndication  getStationaryIndication() const
    {
        return m_StationaryIndication;
    }
    void  setStationaryIndication(StationaryIndication const& value)
    {
        m_StationaryIndication = value;
    }

int32_t  getCommunicationDurationTime() const
    {
        return m_CommunicationDurationTime;
    }
    void  setCommunicationDurationTime(int32_t const value)
    {
        m_CommunicationDurationTime = value;
    }

int32_t  getPeriodicTime() const
    {
        return m_PeriodicTime;
    }
    void  setPeriodicTime(int32_t const value)
    {
        m_PeriodicTime = value;
    }

ScheduledCommunicationTime  getScheduledCommunicationTime() const
    {
        return m_ScheduledCommunicationTime;
    }
    void  setScheduledCommunicationTime(ScheduledCommunicationTime const& value)
    {
        m_ScheduledCommunicationTime = value;
    }

ScheduledCommunicationType  getScheduledCommunicationType() const
    {
        return m_ScheduledCommunicationType;
    }
    void  setScheduledCommunicationType(ScheduledCommunicationType const& value)
    {
        m_ScheduledCommunicationType = value;
    }

std::vector<LocationArea>&  getExpectedUmts()
    {
        return m_ExpectedUmts;
    }
    void  setExpectedUmts(std::vector<LocationArea> const& value)
    {
        m_ExpectedUmts = value;
    }

TrafficProfile  getTrafficProfile() const
    {
        return m_TrafficProfile;
    }
    void  setTrafficProfile(TrafficProfile const& value)
    {
        m_TrafficProfile = value;
    }

BatteryIndication  getBatteryIndication() const
    {
        return m_BatteryIndication;
    }
    void  setBatteryIndication(BatteryIndication const& value)
    {
        m_BatteryIndication = value;
    }

std::string  getValidityTime() const
    {
        return m_ValidityTime;
    }
    void  setValidityTime(std::string const& value)
    {
        m_ValidityTime = value;
    }



    
public:
    StationaryIndication m_StationaryIndication;
    
    unsigned m_StationaryIndicationFlag;
    int32_t m_CommunicationDurationTime;
    
    unsigned m_CommunicationDurationTimeFlag;
    int32_t m_PeriodicTime;
    
    unsigned m_PeriodicTimeFlag;
    ScheduledCommunicationTime m_ScheduledCommunicationTime;
    
    unsigned m_ScheduledCommunicationTimeFlag;
    ScheduledCommunicationType m_ScheduledCommunicationType;
    
    unsigned m_ScheduledCommunicationTypeFlag;
    std::vector<LocationArea> m_ExpectedUmts;
    
    unsigned m_ExpectedUmtsFlag;
    TrafficProfile m_TrafficProfile;
    
    unsigned m_TrafficProfileFlag;
    BatteryIndication m_BatteryIndication;
    
    unsigned m_BatteryIndicationFlag;
    std::string m_ValidityTime;
    
    unsigned m_ValidityTimeFlag;
  
};
}
}
}
}

#endif /* ExpectedUeBehaviourData_H_ */
