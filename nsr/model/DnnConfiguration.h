/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DnnConfiguration.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef DnnConfiguration_H_
#define DnnConfiguration_H_

#include "Ambr.h"
#include "CSB_JsonParser.h"
#include "IpAddress.h"
#include "PduSessionTypes.h"
#include "SscModes.h"
#include "SubscribedDefaultQos.h"
#include "UpSecurity.h"
#include "VzDnnConf.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class DnnConfiguration : public jsonParser::jsonParser<DnnConfiguration> {
public:
  explicit DnnConfiguration() {
    // constructor
    m_DefaultSessionType = "";

    m_DefaultSessionTypeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DefaultSessionTypeOutFlag.reset(new unsigned);
    *m_DefaultSessionTypeOutFlag.get() = 0;

    m_PduSessionTypesFlag = staticjson::Flags::Default;
    m_PduSessionTypesOutFlag.reset(new unsigned);
    *m_PduSessionTypesOutFlag.get() = 0;

    m_SscModesFlag = staticjson::Flags::Default;
    m_SscModesOutFlag.reset(new unsigned);
    *m_SscModesOutFlag.get() = 0;
    m_IwkEpsInd = false;

    m_IwkEpsIndFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_IwkEpsIndOutFlag.reset(new unsigned);
    *m_IwkEpsIndOutFlag.get() = 0;

    m_r_5gQosProfileFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_r_5gQosProfileOutFlag.reset(new unsigned);
    *m_r_5gQosProfileOutFlag.get() = 0;

    m_SessionAmbrFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SessionAmbrOutFlag.reset(new unsigned);
    *m_SessionAmbrOutFlag.get() = 0;
    m_r_3gppChargingCharacteristics = "";

    m_r_3gppChargingCharacteristicsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_r_3gppChargingCharacteristicsOutFlag.reset(new unsigned);
    *m_r_3gppChargingCharacteristicsOutFlag.get() = 0;

    m_StaticIpAddressFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_StaticIpAddressOutFlag.reset(new unsigned);
    *m_StaticIpAddressOutFlag.get() = 0;

    m_UpSecurityFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UpSecurityOutFlag.reset(new unsigned);
    *m_UpSecurityOutFlag.get() = 0;

    m_VendorSpecific_012951Flag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_VendorSpecific_012951OutFlag.reset(new unsigned);
    *m_VendorSpecific_012951OutFlag.get() = 0;
  };
  virtual ~DnnConfiguration(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DefaultSessionType PduSessionTypes
    // SscModes IwkEpsInd r_5gQosProfile SessionAmbr
    // r_3gppChargingCharacteristics StaticIpAddress UpSecurity
    // VendorSpecific_012951
    h->add_optional_property("defaultSessionType", &this->m_DefaultSessionType,
                             m_DefaultSessionTypeFlag,
                             m_DefaultSessionTypeOutFlag);
    h->add_property("pduSessionTypes", &this->m_PduSessionTypes,
                    m_PduSessionTypesFlag);
    h->add_property("sscModes", &this->m_SscModes, m_SscModesFlag);
    h->add_optional_property("iwkEpsInd", &this->m_IwkEpsInd, m_IwkEpsIndFlag,
                             m_IwkEpsIndOutFlag);
    h->add_optional_property("r5gQosProfile", &this->m_r_5gQosProfile,
                             m_r_5gQosProfileFlag, m_r_5gQosProfileOutFlag);
    h->add_optional_property("sessionAmbr", &this->m_SessionAmbr,
                             m_SessionAmbrFlag, m_SessionAmbrOutFlag);
    h->add_optional_property("r3gppChargingCharacteristics",
                             &this->m_r_3gppChargingCharacteristics,
                             m_r_3gppChargingCharacteristicsFlag,
                             m_r_3gppChargingCharacteristicsOutFlag);
    h->add_optional_property("staticIpAddress", &this->m_StaticIpAddress,
                             m_StaticIpAddressFlag, m_StaticIpAddressOutFlag);
    h->add_optional_property("upSecurity", &this->m_UpSecurity,
                             m_UpSecurityFlag, m_UpSecurityOutFlag);
    h->add_optional_property(
        "vendorSpecific012951", &this->m_VendorSpecific_012951,
        m_VendorSpecific_012951Flag, m_VendorSpecific_012951OutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const DnnConfiguration &obj) {

    o << "DefaultSessionType, optional flag is : "
      << *m_DefaultSessionTypeOutFlag
      << ", content is : " << obj.m_DefaultSessionType << std::endl;

    o << "PduSessionTypes : " << obj.m_PduSessionTypes << std::endl;

    o << "SscModes : " << obj.m_SscModes << std::endl;

    o << "IwkEpsInd, optional flag is : " << *m_IwkEpsIndOutFlag
      << ", content is : " << obj.m_IwkEpsInd << std::endl;

    o << "r_5gQosProfile, optional flag is : " << *m_r_5gQosProfileOutFlag
      << ", content is : " << obj.m_r_5gQosProfile << std::endl;

    o << "SessionAmbr, optional flag is : " << *m_SessionAmbrOutFlag
      << ", content is : " << obj.m_SessionAmbr << std::endl;

    o << "r_3gppChargingCharacteristics, optional flag is : "
      << *m_r_3gppChargingCharacteristicsOutFlag
      << ", content is : " << obj.m_r_3gppChargingCharacteristics << std::endl;
    o << "StaticIpAddress, optional flag is : " << *m_StaticIpAddressOutFlag
      << std::endl;
    o << convert2string(std::string("StaticIpAddress"), obj.m_StaticIpAddress)
      << std::endl;

    o << "UpSecurity, optional flag is : " << *m_UpSecurityOutFlag
      << ", content is : " << obj.m_UpSecurity << std::endl;

    o << "VendorSpecific_012951, optional flag is : "
      << *m_VendorSpecific_012951OutFlag
      << ", content is : " << obj.m_VendorSpecific_012951 << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// DnnConfiguration members vars : DefaultSessionType PduSessionTypes
  /// SscModes IwkEpsInd r_5gQosProfile SessionAmbr
  /// r_3gppChargingCharacteristics StaticIpAddress UpSecurity
  /// VendorSpecific_012951

  std::string getDefaultSessionType() const { return m_DefaultSessionType; }
  void setDefaultSessionType(std::string const &value) {
    m_DefaultSessionType = value;
  }

  PduSessionTypes getPduSessionTypes() const { return m_PduSessionTypes; }
  void setPduSessionTypes(PduSessionTypes const &value) {
    m_PduSessionTypes = value;
  }

  SscModes getSscModes() const { return m_SscModes; }
  void setSscModes(SscModes const &value) { m_SscModes = value; }

  bool isIwkEpsInd() const { return m_IwkEpsInd; }
  void setIwkEpsInd(bool const value) { m_IwkEpsInd = value; }

  SubscribedDefaultQos getR5gQosProfile() const { return m_r_5gQosProfile; }
  void setR5gQosProfile(SubscribedDefaultQos const &value) {
    m_r_5gQosProfile = value;
  }

  Ambr getSessionAmbr() const { return m_SessionAmbr; }
  void setSessionAmbr(Ambr const &value) { m_SessionAmbr = value; }

  std::string getR3gppChargingCharacteristics() const {
    return m_r_3gppChargingCharacteristics;
  }
  void setR3gppChargingCharacteristics(std::string const &value) {
    m_r_3gppChargingCharacteristics = value;
  }

  std::vector<IpAddress> &getStaticIpAddress() { return m_StaticIpAddress; }
  void setStaticIpAddress(std::vector<IpAddress> const &value) {
    m_StaticIpAddress = value;
  }

  UpSecurity getUpSecurity() const { return m_UpSecurity; }
  void setUpSecurity(UpSecurity const &value) { m_UpSecurity = value; }

  VzDnnConf getVendorSpecific012951() const { return m_VendorSpecific_012951; }
  void setVendorSpecific012951(VzDnnConf const &value) {
    m_VendorSpecific_012951 = value;
  }

public:
  std::string m_DefaultSessionType;

  unsigned m_DefaultSessionTypeFlag;
  shared_ptr<unsigned> m_DefaultSessionTypeOutFlag;
  PduSessionTypes m_PduSessionTypes;

  unsigned m_PduSessionTypesFlag;
  shared_ptr<unsigned> m_PduSessionTypesOutFlag;
  SscModes m_SscModes;

  unsigned m_SscModesFlag;
  shared_ptr<unsigned> m_SscModesOutFlag;
  bool m_IwkEpsInd;

  unsigned m_IwkEpsIndFlag;
  shared_ptr<unsigned> m_IwkEpsIndOutFlag;
  SubscribedDefaultQos m_r_5gQosProfile;

  unsigned m_r_5gQosProfileFlag;
  shared_ptr<unsigned> m_r_5gQosProfileOutFlag;
  Ambr m_SessionAmbr;

  unsigned m_SessionAmbrFlag;
  shared_ptr<unsigned> m_SessionAmbrOutFlag;
  std::string m_r_3gppChargingCharacteristics;

  unsigned m_r_3gppChargingCharacteristicsFlag;
  shared_ptr<unsigned> m_r_3gppChargingCharacteristicsOutFlag;
  std::vector<IpAddress> m_StaticIpAddress;

  unsigned m_StaticIpAddressFlag;
  shared_ptr<unsigned> m_StaticIpAddressOutFlag;
  UpSecurity m_UpSecurity;

  unsigned m_UpSecurityFlag;
  shared_ptr<unsigned> m_UpSecurityOutFlag;
  VzDnnConf m_VendorSpecific_012951;

  unsigned m_VendorSpecific_012951Flag;
  shared_ptr<unsigned> m_VendorSpecific_012951OutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DnnConfiguration_H_ */
