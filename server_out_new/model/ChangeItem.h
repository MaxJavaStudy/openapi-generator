/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChangeItem.h
 *
 * 
 */

#ifndef ChangeItem_H_
#define ChangeItem_H_


#include "ChangeType.h"
#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  ChangeItem: public jsonParser::jsonParser<ChangeItem>
{
public:
    explicit ChangeItem(){
        // constructor
        
            m_OpFlag = staticjson::Flags::Default;
m_Path = "";
        
            m_PathFlag = staticjson::Flags::Default;
m_From = "";
        
            m_FromFlag = (staticjson::Flags::Optional);
m_OrigValue = "";
        
            m_OrigValueFlag = (staticjson::Flags::Optional);
m_NewValue = "";
        
            m_NewValueFlag = (staticjson::Flags::Optional);
    };
    virtual ~ChangeItem(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : Op Path From OrigValue NewValue 
        h->add_property("op", &this->m_Op, m_OpFlag);
        h->add_property("path", &this->m_Path, m_PathFlag);
        h->add_property("from", &this->m_From, m_FromFlag);
        h->add_property("origValue", &this->m_OrigValue, m_OrigValueFlag);
        h->add_property("newValue", &this->m_NewValue, m_NewValueFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const ChangeItem& obj)
    {
        
        o << "Op : " << obj.m_Op << std::endl;

        o << "Path : " << obj.m_Path << std::endl;

        o << "From : " << obj.m_From << std::endl;

        o << "OrigValue : " << obj.m_OrigValue << std::endl;

        o << "NewValue : " << obj.m_NewValue << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// ChangeItem members vars : Op Path From OrigValue NewValue 

    ChangeType  getOp() const
    {
        return m_Op;
    }
    void  setOp(ChangeType const& value)
    {
        m_Op = value;
    }

std::string  getPath() const
    {
        return m_Path;
    }
    void  setPath(std::string const& value)
    {
        m_Path = value;
    }

std::string  getFrom() const
    {
        return m_From;
    }
    void  setFrom(std::string const& value)
    {
        m_From = value;
    }

std::string  getOrigValue() const
    {
        return m_OrigValue;
    }
    void  setOrigValue(std::string const& value)
    {
        m_OrigValue = value;
    }

std::string  getNewValue() const
    {
        return m_NewValue;
    }
    void  setNewValue(std::string const& value)
    {
        m_NewValue = value;
    }



    
public:
    ChangeType m_Op;
    
    unsigned m_OpFlag;
    std::string m_Path;
    
    unsigned m_PathFlag;
    std::string m_From;
    
    unsigned m_FromFlag;
    std::string m_OrigValue;
    
    unsigned m_OrigValueFlag;
    std::string m_NewValue;
    
    unsigned m_NewValueFlag;
  
};
}
}
}
}

#endif /* ChangeItem_H_ */
