/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Nssai.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef Nssai_H_
#define Nssai_H_

#include "CSB_JsonParser.h"
#include "Snssai.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class Nssai : public jsonParser::jsonParser<Nssai> {
public:
  explicit Nssai() {
    // constructor
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SupportedFeaturesOutFlag.reset(new unsigned);
    *m_SupportedFeaturesOutFlag.get() = 0;

    m_DefaultSingleNssaisFlag = staticjson::Flags::Default;
    m_DefaultSingleNssaisOutFlag.reset(new unsigned);
    *m_DefaultSingleNssaisOutFlag.get() = 0;

    m_SingleNssaisFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SingleNssaisOutFlag.reset(new unsigned);
    *m_SingleNssaisOutFlag.get() = 0;
  };
  virtual ~Nssai(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SupportedFeatures DefaultSingleNssais
    // SingleNssais
    h->add_optional_property("supportedFeatures", &this->m_SupportedFeatures,
                             m_SupportedFeaturesFlag,
                             m_SupportedFeaturesOutFlag);
    h->add_property("defaultSingleNssais", &this->m_DefaultSingleNssais,
                    m_DefaultSingleNssaisFlag);
    h->add_optional_property("singleNssais", &this->m_SingleNssais,
                             m_SingleNssaisFlag, m_SingleNssaisOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const Nssai &obj) {

    o << "SupportedFeatures, optional flag is : " << *m_SupportedFeaturesOutFlag
      << ", content is : " << obj.m_SupportedFeatures << std::endl;
    o << convert2string(std::string("DefaultSingleNssais"),
                        obj.m_DefaultSingleNssais)
      << std::endl;
    o << "SingleNssais, optional flag is : " << *m_SingleNssaisOutFlag
      << std::endl;
    o << convert2string(std::string("SingleNssais"), obj.m_SingleNssais)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// Nssai members vars : SupportedFeatures DefaultSingleNssais SingleNssais

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

  std::vector<Snssai> &getDefaultSingleNssais() {
    return m_DefaultSingleNssais;
  }
  void setDefaultSingleNssais(std::vector<Snssai> const &value) {
    m_DefaultSingleNssais = value;
  }

  std::vector<Snssai> &getSingleNssais() { return m_SingleNssais; }
  void setSingleNssais(std::vector<Snssai> const &value) {
    m_SingleNssais = value;
  }

public:
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
  shared_ptr<unsigned> m_SupportedFeaturesOutFlag;
  std::vector<Snssai> m_DefaultSingleNssais;

  unsigned m_DefaultSingleNssaisFlag;
  shared_ptr<unsigned> m_DefaultSingleNssaisOutFlag;
  std::vector<Snssai> m_SingleNssais;

  unsigned m_SingleNssaisFlag;
  shared_ptr<unsigned> m_SingleNssaisOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Nssai_H_ */
