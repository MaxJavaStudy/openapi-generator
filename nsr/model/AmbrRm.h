/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmbrRm.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef AmbrRm_H_
#define AmbrRm_H_

#include "Ambr.h"
#include "CSB_JsonParser.h"
#include "NullValue.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AmbrRm : public jsonParser::jsonParser<AmbrRm> {
public:
  explicit AmbrRm() {
    // constructor
    m_Uplink = "";

    m_UplinkFlag = staticjson::Flags::Default;
    m_UplinkOutFlag.reset(new unsigned);
    *m_UplinkOutFlag.get() = 0;
    m_Downlink = "";

    m_DownlinkFlag = staticjson::Flags::Default;
    m_DownlinkOutFlag.reset(new unsigned);
    *m_DownlinkOutFlag.get() = 0;
  };
  virtual ~AmbrRm(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Uplink Downlink
    h->add_property("uplink", &this->m_Uplink, m_UplinkFlag);
    h->add_property("downlink", &this->m_Downlink, m_DownlinkFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const AmbrRm &obj) {

    o << "Uplink : " << obj.m_Uplink << std::endl;

    o << "Downlink : " << obj.m_Downlink << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// AmbrRm members vars : Uplink Downlink

  std::string getUplink() const { return m_Uplink; }
  void setUplink(std::string const &value) { m_Uplink = value; }

  std::string getDownlink() const { return m_Downlink; }
  void setDownlink(std::string const &value) { m_Downlink = value; }

public:
  std::string m_Uplink;

  unsigned m_UplinkFlag;
  shared_ptr<unsigned> m_UplinkOutFlag;
  std::string m_Downlink;

  unsigned m_DownlinkFlag;
  shared_ptr<unsigned> m_DownlinkOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AmbrRm_H_ */
