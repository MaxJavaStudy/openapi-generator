/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PtwParameters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PtwParameters::PtwParameters()
{
    m_OperationModeIsSet = false;
    m_PtwValue = utility::conversions::to_string_t("");
    m_PtwValueIsSet = false;
}

PtwParameters::~PtwParameters()
{
}

void PtwParameters::validate()
{
    // TODO: implement validation
}

web::json::value PtwParameters::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OperationModeIsSet)
    {
        val[utility::conversions::to_string_t("operationMode")] = ModelBase::toJson(m_OperationMode);
    }
    if(m_PtwValueIsSet)
    {
        val[utility::conversions::to_string_t("ptwValue")] = ModelBase::toJson(m_PtwValue);
    }

    return val;
}

bool PtwParameters::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("operationMode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("operationMode"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OperationMode> refVal_operationMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_operationMode);
            setOperationMode(refVal_operationMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ptwValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ptwValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ptwValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_ptwValue);
            setPtwValue(refVal_ptwValue);
        }
    }
    return ok;
}

void PtwParameters::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_OperationModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operationMode"), m_OperationMode));
    }
    if(m_PtwValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ptwValue"), m_PtwValue));
    }
}

bool PtwParameters::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("operationMode")))
    {
        std::shared_ptr<OperationMode> refVal_operationMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("operationMode")), refVal_operationMode );
        setOperationMode(refVal_operationMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ptwValue")))
    {
        utility::string_t refVal_ptwValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ptwValue")), refVal_ptwValue );
        setPtwValue(refVal_ptwValue);
    }
    return ok;
}

std::shared_ptr<OperationMode> PtwParameters::getOperationMode() const
{
    return m_OperationMode;
}

void PtwParameters::setOperationMode(const std::shared_ptr<OperationMode>& value)
{
    m_OperationMode = value;
    m_OperationModeIsSet = true;
}

bool PtwParameters::operationModeIsSet() const
{
    return m_OperationModeIsSet;
}

void PtwParameters::unsetOperationMode()
{
    m_OperationModeIsSet = false;
}
utility::string_t PtwParameters::getPtwValue() const
{
    return m_PtwValue;
}

void PtwParameters::setPtwValue(const utility::string_t& value)
{
    m_PtwValue = value;
    m_PtwValueIsSet = true;
}

bool PtwParameters::ptwValueIsSet() const
{
    return m_PtwValueIsSet;
}

void PtwParameters::unsetPtwValue()
{
    m_PtwValueIsSet = false;
}
}
}
}
}


