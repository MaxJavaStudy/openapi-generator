/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Lpi.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Lpi::Lpi()
{
    m_LocationPrivacyIndIsSet = false;
    m_ValidTimePeriodIsSet = false;
}

Lpi::~Lpi()
{
}

void Lpi::validate()
{
    // TODO: implement validation
}

web::json::value Lpi::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LocationPrivacyIndIsSet)
    {
        val[utility::conversions::to_string_t("locationPrivacyInd")] = ModelBase::toJson(m_LocationPrivacyInd);
    }
    if(m_ValidTimePeriodIsSet)
    {
        val[utility::conversions::to_string_t("validTimePeriod")] = ModelBase::toJson(m_ValidTimePeriod);
    }

    return val;
}

bool Lpi::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("locationPrivacyInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locationPrivacyInd"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LocationPrivacyInd> refVal_locationPrivacyInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_locationPrivacyInd);
            setLocationPrivacyInd(refVal_locationPrivacyInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validTimePeriod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validTimePeriod"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ValidTimePeriod> refVal_validTimePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_validTimePeriod);
            setValidTimePeriod(refVal_validTimePeriod);
        }
    }
    return ok;
}

void Lpi::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LocationPrivacyIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locationPrivacyInd"), m_LocationPrivacyInd));
    }
    if(m_ValidTimePeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validTimePeriod"), m_ValidTimePeriod));
    }
}

bool Lpi::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("locationPrivacyInd")))
    {
        std::shared_ptr<LocationPrivacyInd> refVal_locationPrivacyInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locationPrivacyInd")), refVal_locationPrivacyInd );
        setLocationPrivacyInd(refVal_locationPrivacyInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validTimePeriod")))
    {
        std::shared_ptr<ValidTimePeriod> refVal_validTimePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validTimePeriod")), refVal_validTimePeriod );
        setValidTimePeriod(refVal_validTimePeriod);
    }
    return ok;
}

std::shared_ptr<LocationPrivacyInd> Lpi::getLocationPrivacyInd() const
{
    return m_LocationPrivacyInd;
}

void Lpi::setLocationPrivacyInd(const std::shared_ptr<LocationPrivacyInd>& value)
{
    m_LocationPrivacyInd = value;
    m_LocationPrivacyIndIsSet = true;
}

bool Lpi::locationPrivacyIndIsSet() const
{
    return m_LocationPrivacyIndIsSet;
}

void Lpi::unsetLocationPrivacyInd()
{
    m_LocationPrivacyIndIsSet = false;
}
std::shared_ptr<ValidTimePeriod> Lpi::getValidTimePeriod() const
{
    return m_ValidTimePeriod;
}

void Lpi::setValidTimePeriod(const std::shared_ptr<ValidTimePeriod>& value)
{
    m_ValidTimePeriod = value;
    m_ValidTimePeriodIsSet = true;
}

bool Lpi::validTimePeriodIsSet() const
{
    return m_ValidTimePeriodIsSet;
}

void Lpi::unsetValidTimePeriod()
{
    m_ValidTimePeriodIsSet = false;
}
}
}
}
}


