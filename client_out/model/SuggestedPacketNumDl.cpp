/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SuggestedPacketNumDl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SuggestedPacketNumDl::SuggestedPacketNumDl()
{
    m_SuggestedPacketNumDl = 0;
    m_SuggestedPacketNumDlIsSet = false;
    m_ValidityTime = utility::datetime();
    m_ValidityTimeIsSet = false;
}

SuggestedPacketNumDl::~SuggestedPacketNumDl()
{
}

void SuggestedPacketNumDl::validate()
{
    // TODO: implement validation
}

web::json::value SuggestedPacketNumDl::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SuggestedPacketNumDlIsSet)
    {
        val[utility::conversions::to_string_t("suggestedPacketNumDl")] = ModelBase::toJson(m_SuggestedPacketNumDl);
    }
    if(m_ValidityTimeIsSet)
    {
        val[utility::conversions::to_string_t("validityTime")] = ModelBase::toJson(m_ValidityTime);
    }

    return val;
}

bool SuggestedPacketNumDl::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("suggestedPacketNumDl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suggestedPacketNumDl"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_suggestedPacketNumDl;
            ok &= ModelBase::fromJson(fieldValue, refVal_suggestedPacketNumDl);
            setSuggestedPacketNumDl(refVal_suggestedPacketNumDl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validityTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validityTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_validityTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_validityTime);
            setValidityTime(refVal_validityTime);
        }
    }
    return ok;
}

void SuggestedPacketNumDl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SuggestedPacketNumDlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suggestedPacketNumDl"), m_SuggestedPacketNumDl));
    }
    if(m_ValidityTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validityTime"), m_ValidityTime));
    }
}

bool SuggestedPacketNumDl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("suggestedPacketNumDl")))
    {
        int32_t refVal_suggestedPacketNumDl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suggestedPacketNumDl")), refVal_suggestedPacketNumDl );
        setSuggestedPacketNumDl(refVal_suggestedPacketNumDl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validityTime")))
    {
        utility::datetime refVal_validityTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validityTime")), refVal_validityTime );
        setValidityTime(refVal_validityTime);
    }
    return ok;
}

int32_t SuggestedPacketNumDl::getSuggestedPacketNumDl() const
{
    return m_SuggestedPacketNumDl;
}

void SuggestedPacketNumDl::setSuggestedPacketNumDl(int32_t value)
{
    m_SuggestedPacketNumDl = value;
    m_SuggestedPacketNumDlIsSet = true;
}

bool SuggestedPacketNumDl::suggestedPacketNumDlIsSet() const
{
    return m_SuggestedPacketNumDlIsSet;
}

void SuggestedPacketNumDl::unsetSuggestedPacketNumDl()
{
    m_SuggestedPacketNumDlIsSet = false;
}
utility::datetime SuggestedPacketNumDl::getValidityTime() const
{
    return m_ValidityTime;
}

void SuggestedPacketNumDl::setValidityTime(const utility::datetime& value)
{
    m_ValidityTime = value;
    m_ValidityTimeIsSet = true;
}

bool SuggestedPacketNumDl::validityTimeIsSet() const
{
    return m_ValidityTimeIsSet;
}

void SuggestedPacketNumDl::unsetValidityTime()
{
    m_ValidityTimeIsSet = false;
}
}
}
}
}


