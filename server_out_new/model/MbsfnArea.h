/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * MbsfnArea.h
 *
 * 
 */

#ifndef MbsfnArea_H_
#define MbsfnArea_H_


#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  MbsfnArea: public jsonParser::jsonParser<MbsfnArea>
{
public:
    explicit MbsfnArea(){
        // constructor
        m_MbsfnAreaId = 0;
        
            m_MbsfnAreaIdFlag = (staticjson::Flags::Optional);
m_CarrierFrequency = 0;
        
            m_CarrierFrequencyFlag = (staticjson::Flags::Optional);
    };
    virtual ~MbsfnArea(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : MbsfnAreaId CarrierFrequency 
        h->add_property("mbsfnAreaId", &this->m_MbsfnAreaId, m_MbsfnAreaIdFlag);
        h->add_property("carrierFrequency", &this->m_CarrierFrequency, m_CarrierFrequencyFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const MbsfnArea& obj)
    {
        
        o << "MbsfnAreaId : " << obj.m_MbsfnAreaId << std::endl;

        o << "CarrierFrequency : " << obj.m_CarrierFrequency << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// MbsfnArea members vars : MbsfnAreaId CarrierFrequency 

    int32_t  getMbsfnAreaId() const
    {
        return m_MbsfnAreaId;
    }
    void  setMbsfnAreaId(int32_t const value)
    {
        m_MbsfnAreaId = value;
    }

int32_t  getCarrierFrequency() const
    {
        return m_CarrierFrequency;
    }
    void  setCarrierFrequency(int32_t const value)
    {
        m_CarrierFrequency = value;
    }



    
public:
    int32_t m_MbsfnAreaId;
    
    unsigned m_MbsfnAreaIdFlag;
    int32_t m_CarrierFrequency;
    
    unsigned m_CarrierFrequencyFlag;
  
};
}
}
}
}

#endif /* MbsfnArea_H_ */
