/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmfSelectionSubscriptionData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SmfSelectionSubscriptionData_H_
#define SmfSelectionSubscriptionData_H_

#include "CSB_JsonParser.h"
#include "SnssaiInfo.h"
#include <map>
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SmfSelectionSubscriptionData
    : public jsonParser::jsonParser<SmfSelectionSubscriptionData> {
public:
  explicit SmfSelectionSubscriptionData() {
    // constructor
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SupportedFeaturesOutFlag.reset(new unsigned);
    *m_SupportedFeaturesOutFlag.get() = 0;

    m_SubscribedSnssaiInfosFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SubscribedSnssaiInfosOutFlag.reset(new unsigned);
    *m_SubscribedSnssaiInfosOutFlag.get() = 0;
    m_SharedSnssaiInfosId = "";

    m_SharedSnssaiInfosIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedSnssaiInfosIdOutFlag.reset(new unsigned);
    *m_SharedSnssaiInfosIdOutFlag.get() = 0;
  };
  virtual ~SmfSelectionSubscriptionData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SupportedFeatures
    // SubscribedSnssaiInfos SharedSnssaiInfosId
    h->add_optional_property("supportedFeatures", &this->m_SupportedFeatures,
                             m_SupportedFeaturesFlag,
                             m_SupportedFeaturesOutFlag);
    h->add_optional_property(
        "subscribedSnssaiInfos", &this->m_SubscribedSnssaiInfos,
        m_SubscribedSnssaiInfosFlag, m_SubscribedSnssaiInfosOutFlag);
    h->add_optional_property(
        "sharedSnssaiInfosId", &this->m_SharedSnssaiInfosId,
        m_SharedSnssaiInfosIdFlag, m_SharedSnssaiInfosIdOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const SmfSelectionSubscriptionData &obj) {

    o << "SupportedFeatures, optional flag is : " << *m_SupportedFeaturesOutFlag
      << ", content is : " << obj.m_SupportedFeatures << std::endl;
    o << "SubscribedSnssaiInfos, optional flag is : "
      << *m_SubscribedSnssaiInfosOutFlag << std::endl;
    o << convert2string(std::string("SubscribedSnssaiInfos"),
                        obj.m_SubscribedSnssaiInfos)
      << std::endl;

    o << "SharedSnssaiInfosId, optional flag is : "
      << *m_SharedSnssaiInfosIdOutFlag
      << ", content is : " << obj.m_SharedSnssaiInfosId << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SmfSelectionSubscriptionData members vars : SupportedFeatures
  /// SubscribedSnssaiInfos SharedSnssaiInfosId

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

  std::map<std::string, SnssaiInfo> &getSubscribedSnssaiInfos() {
    return m_SubscribedSnssaiInfos;
  }
  void
  setSubscribedSnssaiInfos(std::map<std::string, SnssaiInfo> const &value) {
    m_SubscribedSnssaiInfos = value;
  }

  std::string getSharedSnssaiInfosId() const { return m_SharedSnssaiInfosId; }
  void setSharedSnssaiInfosId(std::string const &value) {
    m_SharedSnssaiInfosId = value;
  }

public:
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
  shared_ptr<unsigned> m_SupportedFeaturesOutFlag;
  std::map<std::string, SnssaiInfo> m_SubscribedSnssaiInfos;

  unsigned m_SubscribedSnssaiInfosFlag;
  shared_ptr<unsigned> m_SubscribedSnssaiInfosOutFlag;
  std::string m_SharedSnssaiInfosId;

  unsigned m_SharedSnssaiInfosIdFlag;
  shared_ptr<unsigned> m_SharedSnssaiInfosIdOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmfSelectionSubscriptionData_H_ */
