/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MdtConfiguration.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




MdtConfiguration::MdtConfiguration()
{
    m_JobTypeIsSet = false;
    m_ReportTypeIsSet = false;
    m_AreaScopeIsSet = false;
    m_MeasurementLteListIsSet = false;
    m_MeasurementNrListIsSet = false;
    m_SensorMeasurementListIsSet = false;
    m_ReportingTriggerListIsSet = false;
    m_ReportIntervalIsSet = false;
    m_ReportIntervalNrIsSet = false;
    m_ReportAmountIsSet = false;
    m_EventThresholdRsrp = 0;
    m_EventThresholdRsrpIsSet = false;
    m_EventThresholdRsrpNr = 0;
    m_EventThresholdRsrpNrIsSet = false;
    m_EventThresholdRsrq = 0;
    m_EventThresholdRsrqIsSet = false;
    m_EventThresholdRsrqNr = 0;
    m_EventThresholdRsrqNrIsSet = false;
    m_EventListIsSet = false;
    m_LoggingIntervalIsSet = false;
    m_LoggingIntervalNrIsSet = false;
    m_LoggingDurationIsSet = false;
    m_LoggingDurationNrIsSet = false;
    m_PositioningMethodIsSet = false;
    m_CollectionPeriodRmmLteIsSet = false;
    m_CollectionPeriodRmmNrIsSet = false;
    m_MeasurementPeriodLteIsSet = false;
    m_MdtAllowedPlmnIdListIsSet = false;
    m_MbsfnAreaListIsSet = false;
    m_InterFreqTargetListIsSet = false;
}

MdtConfiguration::~MdtConfiguration()
{
}

void MdtConfiguration::validate()
{
    // TODO: implement validation
}

web::json::value MdtConfiguration::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_JobTypeIsSet)
    {
        val[utility::conversions::to_string_t("jobType")] = ModelBase::toJson(m_JobType);
    }
    if(m_ReportTypeIsSet)
    {
        val[utility::conversions::to_string_t("reportType")] = ModelBase::toJson(m_ReportType);
    }
    if(m_AreaScopeIsSet)
    {
        val[utility::conversions::to_string_t("areaScope")] = ModelBase::toJson(m_AreaScope);
    }
    if(m_MeasurementLteListIsSet)
    {
        val[utility::conversions::to_string_t("measurementLteList")] = ModelBase::toJson(m_MeasurementLteList);
    }
    if(m_MeasurementNrListIsSet)
    {
        val[utility::conversions::to_string_t("measurementNrList")] = ModelBase::toJson(m_MeasurementNrList);
    }
    if(m_SensorMeasurementListIsSet)
    {
        val[utility::conversions::to_string_t("sensorMeasurementList")] = ModelBase::toJson(m_SensorMeasurementList);
    }
    if(m_ReportingTriggerListIsSet)
    {
        val[utility::conversions::to_string_t("reportingTriggerList")] = ModelBase::toJson(m_ReportingTriggerList);
    }
    if(m_ReportIntervalIsSet)
    {
        val[utility::conversions::to_string_t("reportInterval")] = ModelBase::toJson(m_ReportInterval);
    }
    if(m_ReportIntervalNrIsSet)
    {
        val[utility::conversions::to_string_t("reportIntervalNr")] = ModelBase::toJson(m_ReportIntervalNr);
    }
    if(m_ReportAmountIsSet)
    {
        val[utility::conversions::to_string_t("reportAmount")] = ModelBase::toJson(m_ReportAmount);
    }
    if(m_EventThresholdRsrpIsSet)
    {
        val[utility::conversions::to_string_t("eventThresholdRsrp")] = ModelBase::toJson(m_EventThresholdRsrp);
    }
    if(m_EventThresholdRsrpNrIsSet)
    {
        val[utility::conversions::to_string_t("eventThresholdRsrpNr")] = ModelBase::toJson(m_EventThresholdRsrpNr);
    }
    if(m_EventThresholdRsrqIsSet)
    {
        val[utility::conversions::to_string_t("eventThresholdRsrq")] = ModelBase::toJson(m_EventThresholdRsrq);
    }
    if(m_EventThresholdRsrqNrIsSet)
    {
        val[utility::conversions::to_string_t("eventThresholdRsrqNr")] = ModelBase::toJson(m_EventThresholdRsrqNr);
    }
    if(m_EventListIsSet)
    {
        val[utility::conversions::to_string_t("eventList")] = ModelBase::toJson(m_EventList);
    }
    if(m_LoggingIntervalIsSet)
    {
        val[utility::conversions::to_string_t("loggingInterval")] = ModelBase::toJson(m_LoggingInterval);
    }
    if(m_LoggingIntervalNrIsSet)
    {
        val[utility::conversions::to_string_t("loggingIntervalNr")] = ModelBase::toJson(m_LoggingIntervalNr);
    }
    if(m_LoggingDurationIsSet)
    {
        val[utility::conversions::to_string_t("loggingDuration")] = ModelBase::toJson(m_LoggingDuration);
    }
    if(m_LoggingDurationNrIsSet)
    {
        val[utility::conversions::to_string_t("loggingDurationNr")] = ModelBase::toJson(m_LoggingDurationNr);
    }
    if(m_PositioningMethodIsSet)
    {
        val[utility::conversions::to_string_t("positioningMethod")] = ModelBase::toJson(m_PositioningMethod);
    }
    if(m_CollectionPeriodRmmLteIsSet)
    {
        val[utility::conversions::to_string_t("collectionPeriodRmmLte")] = ModelBase::toJson(m_CollectionPeriodRmmLte);
    }
    if(m_CollectionPeriodRmmNrIsSet)
    {
        val[utility::conversions::to_string_t("collectionPeriodRmmNr")] = ModelBase::toJson(m_CollectionPeriodRmmNr);
    }
    if(m_MeasurementPeriodLteIsSet)
    {
        val[utility::conversions::to_string_t("measurementPeriodLte")] = ModelBase::toJson(m_MeasurementPeriodLte);
    }
    if(m_MdtAllowedPlmnIdListIsSet)
    {
        val[utility::conversions::to_string_t("mdtAllowedPlmnIdList")] = ModelBase::toJson(m_MdtAllowedPlmnIdList);
    }
    if(m_MbsfnAreaListIsSet)
    {
        val[utility::conversions::to_string_t("mbsfnAreaList")] = ModelBase::toJson(m_MbsfnAreaList);
    }
    if(m_InterFreqTargetListIsSet)
    {
        val[utility::conversions::to_string_t("interFreqTargetList")] = ModelBase::toJson(m_InterFreqTargetList);
    }

    return val;
}

bool MdtConfiguration::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("jobType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("jobType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<JobType> refVal_jobType;
            ok &= ModelBase::fromJson(fieldValue, refVal_jobType);
            setJobType(refVal_jobType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReportTypeMdt> refVal_reportType;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportType);
            setReportType(refVal_reportType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("areaScope")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("areaScope"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AreaScope> refVal_areaScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_areaScope);
            setAreaScope(refVal_areaScope);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("measurementLteList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("measurementLteList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MeasurementLteForMdt>> refVal_measurementLteList;
            ok &= ModelBase::fromJson(fieldValue, refVal_measurementLteList);
            setMeasurementLteList(refVal_measurementLteList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("measurementNrList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("measurementNrList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MeasurementNrForMdt>> refVal_measurementNrList;
            ok &= ModelBase::fromJson(fieldValue, refVal_measurementNrList);
            setMeasurementNrList(refVal_measurementNrList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sensorMeasurementList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sensorMeasurementList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SensorMeasurement>> refVal_sensorMeasurementList;
            ok &= ModelBase::fromJson(fieldValue, refVal_sensorMeasurementList);
            setSensorMeasurementList(refVal_sensorMeasurementList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportingTriggerList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportingTriggerList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReportingTrigger>> refVal_reportingTriggerList;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportingTriggerList);
            setReportingTriggerList(refVal_reportingTriggerList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportInterval")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportInterval"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReportIntervalMdt> refVal_reportInterval;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportInterval);
            setReportInterval(refVal_reportInterval);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportIntervalNr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportIntervalNr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReportIntervalNrMdt> refVal_reportIntervalNr;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportIntervalNr);
            setReportIntervalNr(refVal_reportIntervalNr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportAmount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportAmount"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReportAmountMdt> refVal_reportAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportAmount);
            setReportAmount(refVal_reportAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventThresholdRsrp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventThresholdRsrp"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_eventThresholdRsrp;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventThresholdRsrp);
            setEventThresholdRsrp(refVal_eventThresholdRsrp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventThresholdRsrpNr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventThresholdRsrpNr"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_eventThresholdRsrpNr;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventThresholdRsrpNr);
            setEventThresholdRsrpNr(refVal_eventThresholdRsrpNr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventThresholdRsrq")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventThresholdRsrq"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_eventThresholdRsrq;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventThresholdRsrq);
            setEventThresholdRsrq(refVal_eventThresholdRsrq);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventThresholdRsrqNr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventThresholdRsrqNr"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_eventThresholdRsrqNr;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventThresholdRsrqNr);
            setEventThresholdRsrqNr(refVal_eventThresholdRsrqNr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EventForMdt>> refVal_eventList;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventList);
            setEventList(refVal_eventList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("loggingInterval")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("loggingInterval"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LoggingIntervalMdt> refVal_loggingInterval;
            ok &= ModelBase::fromJson(fieldValue, refVal_loggingInterval);
            setLoggingInterval(refVal_loggingInterval);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("loggingIntervalNr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("loggingIntervalNr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LoggingIntervalNrMdt> refVal_loggingIntervalNr;
            ok &= ModelBase::fromJson(fieldValue, refVal_loggingIntervalNr);
            setLoggingIntervalNr(refVal_loggingIntervalNr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("loggingDuration")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("loggingDuration"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LoggingDurationMdt> refVal_loggingDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_loggingDuration);
            setLoggingDuration(refVal_loggingDuration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("loggingDurationNr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("loggingDurationNr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LoggingDurationNrMdt> refVal_loggingDurationNr;
            ok &= ModelBase::fromJson(fieldValue, refVal_loggingDurationNr);
            setLoggingDurationNr(refVal_loggingDurationNr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("positioningMethod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("positioningMethod"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PositioningMethodMdt> refVal_positioningMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_positioningMethod);
            setPositioningMethod(refVal_positioningMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collectionPeriodRmmLte")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionPeriodRmmLte"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CollectionPeriodRmmLteMdt> refVal_collectionPeriodRmmLte;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionPeriodRmmLte);
            setCollectionPeriodRmmLte(refVal_collectionPeriodRmmLte);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("collectionPeriodRmmNr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("collectionPeriodRmmNr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CollectionPeriodRmmNrMdt> refVal_collectionPeriodRmmNr;
            ok &= ModelBase::fromJson(fieldValue, refVal_collectionPeriodRmmNr);
            setCollectionPeriodRmmNr(refVal_collectionPeriodRmmNr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("measurementPeriodLte")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("measurementPeriodLte"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MeasurementPeriodLteMdt> refVal_measurementPeriodLte;
            ok &= ModelBase::fromJson(fieldValue, refVal_measurementPeriodLte);
            setMeasurementPeriodLte(refVal_measurementPeriodLte);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mdtAllowedPlmnIdList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mdtAllowedPlmnIdList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlmnId>> refVal_mdtAllowedPlmnIdList;
            ok &= ModelBase::fromJson(fieldValue, refVal_mdtAllowedPlmnIdList);
            setMdtAllowedPlmnIdList(refVal_mdtAllowedPlmnIdList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mbsfnAreaList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mbsfnAreaList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MbsfnArea>> refVal_mbsfnAreaList;
            ok &= ModelBase::fromJson(fieldValue, refVal_mbsfnAreaList);
            setMbsfnAreaList(refVal_mbsfnAreaList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("interFreqTargetList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("interFreqTargetList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InterFreqTargetInfo>> refVal_interFreqTargetList;
            ok &= ModelBase::fromJson(fieldValue, refVal_interFreqTargetList);
            setInterFreqTargetList(refVal_interFreqTargetList);
        }
    }
    return ok;
}

void MdtConfiguration::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_JobTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jobType"), m_JobType));
    }
    if(m_ReportTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportType"), m_ReportType));
    }
    if(m_AreaScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("areaScope"), m_AreaScope));
    }
    if(m_MeasurementLteListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("measurementLteList"), m_MeasurementLteList));
    }
    if(m_MeasurementNrListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("measurementNrList"), m_MeasurementNrList));
    }
    if(m_SensorMeasurementListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sensorMeasurementList"), m_SensorMeasurementList));
    }
    if(m_ReportingTriggerListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportingTriggerList"), m_ReportingTriggerList));
    }
    if(m_ReportIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportInterval"), m_ReportInterval));
    }
    if(m_ReportIntervalNrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportIntervalNr"), m_ReportIntervalNr));
    }
    if(m_ReportAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportAmount"), m_ReportAmount));
    }
    if(m_EventThresholdRsrpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventThresholdRsrp"), m_EventThresholdRsrp));
    }
    if(m_EventThresholdRsrpNrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventThresholdRsrpNr"), m_EventThresholdRsrpNr));
    }
    if(m_EventThresholdRsrqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventThresholdRsrq"), m_EventThresholdRsrq));
    }
    if(m_EventThresholdRsrqNrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventThresholdRsrqNr"), m_EventThresholdRsrqNr));
    }
    if(m_EventListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventList"), m_EventList));
    }
    if(m_LoggingIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("loggingInterval"), m_LoggingInterval));
    }
    if(m_LoggingIntervalNrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("loggingIntervalNr"), m_LoggingIntervalNr));
    }
    if(m_LoggingDurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("loggingDuration"), m_LoggingDuration));
    }
    if(m_LoggingDurationNrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("loggingDurationNr"), m_LoggingDurationNr));
    }
    if(m_PositioningMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("positioningMethod"), m_PositioningMethod));
    }
    if(m_CollectionPeriodRmmLteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionPeriodRmmLte"), m_CollectionPeriodRmmLte));
    }
    if(m_CollectionPeriodRmmNrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("collectionPeriodRmmNr"), m_CollectionPeriodRmmNr));
    }
    if(m_MeasurementPeriodLteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("measurementPeriodLte"), m_MeasurementPeriodLte));
    }
    if(m_MdtAllowedPlmnIdListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mdtAllowedPlmnIdList"), m_MdtAllowedPlmnIdList));
    }
    if(m_MbsfnAreaListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mbsfnAreaList"), m_MbsfnAreaList));
    }
    if(m_InterFreqTargetListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("interFreqTargetList"), m_InterFreqTargetList));
    }
}

bool MdtConfiguration::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("jobType")))
    {
        std::shared_ptr<JobType> refVal_jobType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("jobType")), refVal_jobType );
        setJobType(refVal_jobType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportType")))
    {
        std::shared_ptr<ReportTypeMdt> refVal_reportType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportType")), refVal_reportType );
        setReportType(refVal_reportType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("areaScope")))
    {
        std::shared_ptr<AreaScope> refVal_areaScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("areaScope")), refVal_areaScope );
        setAreaScope(refVal_areaScope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("measurementLteList")))
    {
        std::vector<std::shared_ptr<MeasurementLteForMdt>> refVal_measurementLteList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("measurementLteList")), refVal_measurementLteList );
        setMeasurementLteList(refVal_measurementLteList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("measurementNrList")))
    {
        std::vector<std::shared_ptr<MeasurementNrForMdt>> refVal_measurementNrList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("measurementNrList")), refVal_measurementNrList );
        setMeasurementNrList(refVal_measurementNrList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sensorMeasurementList")))
    {
        std::vector<std::shared_ptr<SensorMeasurement>> refVal_sensorMeasurementList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sensorMeasurementList")), refVal_sensorMeasurementList );
        setSensorMeasurementList(refVal_sensorMeasurementList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportingTriggerList")))
    {
        std::vector<std::shared_ptr<ReportingTrigger>> refVal_reportingTriggerList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportingTriggerList")), refVal_reportingTriggerList );
        setReportingTriggerList(refVal_reportingTriggerList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportInterval")))
    {
        std::shared_ptr<ReportIntervalMdt> refVal_reportInterval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportInterval")), refVal_reportInterval );
        setReportInterval(refVal_reportInterval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportIntervalNr")))
    {
        std::shared_ptr<ReportIntervalNrMdt> refVal_reportIntervalNr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportIntervalNr")), refVal_reportIntervalNr );
        setReportIntervalNr(refVal_reportIntervalNr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportAmount")))
    {
        std::shared_ptr<ReportAmountMdt> refVal_reportAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportAmount")), refVal_reportAmount );
        setReportAmount(refVal_reportAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventThresholdRsrp")))
    {
        int32_t refVal_eventThresholdRsrp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventThresholdRsrp")), refVal_eventThresholdRsrp );
        setEventThresholdRsrp(refVal_eventThresholdRsrp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventThresholdRsrpNr")))
    {
        int32_t refVal_eventThresholdRsrpNr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventThresholdRsrpNr")), refVal_eventThresholdRsrpNr );
        setEventThresholdRsrpNr(refVal_eventThresholdRsrpNr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventThresholdRsrq")))
    {
        int32_t refVal_eventThresholdRsrq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventThresholdRsrq")), refVal_eventThresholdRsrq );
        setEventThresholdRsrq(refVal_eventThresholdRsrq);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventThresholdRsrqNr")))
    {
        int32_t refVal_eventThresholdRsrqNr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventThresholdRsrqNr")), refVal_eventThresholdRsrqNr );
        setEventThresholdRsrqNr(refVal_eventThresholdRsrqNr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventList")))
    {
        std::vector<std::shared_ptr<EventForMdt>> refVal_eventList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventList")), refVal_eventList );
        setEventList(refVal_eventList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loggingInterval")))
    {
        std::shared_ptr<LoggingIntervalMdt> refVal_loggingInterval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("loggingInterval")), refVal_loggingInterval );
        setLoggingInterval(refVal_loggingInterval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loggingIntervalNr")))
    {
        std::shared_ptr<LoggingIntervalNrMdt> refVal_loggingIntervalNr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("loggingIntervalNr")), refVal_loggingIntervalNr );
        setLoggingIntervalNr(refVal_loggingIntervalNr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loggingDuration")))
    {
        std::shared_ptr<LoggingDurationMdt> refVal_loggingDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("loggingDuration")), refVal_loggingDuration );
        setLoggingDuration(refVal_loggingDuration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loggingDurationNr")))
    {
        std::shared_ptr<LoggingDurationNrMdt> refVal_loggingDurationNr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("loggingDurationNr")), refVal_loggingDurationNr );
        setLoggingDurationNr(refVal_loggingDurationNr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("positioningMethod")))
    {
        std::shared_ptr<PositioningMethodMdt> refVal_positioningMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("positioningMethod")), refVal_positioningMethod );
        setPositioningMethod(refVal_positioningMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collectionPeriodRmmLte")))
    {
        std::shared_ptr<CollectionPeriodRmmLteMdt> refVal_collectionPeriodRmmLte;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionPeriodRmmLte")), refVal_collectionPeriodRmmLte );
        setCollectionPeriodRmmLte(refVal_collectionPeriodRmmLte);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("collectionPeriodRmmNr")))
    {
        std::shared_ptr<CollectionPeriodRmmNrMdt> refVal_collectionPeriodRmmNr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("collectionPeriodRmmNr")), refVal_collectionPeriodRmmNr );
        setCollectionPeriodRmmNr(refVal_collectionPeriodRmmNr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("measurementPeriodLte")))
    {
        std::shared_ptr<MeasurementPeriodLteMdt> refVal_measurementPeriodLte;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("measurementPeriodLte")), refVal_measurementPeriodLte );
        setMeasurementPeriodLte(refVal_measurementPeriodLte);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mdtAllowedPlmnIdList")))
    {
        std::vector<std::shared_ptr<PlmnId>> refVal_mdtAllowedPlmnIdList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mdtAllowedPlmnIdList")), refVal_mdtAllowedPlmnIdList );
        setMdtAllowedPlmnIdList(refVal_mdtAllowedPlmnIdList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mbsfnAreaList")))
    {
        std::vector<std::shared_ptr<MbsfnArea>> refVal_mbsfnAreaList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mbsfnAreaList")), refVal_mbsfnAreaList );
        setMbsfnAreaList(refVal_mbsfnAreaList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("interFreqTargetList")))
    {
        std::vector<std::shared_ptr<InterFreqTargetInfo>> refVal_interFreqTargetList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("interFreqTargetList")), refVal_interFreqTargetList );
        setInterFreqTargetList(refVal_interFreqTargetList);
    }
    return ok;
}

std::shared_ptr<JobType> MdtConfiguration::getJobType() const
{
    return m_JobType;
}

void MdtConfiguration::setJobType(const std::shared_ptr<JobType>& value)
{
    m_JobType = value;
    m_JobTypeIsSet = true;
}

bool MdtConfiguration::jobTypeIsSet() const
{
    return m_JobTypeIsSet;
}

void MdtConfiguration::unsetJobType()
{
    m_JobTypeIsSet = false;
}
std::shared_ptr<ReportTypeMdt> MdtConfiguration::getReportType() const
{
    return m_ReportType;
}

void MdtConfiguration::setReportType(const std::shared_ptr<ReportTypeMdt>& value)
{
    m_ReportType = value;
    m_ReportTypeIsSet = true;
}

bool MdtConfiguration::reportTypeIsSet() const
{
    return m_ReportTypeIsSet;
}

void MdtConfiguration::unsetReportType()
{
    m_ReportTypeIsSet = false;
}
std::shared_ptr<AreaScope> MdtConfiguration::getAreaScope() const
{
    return m_AreaScope;
}

void MdtConfiguration::setAreaScope(const std::shared_ptr<AreaScope>& value)
{
    m_AreaScope = value;
    m_AreaScopeIsSet = true;
}

bool MdtConfiguration::areaScopeIsSet() const
{
    return m_AreaScopeIsSet;
}

void MdtConfiguration::unsetAreaScope()
{
    m_AreaScopeIsSet = false;
}
std::vector<std::shared_ptr<MeasurementLteForMdt>>& MdtConfiguration::getMeasurementLteList()
{
    return m_MeasurementLteList;
}

void MdtConfiguration::setMeasurementLteList(const std::vector<std::shared_ptr<MeasurementLteForMdt>>& value)
{
    m_MeasurementLteList = value;
    m_MeasurementLteListIsSet = true;
}

bool MdtConfiguration::measurementLteListIsSet() const
{
    return m_MeasurementLteListIsSet;
}

void MdtConfiguration::unsetMeasurementLteList()
{
    m_MeasurementLteListIsSet = false;
}
std::vector<std::shared_ptr<MeasurementNrForMdt>>& MdtConfiguration::getMeasurementNrList()
{
    return m_MeasurementNrList;
}

void MdtConfiguration::setMeasurementNrList(const std::vector<std::shared_ptr<MeasurementNrForMdt>>& value)
{
    m_MeasurementNrList = value;
    m_MeasurementNrListIsSet = true;
}

bool MdtConfiguration::measurementNrListIsSet() const
{
    return m_MeasurementNrListIsSet;
}

void MdtConfiguration::unsetMeasurementNrList()
{
    m_MeasurementNrListIsSet = false;
}
std::vector<std::shared_ptr<SensorMeasurement>>& MdtConfiguration::getSensorMeasurementList()
{
    return m_SensorMeasurementList;
}

void MdtConfiguration::setSensorMeasurementList(const std::vector<std::shared_ptr<SensorMeasurement>>& value)
{
    m_SensorMeasurementList = value;
    m_SensorMeasurementListIsSet = true;
}

bool MdtConfiguration::sensorMeasurementListIsSet() const
{
    return m_SensorMeasurementListIsSet;
}

void MdtConfiguration::unsetSensorMeasurementList()
{
    m_SensorMeasurementListIsSet = false;
}
std::vector<std::shared_ptr<ReportingTrigger>>& MdtConfiguration::getReportingTriggerList()
{
    return m_ReportingTriggerList;
}

void MdtConfiguration::setReportingTriggerList(const std::vector<std::shared_ptr<ReportingTrigger>>& value)
{
    m_ReportingTriggerList = value;
    m_ReportingTriggerListIsSet = true;
}

bool MdtConfiguration::reportingTriggerListIsSet() const
{
    return m_ReportingTriggerListIsSet;
}

void MdtConfiguration::unsetReportingTriggerList()
{
    m_ReportingTriggerListIsSet = false;
}
std::shared_ptr<ReportIntervalMdt> MdtConfiguration::getReportInterval() const
{
    return m_ReportInterval;
}

void MdtConfiguration::setReportInterval(const std::shared_ptr<ReportIntervalMdt>& value)
{
    m_ReportInterval = value;
    m_ReportIntervalIsSet = true;
}

bool MdtConfiguration::reportIntervalIsSet() const
{
    return m_ReportIntervalIsSet;
}

void MdtConfiguration::unsetReportInterval()
{
    m_ReportIntervalIsSet = false;
}
std::shared_ptr<ReportIntervalNrMdt> MdtConfiguration::getReportIntervalNr() const
{
    return m_ReportIntervalNr;
}

void MdtConfiguration::setReportIntervalNr(const std::shared_ptr<ReportIntervalNrMdt>& value)
{
    m_ReportIntervalNr = value;
    m_ReportIntervalNrIsSet = true;
}

bool MdtConfiguration::reportIntervalNrIsSet() const
{
    return m_ReportIntervalNrIsSet;
}

void MdtConfiguration::unsetReportIntervalNr()
{
    m_ReportIntervalNrIsSet = false;
}
std::shared_ptr<ReportAmountMdt> MdtConfiguration::getReportAmount() const
{
    return m_ReportAmount;
}

void MdtConfiguration::setReportAmount(const std::shared_ptr<ReportAmountMdt>& value)
{
    m_ReportAmount = value;
    m_ReportAmountIsSet = true;
}

bool MdtConfiguration::reportAmountIsSet() const
{
    return m_ReportAmountIsSet;
}

void MdtConfiguration::unsetReportAmount()
{
    m_ReportAmountIsSet = false;
}
int32_t MdtConfiguration::getEventThresholdRsrp() const
{
    return m_EventThresholdRsrp;
}

void MdtConfiguration::setEventThresholdRsrp(int32_t value)
{
    m_EventThresholdRsrp = value;
    m_EventThresholdRsrpIsSet = true;
}

bool MdtConfiguration::eventThresholdRsrpIsSet() const
{
    return m_EventThresholdRsrpIsSet;
}

void MdtConfiguration::unsetEventThresholdRsrp()
{
    m_EventThresholdRsrpIsSet = false;
}
int32_t MdtConfiguration::getEventThresholdRsrpNr() const
{
    return m_EventThresholdRsrpNr;
}

void MdtConfiguration::setEventThresholdRsrpNr(int32_t value)
{
    m_EventThresholdRsrpNr = value;
    m_EventThresholdRsrpNrIsSet = true;
}

bool MdtConfiguration::eventThresholdRsrpNrIsSet() const
{
    return m_EventThresholdRsrpNrIsSet;
}

void MdtConfiguration::unsetEventThresholdRsrpNr()
{
    m_EventThresholdRsrpNrIsSet = false;
}
int32_t MdtConfiguration::getEventThresholdRsrq() const
{
    return m_EventThresholdRsrq;
}

void MdtConfiguration::setEventThresholdRsrq(int32_t value)
{
    m_EventThresholdRsrq = value;
    m_EventThresholdRsrqIsSet = true;
}

bool MdtConfiguration::eventThresholdRsrqIsSet() const
{
    return m_EventThresholdRsrqIsSet;
}

void MdtConfiguration::unsetEventThresholdRsrq()
{
    m_EventThresholdRsrqIsSet = false;
}
int32_t MdtConfiguration::getEventThresholdRsrqNr() const
{
    return m_EventThresholdRsrqNr;
}

void MdtConfiguration::setEventThresholdRsrqNr(int32_t value)
{
    m_EventThresholdRsrqNr = value;
    m_EventThresholdRsrqNrIsSet = true;
}

bool MdtConfiguration::eventThresholdRsrqNrIsSet() const
{
    return m_EventThresholdRsrqNrIsSet;
}

void MdtConfiguration::unsetEventThresholdRsrqNr()
{
    m_EventThresholdRsrqNrIsSet = false;
}
std::vector<std::shared_ptr<EventForMdt>>& MdtConfiguration::getEventList()
{
    return m_EventList;
}

void MdtConfiguration::setEventList(const std::vector<std::shared_ptr<EventForMdt>>& value)
{
    m_EventList = value;
    m_EventListIsSet = true;
}

bool MdtConfiguration::eventListIsSet() const
{
    return m_EventListIsSet;
}

void MdtConfiguration::unsetEventList()
{
    m_EventListIsSet = false;
}
std::shared_ptr<LoggingIntervalMdt> MdtConfiguration::getLoggingInterval() const
{
    return m_LoggingInterval;
}

void MdtConfiguration::setLoggingInterval(const std::shared_ptr<LoggingIntervalMdt>& value)
{
    m_LoggingInterval = value;
    m_LoggingIntervalIsSet = true;
}

bool MdtConfiguration::loggingIntervalIsSet() const
{
    return m_LoggingIntervalIsSet;
}

void MdtConfiguration::unsetLoggingInterval()
{
    m_LoggingIntervalIsSet = false;
}
std::shared_ptr<LoggingIntervalNrMdt> MdtConfiguration::getLoggingIntervalNr() const
{
    return m_LoggingIntervalNr;
}

void MdtConfiguration::setLoggingIntervalNr(const std::shared_ptr<LoggingIntervalNrMdt>& value)
{
    m_LoggingIntervalNr = value;
    m_LoggingIntervalNrIsSet = true;
}

bool MdtConfiguration::loggingIntervalNrIsSet() const
{
    return m_LoggingIntervalNrIsSet;
}

void MdtConfiguration::unsetLoggingIntervalNr()
{
    m_LoggingIntervalNrIsSet = false;
}
std::shared_ptr<LoggingDurationMdt> MdtConfiguration::getLoggingDuration() const
{
    return m_LoggingDuration;
}

void MdtConfiguration::setLoggingDuration(const std::shared_ptr<LoggingDurationMdt>& value)
{
    m_LoggingDuration = value;
    m_LoggingDurationIsSet = true;
}

bool MdtConfiguration::loggingDurationIsSet() const
{
    return m_LoggingDurationIsSet;
}

void MdtConfiguration::unsetLoggingDuration()
{
    m_LoggingDurationIsSet = false;
}
std::shared_ptr<LoggingDurationNrMdt> MdtConfiguration::getLoggingDurationNr() const
{
    return m_LoggingDurationNr;
}

void MdtConfiguration::setLoggingDurationNr(const std::shared_ptr<LoggingDurationNrMdt>& value)
{
    m_LoggingDurationNr = value;
    m_LoggingDurationNrIsSet = true;
}

bool MdtConfiguration::loggingDurationNrIsSet() const
{
    return m_LoggingDurationNrIsSet;
}

void MdtConfiguration::unsetLoggingDurationNr()
{
    m_LoggingDurationNrIsSet = false;
}
std::shared_ptr<PositioningMethodMdt> MdtConfiguration::getPositioningMethod() const
{
    return m_PositioningMethod;
}

void MdtConfiguration::setPositioningMethod(const std::shared_ptr<PositioningMethodMdt>& value)
{
    m_PositioningMethod = value;
    m_PositioningMethodIsSet = true;
}

bool MdtConfiguration::positioningMethodIsSet() const
{
    return m_PositioningMethodIsSet;
}

void MdtConfiguration::unsetPositioningMethod()
{
    m_PositioningMethodIsSet = false;
}
std::shared_ptr<CollectionPeriodRmmLteMdt> MdtConfiguration::getCollectionPeriodRmmLte() const
{
    return m_CollectionPeriodRmmLte;
}

void MdtConfiguration::setCollectionPeriodRmmLte(const std::shared_ptr<CollectionPeriodRmmLteMdt>& value)
{
    m_CollectionPeriodRmmLte = value;
    m_CollectionPeriodRmmLteIsSet = true;
}

bool MdtConfiguration::collectionPeriodRmmLteIsSet() const
{
    return m_CollectionPeriodRmmLteIsSet;
}

void MdtConfiguration::unsetCollectionPeriodRmmLte()
{
    m_CollectionPeriodRmmLteIsSet = false;
}
std::shared_ptr<CollectionPeriodRmmNrMdt> MdtConfiguration::getCollectionPeriodRmmNr() const
{
    return m_CollectionPeriodRmmNr;
}

void MdtConfiguration::setCollectionPeriodRmmNr(const std::shared_ptr<CollectionPeriodRmmNrMdt>& value)
{
    m_CollectionPeriodRmmNr = value;
    m_CollectionPeriodRmmNrIsSet = true;
}

bool MdtConfiguration::collectionPeriodRmmNrIsSet() const
{
    return m_CollectionPeriodRmmNrIsSet;
}

void MdtConfiguration::unsetCollectionPeriodRmmNr()
{
    m_CollectionPeriodRmmNrIsSet = false;
}
std::shared_ptr<MeasurementPeriodLteMdt> MdtConfiguration::getMeasurementPeriodLte() const
{
    return m_MeasurementPeriodLte;
}

void MdtConfiguration::setMeasurementPeriodLte(const std::shared_ptr<MeasurementPeriodLteMdt>& value)
{
    m_MeasurementPeriodLte = value;
    m_MeasurementPeriodLteIsSet = true;
}

bool MdtConfiguration::measurementPeriodLteIsSet() const
{
    return m_MeasurementPeriodLteIsSet;
}

void MdtConfiguration::unsetMeasurementPeriodLte()
{
    m_MeasurementPeriodLteIsSet = false;
}
std::vector<std::shared_ptr<PlmnId>>& MdtConfiguration::getMdtAllowedPlmnIdList()
{
    return m_MdtAllowedPlmnIdList;
}

void MdtConfiguration::setMdtAllowedPlmnIdList(const std::vector<std::shared_ptr<PlmnId>>& value)
{
    m_MdtAllowedPlmnIdList = value;
    m_MdtAllowedPlmnIdListIsSet = true;
}

bool MdtConfiguration::mdtAllowedPlmnIdListIsSet() const
{
    return m_MdtAllowedPlmnIdListIsSet;
}

void MdtConfiguration::unsetMdtAllowedPlmnIdList()
{
    m_MdtAllowedPlmnIdListIsSet = false;
}
std::vector<std::shared_ptr<MbsfnArea>>& MdtConfiguration::getMbsfnAreaList()
{
    return m_MbsfnAreaList;
}

void MdtConfiguration::setMbsfnAreaList(const std::vector<std::shared_ptr<MbsfnArea>>& value)
{
    m_MbsfnAreaList = value;
    m_MbsfnAreaListIsSet = true;
}

bool MdtConfiguration::mbsfnAreaListIsSet() const
{
    return m_MbsfnAreaListIsSet;
}

void MdtConfiguration::unsetMbsfnAreaList()
{
    m_MbsfnAreaListIsSet = false;
}
std::vector<std::shared_ptr<InterFreqTargetInfo>>& MdtConfiguration::getInterFreqTargetList()
{
    return m_InterFreqTargetList;
}

void MdtConfiguration::setInterFreqTargetList(const std::vector<std::shared_ptr<InterFreqTargetInfo>>& value)
{
    m_InterFreqTargetList = value;
    m_InterFreqTargetListIsSet = true;
}

bool MdtConfiguration::interFreqTargetListIsSet() const
{
    return m_InterFreqTargetListIsSet;
}

void MdtConfiguration::unsetInterFreqTargetList()
{
    m_InterFreqTargetListIsSet = false;
}
}
}
}
}


