/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AcknowledgeInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AcknowledgeInfo::AcknowledgeInfo()
{
    m_SorMacIue = utility::conversions::to_string_t("");
    m_SorMacIueIsSet = false;
    m_UpuMacIue = utility::conversions::to_string_t("");
    m_UpuMacIueIsSet = false;
    m_SecuredPacket = utility::conversions::to_string_t("");
    m_SecuredPacketIsSet = false;
    m_ProvisioningTime = utility::datetime();
    m_ProvisioningTimeIsSet = false;
}

AcknowledgeInfo::~AcknowledgeInfo()
{
}

void AcknowledgeInfo::validate()
{
    // TODO: implement validation
}

web::json::value AcknowledgeInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SorMacIueIsSet)
    {
        val[utility::conversions::to_string_t("sorMacIue")] = ModelBase::toJson(m_SorMacIue);
    }
    if(m_UpuMacIueIsSet)
    {
        val[utility::conversions::to_string_t("upuMacIue")] = ModelBase::toJson(m_UpuMacIue);
    }
    if(m_SecuredPacketIsSet)
    {
        val[utility::conversions::to_string_t("securedPacket")] = ModelBase::toJson(m_SecuredPacket);
    }
    if(m_ProvisioningTimeIsSet)
    {
        val[utility::conversions::to_string_t("provisioningTime")] = ModelBase::toJson(m_ProvisioningTime);
    }

    return val;
}

bool AcknowledgeInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("sorMacIue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sorMacIue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sorMacIue;
            ok &= ModelBase::fromJson(fieldValue, refVal_sorMacIue);
            setSorMacIue(refVal_sorMacIue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upuMacIue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upuMacIue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_upuMacIue;
            ok &= ModelBase::fromJson(fieldValue, refVal_upuMacIue);
            setUpuMacIue(refVal_upuMacIue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("securedPacket")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("securedPacket"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_securedPacket;
            ok &= ModelBase::fromJson(fieldValue, refVal_securedPacket);
            setSecuredPacket(refVal_securedPacket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provisioningTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("provisioningTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_provisioningTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_provisioningTime);
            setProvisioningTime(refVal_provisioningTime);
        }
    }
    return ok;
}

void AcknowledgeInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SorMacIueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sorMacIue"), m_SorMacIue));
    }
    if(m_UpuMacIueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upuMacIue"), m_UpuMacIue));
    }
    if(m_SecuredPacketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("securedPacket"), m_SecuredPacket));
    }
    if(m_ProvisioningTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("provisioningTime"), m_ProvisioningTime));
    }
}

bool AcknowledgeInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sorMacIue")))
    {
        utility::string_t refVal_sorMacIue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sorMacIue")), refVal_sorMacIue );
        setSorMacIue(refVal_sorMacIue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upuMacIue")))
    {
        utility::string_t refVal_upuMacIue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upuMacIue")), refVal_upuMacIue );
        setUpuMacIue(refVal_upuMacIue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("securedPacket")))
    {
        utility::string_t refVal_securedPacket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("securedPacket")), refVal_securedPacket );
        setSecuredPacket(refVal_securedPacket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provisioningTime")))
    {
        utility::datetime refVal_provisioningTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("provisioningTime")), refVal_provisioningTime );
        setProvisioningTime(refVal_provisioningTime);
    }
    return ok;
}

utility::string_t AcknowledgeInfo::getSorMacIue() const
{
    return m_SorMacIue;
}

void AcknowledgeInfo::setSorMacIue(const utility::string_t& value)
{
    m_SorMacIue = value;
    m_SorMacIueIsSet = true;
}

bool AcknowledgeInfo::sorMacIueIsSet() const
{
    return m_SorMacIueIsSet;
}

void AcknowledgeInfo::unsetSorMacIue()
{
    m_SorMacIueIsSet = false;
}
utility::string_t AcknowledgeInfo::getUpuMacIue() const
{
    return m_UpuMacIue;
}

void AcknowledgeInfo::setUpuMacIue(const utility::string_t& value)
{
    m_UpuMacIue = value;
    m_UpuMacIueIsSet = true;
}

bool AcknowledgeInfo::upuMacIueIsSet() const
{
    return m_UpuMacIueIsSet;
}

void AcknowledgeInfo::unsetUpuMacIue()
{
    m_UpuMacIueIsSet = false;
}
utility::string_t AcknowledgeInfo::getSecuredPacket() const
{
    return m_SecuredPacket;
}

void AcknowledgeInfo::setSecuredPacket(const utility::string_t& value)
{
    m_SecuredPacket = value;
    m_SecuredPacketIsSet = true;
}

bool AcknowledgeInfo::securedPacketIsSet() const
{
    return m_SecuredPacketIsSet;
}

void AcknowledgeInfo::unsetSecuredPacket()
{
    m_SecuredPacketIsSet = false;
}
utility::datetime AcknowledgeInfo::getProvisioningTime() const
{
    return m_ProvisioningTime;
}

void AcknowledgeInfo::setProvisioningTime(const utility::datetime& value)
{
    m_ProvisioningTime = value;
    m_ProvisioningTimeIsSet = true;
}

bool AcknowledgeInfo::provisioningTimeIsSet() const
{
    return m_ProvisioningTimeIsSet;
}

void AcknowledgeInfo::unsetProvisioningTime()
{
    m_ProvisioningTimeIsSet = false;
}
}
}
}
}


