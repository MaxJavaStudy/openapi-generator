/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "IPSMGWDeregistrationApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IPSMGWDeregistrationApi::IPSMGWDeregistrationApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
}

void IPSMGWDeregistrationApi::init() {
    setupRoutes();
}

void IPSMGWDeregistrationApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/:ueId/registrations/ip-sm-gw", Routes::bind(&IPSMGWDeregistrationApi::ip_sm_gw_deregistration_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&IPSMGWDeregistrationApi::ipsmgw_deregistration_api_default_handler, this));
}

void IPSMGWDeregistrationApi::ip_sm_gw_deregistration_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto ueId = request.param(":ueId").as<std::string>();
    
    try {
      this->ip_sm_gw_deregistration(ueId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void IPSMGWDeregistrationApi::ipsmgw_deregistration_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

