/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsSubscriptionData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SmsSubscriptionData::SmsSubscriptionData()
{
    m_SmsSubscribed = false;
    m_SmsSubscribedIsSet = false;
    m_SharedSmsSubsDataId = utility::conversions::to_string_t("");
    m_SharedSmsSubsDataIdIsSet = false;
}

SmsSubscriptionData::~SmsSubscriptionData()
{
}

void SmsSubscriptionData::validate()
{
    // TODO: implement validation
}

web::json::value SmsSubscriptionData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SmsSubscribedIsSet)
    {
        val[utility::conversions::to_string_t("smsSubscribed")] = ModelBase::toJson(m_SmsSubscribed);
    }
    if(m_SharedSmsSubsDataIdIsSet)
    {
        val[utility::conversions::to_string_t("sharedSmsSubsDataId")] = ModelBase::toJson(m_SharedSmsSubsDataId);
    }

    return val;
}

bool SmsSubscriptionData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("smsSubscribed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smsSubscribed"));
        if(!fieldValue.is_null())
        {
            bool refVal_smsSubscribed;
            ok &= ModelBase::fromJson(fieldValue, refVal_smsSubscribed);
            setSmsSubscribed(refVal_smsSubscribed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedSmsSubsDataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedSmsSubsDataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sharedSmsSubsDataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedSmsSubsDataId);
            setSharedSmsSubsDataId(refVal_sharedSmsSubsDataId);
        }
    }
    return ok;
}

void SmsSubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SmsSubscribedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smsSubscribed"), m_SmsSubscribed));
    }
    if(m_SharedSmsSubsDataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedSmsSubsDataId"), m_SharedSmsSubsDataId));
    }
}

bool SmsSubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("smsSubscribed")))
    {
        bool refVal_smsSubscribed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smsSubscribed")), refVal_smsSubscribed );
        setSmsSubscribed(refVal_smsSubscribed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedSmsSubsDataId")))
    {
        utility::string_t refVal_sharedSmsSubsDataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedSmsSubsDataId")), refVal_sharedSmsSubsDataId );
        setSharedSmsSubsDataId(refVal_sharedSmsSubsDataId);
    }
    return ok;
}

bool SmsSubscriptionData::isSmsSubscribed() const
{
    return m_SmsSubscribed;
}

void SmsSubscriptionData::setSmsSubscribed(bool value)
{
    m_SmsSubscribed = value;
    m_SmsSubscribedIsSet = true;
}

bool SmsSubscriptionData::smsSubscribedIsSet() const
{
    return m_SmsSubscribedIsSet;
}

void SmsSubscriptionData::unsetSmsSubscribed()
{
    m_SmsSubscribedIsSet = false;
}
utility::string_t SmsSubscriptionData::getSharedSmsSubsDataId() const
{
    return m_SharedSmsSubsDataId;
}

void SmsSubscriptionData::setSharedSmsSubsDataId(const utility::string_t& value)
{
    m_SharedSmsSubsDataId = value;
    m_SharedSmsSubsDataIdIsSet = true;
}

bool SmsSubscriptionData::sharedSmsSubsDataIdIsSet() const
{
    return m_SharedSmsSubsDataIdIsSet;
}

void SmsSubscriptionData::unsetSharedSmsSubsDataId()
{
    m_SharedSmsSubsDataIdIsSet = false;
}
}
}
}
}


