/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EmergencyInfo.h
 *
 * 
 */

#ifndef EmergencyInfo_H_
#define EmergencyInfo_H_


#include "IpAddress.h"
#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  EmergencyInfo: public jsonParser::jsonParser<EmergencyInfo>
{
public:
    explicit EmergencyInfo(){
        // constructor
        m_PgwFqdn = "";
        
            m_PgwFqdnFlag = (staticjson::Flags::Optional);

            m_PgwIpAddressFlag = (staticjson::Flags::Optional);
m_SmfInstanceId = "";
        
            m_SmfInstanceIdFlag = (staticjson::Flags::Optional);
m_EpdgInd = false;
        
            m_EpdgIndFlag = (staticjson::Flags::Optional);
    };
    virtual ~EmergencyInfo(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : PgwFqdn PgwIpAddress SmfInstanceId EpdgInd 
        h->add_property("pgwFqdn", &this->m_PgwFqdn, m_PgwFqdnFlag);
        h->add_property("pgwIpAddress", &this->m_PgwIpAddress, m_PgwIpAddressFlag);
        h->add_property("smfInstanceId", &this->m_SmfInstanceId, m_SmfInstanceIdFlag);
        h->add_property("epdgInd", &this->m_EpdgInd, m_EpdgIndFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const EmergencyInfo& obj)
    {
        
        o << "PgwFqdn : " << obj.m_PgwFqdn << std::endl;

        o << "PgwIpAddress : " << obj.m_PgwIpAddress << std::endl;

        o << "SmfInstanceId : " << obj.m_SmfInstanceId << std::endl;

        o << "EpdgInd : " << obj.m_EpdgInd << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// EmergencyInfo members vars : PgwFqdn PgwIpAddress SmfInstanceId EpdgInd 

    std::string  getPgwFqdn() const
    {
        return m_PgwFqdn;
    }
    void  setPgwFqdn(std::string const& value)
    {
        m_PgwFqdn = value;
    }

IpAddress  getPgwIpAddress() const
    {
        return m_PgwIpAddress;
    }
    void  setPgwIpAddress(IpAddress const& value)
    {
        m_PgwIpAddress = value;
    }

std::string  getSmfInstanceId() const
    {
        return m_SmfInstanceId;
    }
    void  setSmfInstanceId(std::string const& value)
    {
        m_SmfInstanceId = value;
    }

bool  isEpdgInd() const
    {
        return m_EpdgInd;
    }
    void  setEpdgInd(bool const value)
    {
        m_EpdgInd = value;
    }



    
public:
    std::string m_PgwFqdn;
    
    unsigned m_PgwFqdnFlag;
    IpAddress m_PgwIpAddress;
    
    unsigned m_PgwIpAddressFlag;
    std::string m_SmfInstanceId;
    
    unsigned m_SmfInstanceIdFlag;
    bool m_EpdgInd;
    
    unsigned m_EpdgIndFlag;
  
};
}
}
}
}

#endif /* EmergencyInfo_H_ */
