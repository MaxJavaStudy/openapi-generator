/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * GroupIdentifiersApi.c
 *
 *
 */

#include "jsonParser.hpp"

#include <nghttp2/asio_http2_server.h>

#include "GroupIdentifiersApi.h"
#include "GroupIdentifiersApiImpl.h"

using namespace nghttp2::asio_http2::server;
using namespace nghttp2::asio_http2;

#include "GroupIdentifiers.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

void GroupIdentifiersApi::get_group_identifiers_handler(request &requestIn,
                                                        response &responseIn) {

  // Getting the query params
  std::map<std::string, std::string> queryMap;
  if (!requestIn.uri().raw_query.empty()) {
    queryMap = getQueryMap::get(requestIn.uri().raw_query);
  }

  std::string extGroupIdQuery;

  if (queryMap.count("ext-group-id")) {
    extGroupIdQuery = (queryMap).at("ext-group-id");
  }
  std::optional<std::string> extGroupId;

  //<param name="extGroupId">External Group Identifier parameter type
  //std::string   (optional, default to &quot;&quot;)</param>

  // PrimitiveType
  if (!extGroupIdQuery.empty()) {
    extGroupId.emplace(extGroupIdQuery);
  }

  std::string intGroupIdQuery;

  if (queryMap.count("int-group-id")) {
    intGroupIdQuery = (queryMap).at("int-group-id");
  }
  std::optional<std::string> intGroupId;

  //<param name="intGroupId">Internal Group Identifier parameter type
  //std::string   (optional, default to &quot;&quot;)</param>

  // PrimitiveType
  if (!intGroupIdQuery.empty()) {
    intGroupId.emplace(intGroupIdQuery);
  }

  std::string ueIdIndQuery;

  if (queryMap.count("ue-id-ind")) {
    ueIdIndQuery = (queryMap).at("ue-id-ind");
  }
  std::optional<bool> ueIdInd;

  //<param name="ueIdInd">Indication whether UE identifiers are required or not
  //parameter type bool   (optional, default to false)</param>

  // PrimitiveType
  if (!ueIdIndQuery.empty()) {
    ueIdInd.emplace(ueIdIndQuery);
  }

  std::string supportedFeaturesQuery;

  if (queryMap.count("supported-features")) {
    supportedFeaturesQuery = (queryMap).at("supported-features");
  }
  std::optional<std::string> supportedFeatures;

  //<param name="supportedFeatures">Supported Features parameter type
  //std::string   (optional, default to &quot;&quot;)</param>

  // PrimitiveType
  if (!supportedFeaturesQuery.empty()) {
    supportedFeatures.emplace(supportedFeaturesQuery);
  }

  // Getting the header params
  std::string ifNoneMatch;
  if (requestIn.header().count("If-None-Match")) {
    ifNoneMatch = requestIn.header()["If-None-Match"].value;
  }
  std::string ifModifiedSince;
  if (requestIn.header().count("If-Modified-Since")) {
    ifModifiedSince = requestIn.header()["If-Modified-Since"].value;
  }

  // Getting the header params
  std::string ifNoneMatch;
  if (requestIn.header().count("If-None-Match")) {
    ifNoneMatch = requestIn.header()["If-None-Match"].value;
  }
  std::string ifModifiedSince;
  if (requestIn.header().count("If-Modified-Since")) {
    ifModifiedSince = requestIn.header()["If-Modified-Since"].value;
  }

  try {
    /// <param name="extGroupId">External Group Identifier (optional, default to
    /// &quot;&quot;)</param> <param name="intGroupId">Internal Group Identifier
    /// (optional, default to &quot;&quot;)</param> <param
    /// name="ueIdInd">Indication whether UE identifiers are required or not
    /// (optional, default to false)</param> <param
    /// name="supportedFeatures">Supported Features (optional, default to
    /// &quot;&quot;)</param> <param name="ifNoneMatch">Validator for
    /// conditional requests, as described in RFC 7232, 3.2 (optional, default
    /// to &quot;&quot;)</param> <param name="ifModifiedSince">Validator for
    /// conditional requests, as described in RFC 7232, 3.3 (optional, default
    /// to &quot;&quot;)</param>
    GroupIdentifiersApiImpl::get_group_identifiers(
        extGroupId, intGroupId, ueIdInd, supportedFeatures, ifNoneMatch,
        ifModifiedSince, requestIn, responseIn);

  } catch (std::exception &e) {
    responseIn.write_head(500);
    responseIn.end(e.what());
    // send a 500 error
    return;
  }
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
