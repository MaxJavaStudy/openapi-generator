/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ScheduledCommunicationTime.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ScheduledCommunicationTime::ScheduledCommunicationTime()
{
    m_DaysOfWeekIsSet = false;
    m_TimeOfDayStart = utility::conversions::to_string_t("");
    m_TimeOfDayStartIsSet = false;
    m_TimeOfDayEnd = utility::conversions::to_string_t("");
    m_TimeOfDayEndIsSet = false;
}

ScheduledCommunicationTime::~ScheduledCommunicationTime()
{
}

void ScheduledCommunicationTime::validate()
{
    // TODO: implement validation
}

web::json::value ScheduledCommunicationTime::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DaysOfWeekIsSet)
    {
        val[utility::conversions::to_string_t("daysOfWeek")] = ModelBase::toJson(m_DaysOfWeek);
    }
    if(m_TimeOfDayStartIsSet)
    {
        val[utility::conversions::to_string_t("timeOfDayStart")] = ModelBase::toJson(m_TimeOfDayStart);
    }
    if(m_TimeOfDayEndIsSet)
    {
        val[utility::conversions::to_string_t("timeOfDayEnd")] = ModelBase::toJson(m_TimeOfDayEnd);
    }

    return val;
}

bool ScheduledCommunicationTime::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("daysOfWeek")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("daysOfWeek"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_daysOfWeek;
            ok &= ModelBase::fromJson(fieldValue, refVal_daysOfWeek);
            setDaysOfWeek(refVal_daysOfWeek);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeOfDayStart")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeOfDayStart"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timeOfDayStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeOfDayStart);
            setTimeOfDayStart(refVal_timeOfDayStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timeOfDayEnd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeOfDayEnd"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timeOfDayEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_timeOfDayEnd);
            setTimeOfDayEnd(refVal_timeOfDayEnd);
        }
    }
    return ok;
}

void ScheduledCommunicationTime::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DaysOfWeekIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("daysOfWeek"), m_DaysOfWeek));
    }
    if(m_TimeOfDayStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeOfDayStart"), m_TimeOfDayStart));
    }
    if(m_TimeOfDayEndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeOfDayEnd"), m_TimeOfDayEnd));
    }
}

bool ScheduledCommunicationTime::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("daysOfWeek")))
    {
        std::vector<int32_t> refVal_daysOfWeek;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("daysOfWeek")), refVal_daysOfWeek );
        setDaysOfWeek(refVal_daysOfWeek);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeOfDayStart")))
    {
        utility::string_t refVal_timeOfDayStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeOfDayStart")), refVal_timeOfDayStart );
        setTimeOfDayStart(refVal_timeOfDayStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timeOfDayEnd")))
    {
        utility::string_t refVal_timeOfDayEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeOfDayEnd")), refVal_timeOfDayEnd );
        setTimeOfDayEnd(refVal_timeOfDayEnd);
    }
    return ok;
}

std::vector<int32_t>& ScheduledCommunicationTime::getDaysOfWeek()
{
    return m_DaysOfWeek;
}

void ScheduledCommunicationTime::setDaysOfWeek(std::vector<int32_t> value)
{
    m_DaysOfWeek = value;
    m_DaysOfWeekIsSet = true;
}

bool ScheduledCommunicationTime::daysOfWeekIsSet() const
{
    return m_DaysOfWeekIsSet;
}

void ScheduledCommunicationTime::unsetDaysOfWeek()
{
    m_DaysOfWeekIsSet = false;
}
utility::string_t ScheduledCommunicationTime::getTimeOfDayStart() const
{
    return m_TimeOfDayStart;
}

void ScheduledCommunicationTime::setTimeOfDayStart(const utility::string_t& value)
{
    m_TimeOfDayStart = value;
    m_TimeOfDayStartIsSet = true;
}

bool ScheduledCommunicationTime::timeOfDayStartIsSet() const
{
    return m_TimeOfDayStartIsSet;
}

void ScheduledCommunicationTime::unsetTimeOfDayStart()
{
    m_TimeOfDayStartIsSet = false;
}
utility::string_t ScheduledCommunicationTime::getTimeOfDayEnd() const
{
    return m_TimeOfDayEnd;
}

void ScheduledCommunicationTime::setTimeOfDayEnd(const utility::string_t& value)
{
    m_TimeOfDayEnd = value;
    m_TimeOfDayEndIsSet = true;
}

bool ScheduledCommunicationTime::timeOfDayEndIsSet() const
{
    return m_TimeOfDayEndIsSet;
}

void ScheduledCommunicationTime::unsetTimeOfDayEnd()
{
    m_TimeOfDayEndIsSet = false;
}
}
}
}
}


