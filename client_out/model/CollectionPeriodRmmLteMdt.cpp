/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CollectionPeriodRmmLteMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt()
{
}

CollectionPeriodRmmLteMdt::~CollectionPeriodRmmLteMdt()
{
}

void CollectionPeriodRmmLteMdt::validate()
{
    // TODO: implement validation
}

web::json::value CollectionPeriodRmmLteMdt::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1024) val = web::json::value::string(U(1024));
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1280) val = web::json::value::string(U(1280));
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2048) val = web::json::value::string(U(2048));
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2560) val = web::json::value::string(U(2560));
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__5120) val = web::json::value::string(U(5120));
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__10240) val = web::json::value::string(U(10240));
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__60000) val = web::json::value::string(U(60000));

    return val;
}

bool CollectionPeriodRmmLteMdt::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(1024)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1024;
    if (s == utility::conversions::to_string_t(1280)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1280;
    if (s == utility::conversions::to_string_t(2048)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2048;
    if (s == utility::conversions::to_string_t(2560)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2560;
    if (s == utility::conversions::to_string_t(5120)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__5120;
    if (s == utility::conversions::to_string_t(10240)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__10240;
    if (s == utility::conversions::to_string_t(60000)) m_value = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__60000;
    return true;
}

void CollectionPeriodRmmLteMdt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1024) s = utility::conversions::to_string_t(1024);
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1280) s = utility::conversions::to_string_t(1280);
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2048) s = utility::conversions::to_string_t(2048);
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2560) s = utility::conversions::to_string_t(2560);
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__5120) s = utility::conversions::to_string_t(5120);
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__10240) s = utility::conversions::to_string_t(10240);
    if (m_value == eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__60000) s = utility::conversions::to_string_t(60000);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool CollectionPeriodRmmLteMdt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eCollectionPeriodRmmLteMdt v;

        
        if (s == utility::conversions::to_string_t(1024)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1024;
        if (s == utility::conversions::to_string_t(1280)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__1280;
        if (s == utility::conversions::to_string_t(2048)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2048;
        if (s == utility::conversions::to_string_t(2560)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__2560;
        if (s == utility::conversions::to_string_t(5120)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__5120;
        if (s == utility::conversions::to_string_t(10240)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__10240;
        if (s == utility::conversions::to_string_t(60000)) v = eCollectionPeriodRmmLteMdt::CollectionPeriodRmmLteMdt__60000;

        setValue(v);
    }
    return ok;
}

CollectionPeriodRmmLteMdt::eCollectionPeriodRmmLteMdt CollectionPeriodRmmLteMdt::getValue() const
{
   return m_value;
}

void CollectionPeriodRmmLteMdt::setValue(CollectionPeriodRmmLteMdt::eCollectionPeriodRmmLteMdt const value)
{
   m_value = value;
}


}
}
}
}


