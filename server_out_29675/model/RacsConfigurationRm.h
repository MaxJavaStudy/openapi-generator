/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RacsConfigurationRm.h
 *
 *
 */

#ifndef RacsConfigurationRm_H_
#define RacsConfigurationRm_H_

#include "jsonParser/jsonParser.hpp"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class RacsConfigurationRm : public jsonParser::jsonParser<RacsConfigurationRm> {
public:
  explicit RacsConfigurationRm() {
    // constructor
    m_RacsParamEps = "";

    m_RacsParamEpsFlag = (staticjson::Flags::Optional);
    m_RacsParam5Gs = "";

    m_RacsParam5GsFlag = (staticjson::Flags::Optional);

    m_ImeiTacsFlag = (staticjson::Flags::Optional);
  };
  virtual ~RacsConfigurationRm(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : RacsParamEps RacsParam5Gs ImeiTacs
    h->add_property("racsParamEps", &this->m_RacsParamEps, m_RacsParamEpsFlag);
    h->add_property("racsParam5Gs", &this->m_RacsParam5Gs, m_RacsParam5GsFlag);
    h->add_property("imeiTacs", &this->m_ImeiTacs, m_ImeiTacsFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const RacsConfigurationRm &obj) {

    o << "RacsParamEps : " << obj.m_RacsParamEps << std::endl;

    o << "RacsParam5Gs : " << obj.m_RacsParam5Gs << std::endl;
    o << convert2string(std::string("ImeiTacs"), obj.m_ImeiTacs) << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// RacsConfigurationRm members vars : RacsParamEps RacsParam5Gs ImeiTacs

  std::string getRacsParamEps() const { return m_RacsParamEps; }
  void setRacsParamEps(std::string const &value) { m_RacsParamEps = value; }

  std::string getRacsParam5Gs() const { return m_RacsParam5Gs; }
  void setRacsParam5Gs(std::string const &value) { m_RacsParam5Gs = value; }

  std::vector<std::string> &getImeiTacs() { return m_ImeiTacs; }
  void setImeiTacs(std::vector<std::string> const &value) {
    m_ImeiTacs = value;
  }

public:
  std::string m_RacsParamEps;

  unsigned m_RacsParamEpsFlag;
  std::string m_RacsParam5Gs;

  unsigned m_RacsParam5GsFlag;
  std::vector<std::string> m_ImeiTacs;

  unsigned m_ImeiTacsFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RacsConfigurationRm_H_ */
