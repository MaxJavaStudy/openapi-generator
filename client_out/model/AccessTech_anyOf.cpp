/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AccessTech_anyOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AccessTech_anyOf::AccessTech_anyOf()
{
}

AccessTech_anyOf::~AccessTech_anyOf()
{
}

void AccessTech_anyOf::validate()
{
    // TODO: implement validation
}

web::json::value AccessTech_anyOf::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_NR) val = web::json::value::string(U(NR));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE) val = web::json::value::string(U(EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_NBS1_MODE_ONLY) val = web::json::value::string(U(EUTRAN_IN_NBS1_MODE_ONLY));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_ONLY) val = web::json::value::string(U(EUTRAN_IN_WBS1_MODE_ONLY));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_UTRAN) val = web::json::value::string(U(UTRAN));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_GSM_AND_ECGSM_IOT) val = web::json::value::string(U(GSM_AND_ECGSM_IoT));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_GSM_WITHOUT_ECGSM_IOT) val = web::json::value::string(U(GSM_WITHOUT_ECGSM_IoT));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_ECGSM_IOT_ONLY) val = web::json::value::string(U(ECGSM_IoT_ONLY));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_CDMA_1XRTT) val = web::json::value::string(U(CDMA_1xRTT));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_CDMA_HRPD) val = web::json::value::string(U(CDMA_HRPD));
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_GSM_COMPACT) val = web::json::value::string(U(GSM_COMPACT));

    return val;
}

bool AccessTech_anyOf::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(NR)) m_value = eAccessTech_anyOf::AccessTech_anyOf_NR;
    if (s == utility::conversions::to_string_t(EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE)) m_value = eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE;
    if (s == utility::conversions::to_string_t(EUTRAN_IN_NBS1_MODE_ONLY)) m_value = eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_NBS1_MODE_ONLY;
    if (s == utility::conversions::to_string_t(EUTRAN_IN_WBS1_MODE_ONLY)) m_value = eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_ONLY;
    if (s == utility::conversions::to_string_t(UTRAN)) m_value = eAccessTech_anyOf::AccessTech_anyOf_UTRAN;
    if (s == utility::conversions::to_string_t(GSM_AND_ECGSM_IoT)) m_value = eAccessTech_anyOf::AccessTech_anyOf_GSM_AND_ECGSM_IOT;
    if (s == utility::conversions::to_string_t(GSM_WITHOUT_ECGSM_IoT)) m_value = eAccessTech_anyOf::AccessTech_anyOf_GSM_WITHOUT_ECGSM_IOT;
    if (s == utility::conversions::to_string_t(ECGSM_IoT_ONLY)) m_value = eAccessTech_anyOf::AccessTech_anyOf_ECGSM_IOT_ONLY;
    if (s == utility::conversions::to_string_t(CDMA_1xRTT)) m_value = eAccessTech_anyOf::AccessTech_anyOf_CDMA_1XRTT;
    if (s == utility::conversions::to_string_t(CDMA_HRPD)) m_value = eAccessTech_anyOf::AccessTech_anyOf_CDMA_HRPD;
    if (s == utility::conversions::to_string_t(GSM_COMPACT)) m_value = eAccessTech_anyOf::AccessTech_anyOf_GSM_COMPACT;
    return true;
}

void AccessTech_anyOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_NR) s = utility::conversions::to_string_t(NR);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE) s = utility::conversions::to_string_t(EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_NBS1_MODE_ONLY) s = utility::conversions::to_string_t(EUTRAN_IN_NBS1_MODE_ONLY);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_ONLY) s = utility::conversions::to_string_t(EUTRAN_IN_WBS1_MODE_ONLY);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_UTRAN) s = utility::conversions::to_string_t(UTRAN);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_GSM_AND_ECGSM_IOT) s = utility::conversions::to_string_t(GSM_AND_ECGSM_IoT);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_GSM_WITHOUT_ECGSM_IOT) s = utility::conversions::to_string_t(GSM_WITHOUT_ECGSM_IoT);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_ECGSM_IOT_ONLY) s = utility::conversions::to_string_t(ECGSM_IoT_ONLY);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_CDMA_1XRTT) s = utility::conversions::to_string_t(CDMA_1xRTT);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_CDMA_HRPD) s = utility::conversions::to_string_t(CDMA_HRPD);
    if (m_value == eAccessTech_anyOf::AccessTech_anyOf_GSM_COMPACT) s = utility::conversions::to_string_t(GSM_COMPACT);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool AccessTech_anyOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eAccessTech_anyOf v;

        
        if (s == utility::conversions::to_string_t(NR)) v = eAccessTech_anyOf::AccessTech_anyOf_NR;
        if (s == utility::conversions::to_string_t(EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE)) v = eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE;
        if (s == utility::conversions::to_string_t(EUTRAN_IN_NBS1_MODE_ONLY)) v = eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_NBS1_MODE_ONLY;
        if (s == utility::conversions::to_string_t(EUTRAN_IN_WBS1_MODE_ONLY)) v = eAccessTech_anyOf::AccessTech_anyOf_EUTRAN_IN_WBS1_MODE_ONLY;
        if (s == utility::conversions::to_string_t(UTRAN)) v = eAccessTech_anyOf::AccessTech_anyOf_UTRAN;
        if (s == utility::conversions::to_string_t(GSM_AND_ECGSM_IoT)) v = eAccessTech_anyOf::AccessTech_anyOf_GSM_AND_ECGSM_IOT;
        if (s == utility::conversions::to_string_t(GSM_WITHOUT_ECGSM_IoT)) v = eAccessTech_anyOf::AccessTech_anyOf_GSM_WITHOUT_ECGSM_IOT;
        if (s == utility::conversions::to_string_t(ECGSM_IoT_ONLY)) v = eAccessTech_anyOf::AccessTech_anyOf_ECGSM_IOT_ONLY;
        if (s == utility::conversions::to_string_t(CDMA_1xRTT)) v = eAccessTech_anyOf::AccessTech_anyOf_CDMA_1XRTT;
        if (s == utility::conversions::to_string_t(CDMA_HRPD)) v = eAccessTech_anyOf::AccessTech_anyOf_CDMA_HRPD;
        if (s == utility::conversions::to_string_t(GSM_COMPACT)) v = eAccessTech_anyOf::AccessTech_anyOf_GSM_COMPACT;

        setValue(v);
    }
    return ok;
}

AccessTech_anyOf::eAccessTech_anyOf AccessTech_anyOf::getValue() const
{
   return m_value;
}

void AccessTech_anyOf::setValue(AccessTech_anyOf::eAccessTech_anyOf const value)
{
   m_value = value;
}


}
}
}
}


