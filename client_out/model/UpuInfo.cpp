/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpuInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UpuInfo::UpuInfo()
{
    m_UpuDataListIsSet = false;
    m_UpuRegInd = false;
    m_UpuRegIndIsSet = false;
    m_UpuAckInd = false;
    m_UpuAckIndIsSet = false;
    m_UpuMacIausf = utility::conversions::to_string_t("");
    m_UpuMacIausfIsSet = false;
    m_CounterUpu = utility::conversions::to_string_t("");
    m_CounterUpuIsSet = false;
    m_ProvisioningTime = utility::datetime();
    m_ProvisioningTimeIsSet = false;
}

UpuInfo::~UpuInfo()
{
}

void UpuInfo::validate()
{
    // TODO: implement validation
}

web::json::value UpuInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UpuDataListIsSet)
    {
        val[utility::conversions::to_string_t("upuDataList")] = ModelBase::toJson(m_UpuDataList);
    }
    if(m_UpuRegIndIsSet)
    {
        val[utility::conversions::to_string_t("upuRegInd")] = ModelBase::toJson(m_UpuRegInd);
    }
    if(m_UpuAckIndIsSet)
    {
        val[utility::conversions::to_string_t("upuAckInd")] = ModelBase::toJson(m_UpuAckInd);
    }
    if(m_UpuMacIausfIsSet)
    {
        val[utility::conversions::to_string_t("upuMacIausf")] = ModelBase::toJson(m_UpuMacIausf);
    }
    if(m_CounterUpuIsSet)
    {
        val[utility::conversions::to_string_t("counterUpu")] = ModelBase::toJson(m_CounterUpu);
    }
    if(m_ProvisioningTimeIsSet)
    {
        val[utility::conversions::to_string_t("provisioningTime")] = ModelBase::toJson(m_ProvisioningTime);
    }

    return val;
}

bool UpuInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("upuDataList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upuDataList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpuData>> refVal_upuDataList;
            ok &= ModelBase::fromJson(fieldValue, refVal_upuDataList);
            setUpuDataList(refVal_upuDataList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upuRegInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upuRegInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_upuRegInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_upuRegInd);
            setUpuRegInd(refVal_upuRegInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upuAckInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upuAckInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_upuAckInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_upuAckInd);
            setUpuAckInd(refVal_upuAckInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upuMacIausf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upuMacIausf"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_upuMacIausf;
            ok &= ModelBase::fromJson(fieldValue, refVal_upuMacIausf);
            setUpuMacIausf(refVal_upuMacIausf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("counterUpu")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("counterUpu"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_counterUpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_counterUpu);
            setCounterUpu(refVal_counterUpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provisioningTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("provisioningTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_provisioningTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_provisioningTime);
            setProvisioningTime(refVal_provisioningTime);
        }
    }
    return ok;
}

void UpuInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_UpuDataListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upuDataList"), m_UpuDataList));
    }
    if(m_UpuRegIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upuRegInd"), m_UpuRegInd));
    }
    if(m_UpuAckIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upuAckInd"), m_UpuAckInd));
    }
    if(m_UpuMacIausfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upuMacIausf"), m_UpuMacIausf));
    }
    if(m_CounterUpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("counterUpu"), m_CounterUpu));
    }
    if(m_ProvisioningTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("provisioningTime"), m_ProvisioningTime));
    }
}

bool UpuInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("upuDataList")))
    {
        std::vector<std::shared_ptr<UpuData>> refVal_upuDataList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upuDataList")), refVal_upuDataList );
        setUpuDataList(refVal_upuDataList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upuRegInd")))
    {
        bool refVal_upuRegInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upuRegInd")), refVal_upuRegInd );
        setUpuRegInd(refVal_upuRegInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upuAckInd")))
    {
        bool refVal_upuAckInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upuAckInd")), refVal_upuAckInd );
        setUpuAckInd(refVal_upuAckInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upuMacIausf")))
    {
        utility::string_t refVal_upuMacIausf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upuMacIausf")), refVal_upuMacIausf );
        setUpuMacIausf(refVal_upuMacIausf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("counterUpu")))
    {
        utility::string_t refVal_counterUpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("counterUpu")), refVal_counterUpu );
        setCounterUpu(refVal_counterUpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provisioningTime")))
    {
        utility::datetime refVal_provisioningTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("provisioningTime")), refVal_provisioningTime );
        setProvisioningTime(refVal_provisioningTime);
    }
    return ok;
}

std::vector<std::shared_ptr<UpuData>>& UpuInfo::getUpuDataList()
{
    return m_UpuDataList;
}

void UpuInfo::setUpuDataList(const std::vector<std::shared_ptr<UpuData>>& value)
{
    m_UpuDataList = value;
    m_UpuDataListIsSet = true;
}

bool UpuInfo::upuDataListIsSet() const
{
    return m_UpuDataListIsSet;
}

void UpuInfo::unsetUpuDataList()
{
    m_UpuDataListIsSet = false;
}
bool UpuInfo::isUpuRegInd() const
{
    return m_UpuRegInd;
}

void UpuInfo::setUpuRegInd(bool value)
{
    m_UpuRegInd = value;
    m_UpuRegIndIsSet = true;
}

bool UpuInfo::upuRegIndIsSet() const
{
    return m_UpuRegIndIsSet;
}

void UpuInfo::unsetUpuRegInd()
{
    m_UpuRegIndIsSet = false;
}
bool UpuInfo::isUpuAckInd() const
{
    return m_UpuAckInd;
}

void UpuInfo::setUpuAckInd(bool value)
{
    m_UpuAckInd = value;
    m_UpuAckIndIsSet = true;
}

bool UpuInfo::upuAckIndIsSet() const
{
    return m_UpuAckIndIsSet;
}

void UpuInfo::unsetUpuAckInd()
{
    m_UpuAckIndIsSet = false;
}
utility::string_t UpuInfo::getUpuMacIausf() const
{
    return m_UpuMacIausf;
}

void UpuInfo::setUpuMacIausf(const utility::string_t& value)
{
    m_UpuMacIausf = value;
    m_UpuMacIausfIsSet = true;
}

bool UpuInfo::upuMacIausfIsSet() const
{
    return m_UpuMacIausfIsSet;
}

void UpuInfo::unsetUpuMacIausf()
{
    m_UpuMacIausfIsSet = false;
}
utility::string_t UpuInfo::getCounterUpu() const
{
    return m_CounterUpu;
}

void UpuInfo::setCounterUpu(const utility::string_t& value)
{
    m_CounterUpu = value;
    m_CounterUpuIsSet = true;
}

bool UpuInfo::counterUpuIsSet() const
{
    return m_CounterUpuIsSet;
}

void UpuInfo::unsetCounterUpu()
{
    m_CounterUpuIsSet = false;
}
utility::datetime UpuInfo::getProvisioningTime() const
{
    return m_ProvisioningTime;
}

void UpuInfo::setProvisioningTime(const utility::datetime& value)
{
    m_ProvisioningTime = value;
    m_ProvisioningTimeIsSet = true;
}

bool UpuInfo::provisioningTimeIsSet() const
{
    return m_ProvisioningTimeIsSet;
}

void UpuInfo::unsetProvisioningTime()
{
    m_ProvisioningTimeIsSet = false;
}
}
}
}
}


