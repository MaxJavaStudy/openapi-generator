/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LcsMoData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




LcsMoData::LcsMoData()
{
    m_AllowedServiceClassesIsSet = false;
}

LcsMoData::~LcsMoData()
{
}

void LcsMoData::validate()
{
    // TODO: implement validation
}

web::json::value LcsMoData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AllowedServiceClassesIsSet)
    {
        val[utility::conversions::to_string_t("allowedServiceClasses")] = ModelBase::toJson(m_AllowedServiceClasses);
    }

    return val;
}

bool LcsMoData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("allowedServiceClasses")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowedServiceClasses"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LcsMoServiceClass>> refVal_allowedServiceClasses;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowedServiceClasses);
            setAllowedServiceClasses(refVal_allowedServiceClasses);
        }
    }
    return ok;
}

void LcsMoData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AllowedServiceClassesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowedServiceClasses"), m_AllowedServiceClasses));
    }
}

bool LcsMoData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("allowedServiceClasses")))
    {
        std::vector<std::shared_ptr<LcsMoServiceClass>> refVal_allowedServiceClasses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowedServiceClasses")), refVal_allowedServiceClasses );
        setAllowedServiceClasses(refVal_allowedServiceClasses);
    }
    return ok;
}

std::vector<std::shared_ptr<LcsMoServiceClass>>& LcsMoData::getAllowedServiceClasses()
{
    return m_AllowedServiceClasses;
}

void LcsMoData::setAllowedServiceClasses(const std::vector<std::shared_ptr<LcsMoServiceClass>>& value)
{
    m_AllowedServiceClasses = value;
    m_AllowedServiceClassesIsSet = true;
}

bool LcsMoData::allowedServiceClassesIsSet() const
{
    return m_AllowedServiceClassesIsSet;
}

void LcsMoData::unsetAllowedServiceClasses()
{
    m_AllowedServiceClassesIsSet = false;
}
}
}
}
}


