/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DnnConfiguration.h
 *
 * 
 */

#ifndef DnnConfiguration_H_
#define DnnConfiguration_H_


#include "Ambr.h"
#include "FrameRouteInfo.h"
#include "IpAddress.h"
#include "NiddInformation.h"
#include "SubscribedDefaultQos.h"
#include "PduSessionContinuityInd.h"
#include <string>
#include "UpSecurity.h"
#include "SscModes.h"
#include "AcsInfo.h"
#include "PduSessionTypes.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  DnnConfiguration: public jsonParser::jsonParser<DnnConfiguration>
{
public:
    explicit DnnConfiguration(){
        // constructor
        
            m_PduSessionTypesFlag = staticjson::Flags::Default;

            m_SscModesFlag = staticjson::Flags::Default;
m_IwkEpsInd = false;
        
            m_IwkEpsIndFlag = (staticjson::Flags::Optional);

            m_r_5gQosProfileFlag = (staticjson::Flags::Optional);

            m_SessionAmbrFlag = (staticjson::Flags::Optional);
m_r_3gppChargingCharacteristics = "";
        
            m_r_3gppChargingCharacteristicsFlag = (staticjson::Flags::Optional);

            m_StaticIpAddressFlag = (staticjson::Flags::Optional);

            m_UpSecurityFlag = (staticjson::Flags::Optional);

            m_PduSessionContinuityIndFlag = (staticjson::Flags::Optional);
m_NiddNefId = "";
        
            m_NiddNefIdFlag = (staticjson::Flags::Optional);

            m_NiddInfoFlag = (staticjson::Flags::Optional);
m_RedundantSessionAllowed = false;
        
            m_RedundantSessionAllowedFlag = (staticjson::Flags::Optional);

            m_AcsInfoFlag = (staticjson::Flags::Optional);

            m_Ipv4FrameRouteListFlag = (staticjson::Flags::Optional);

            m_Ipv6FrameRouteListFlag = (staticjson::Flags::Optional);
m_AtsssAllowed = false;
        
            m_AtsssAllowedFlag = (staticjson::Flags::Optional);
m_SecondaryAuth = false;
        
            m_SecondaryAuthFlag = (staticjson::Flags::Optional);
m_DnAaaIpAddressAllocation = false;
        
            m_DnAaaIpAddressAllocationFlag = (staticjson::Flags::Optional);

            m_DnAaaAddressFlag = (staticjson::Flags::Optional);
    };
    virtual ~DnnConfiguration(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : PduSessionTypes SscModes IwkEpsInd r_5gQosProfile SessionAmbr r_3gppChargingCharacteristics StaticIpAddress UpSecurity PduSessionContinuityInd NiddNefId NiddInfo RedundantSessionAllowed AcsInfo Ipv4FrameRouteList Ipv6FrameRouteList AtsssAllowed SecondaryAuth DnAaaIpAddressAllocation DnAaaAddress 
        h->add_property("pduSessionTypes", &this->m_PduSessionTypes, m_PduSessionTypesFlag);
        h->add_property("sscModes", &this->m_SscModes, m_SscModesFlag);
        h->add_property("iwkEpsInd", &this->m_IwkEpsInd, m_IwkEpsIndFlag);
        h->add_property("r5gQosProfile", &this->m_r_5gQosProfile, m_r_5gQosProfileFlag);
        h->add_property("sessionAmbr", &this->m_SessionAmbr, m_SessionAmbrFlag);
        h->add_property("r3gppChargingCharacteristics", &this->m_r_3gppChargingCharacteristics, m_r_3gppChargingCharacteristicsFlag);
        h->add_property("staticIpAddress", &this->m_StaticIpAddress, m_StaticIpAddressFlag);
        h->add_property("upSecurity", &this->m_UpSecurity, m_UpSecurityFlag);
        h->add_property("pduSessionContinuityInd", &this->m_PduSessionContinuityInd, m_PduSessionContinuityIndFlag);
        h->add_property("niddNefId", &this->m_NiddNefId, m_NiddNefIdFlag);
        h->add_property("niddInfo", &this->m_NiddInfo, m_NiddInfoFlag);
        h->add_property("redundantSessionAllowed", &this->m_RedundantSessionAllowed, m_RedundantSessionAllowedFlag);
        h->add_property("acsInfo", &this->m_AcsInfo, m_AcsInfoFlag);
        h->add_property("ipv4FrameRouteList", &this->m_Ipv4FrameRouteList, m_Ipv4FrameRouteListFlag);
        h->add_property("ipv6FrameRouteList", &this->m_Ipv6FrameRouteList, m_Ipv6FrameRouteListFlag);
        h->add_property("atsssAllowed", &this->m_AtsssAllowed, m_AtsssAllowedFlag);
        h->add_property("secondaryAuth", &this->m_SecondaryAuth, m_SecondaryAuthFlag);
        h->add_property("dnAaaIpAddressAllocation", &this->m_DnAaaIpAddressAllocation, m_DnAaaIpAddressAllocationFlag);
        h->add_property("dnAaaAddress", &this->m_DnAaaAddress, m_DnAaaAddressFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const DnnConfiguration& obj)
    {
        
        o << "PduSessionTypes : " << obj.m_PduSessionTypes << std::endl;

        o << "SscModes : " << obj.m_SscModes << std::endl;

        o << "IwkEpsInd : " << obj.m_IwkEpsInd << std::endl;

        o << "r_5gQosProfile : " << obj.m_r_5gQosProfile << std::endl;

        o << "SessionAmbr : " << obj.m_SessionAmbr << std::endl;

        o << "r_3gppChargingCharacteristics : " << obj.m_r_3gppChargingCharacteristics << std::endl;
        o<< convert2string(std::string("StaticIpAddress"), obj.m_StaticIpAddress) <<std::endl;
       
        o << "UpSecurity : " << obj.m_UpSecurity << std::endl;

        o << "PduSessionContinuityInd : " << obj.m_PduSessionContinuityInd << std::endl;

        o << "NiddNefId : " << obj.m_NiddNefId << std::endl;

        o << "NiddInfo : " << obj.m_NiddInfo << std::endl;

        o << "RedundantSessionAllowed : " << obj.m_RedundantSessionAllowed << std::endl;

        o << "AcsInfo : " << obj.m_AcsInfo << std::endl;
        o<< convert2string(std::string("Ipv4FrameRouteList"), obj.m_Ipv4FrameRouteList) <<std::endl;
               o<< convert2string(std::string("Ipv6FrameRouteList"), obj.m_Ipv6FrameRouteList) <<std::endl;
       
        o << "AtsssAllowed : " << obj.m_AtsssAllowed << std::endl;

        o << "SecondaryAuth : " << obj.m_SecondaryAuth << std::endl;

        o << "DnAaaIpAddressAllocation : " << obj.m_DnAaaIpAddressAllocation << std::endl;

        o << "DnAaaAddress : " << obj.m_DnAaaAddress << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// DnnConfiguration members vars : PduSessionTypes SscModes IwkEpsInd r_5gQosProfile SessionAmbr r_3gppChargingCharacteristics StaticIpAddress UpSecurity PduSessionContinuityInd NiddNefId NiddInfo RedundantSessionAllowed AcsInfo Ipv4FrameRouteList Ipv6FrameRouteList AtsssAllowed SecondaryAuth DnAaaIpAddressAllocation DnAaaAddress 

    PduSessionTypes  getPduSessionTypes() const
    {
        return m_PduSessionTypes;
    }
    void  setPduSessionTypes(PduSessionTypes const& value)
    {
        m_PduSessionTypes = value;
    }

SscModes  getSscModes() const
    {
        return m_SscModes;
    }
    void  setSscModes(SscModes const& value)
    {
        m_SscModes = value;
    }

bool  isIwkEpsInd() const
    {
        return m_IwkEpsInd;
    }
    void  setIwkEpsInd(bool const value)
    {
        m_IwkEpsInd = value;
    }

SubscribedDefaultQos  getR5gQosProfile() const
    {
        return m_r_5gQosProfile;
    }
    void  setR5gQosProfile(SubscribedDefaultQos const& value)
    {
        m_r_5gQosProfile = value;
    }

Ambr  getSessionAmbr() const
    {
        return m_SessionAmbr;
    }
    void  setSessionAmbr(Ambr const& value)
    {
        m_SessionAmbr = value;
    }

std::string  getR3gppChargingCharacteristics() const
    {
        return m_r_3gppChargingCharacteristics;
    }
    void  setR3gppChargingCharacteristics(std::string const& value)
    {
        m_r_3gppChargingCharacteristics = value;
    }

std::vector<IpAddress>&  getStaticIpAddress()
    {
        return m_StaticIpAddress;
    }
    void  setStaticIpAddress(std::vector<IpAddress> const& value)
    {
        m_StaticIpAddress = value;
    }

UpSecurity  getUpSecurity() const
    {
        return m_UpSecurity;
    }
    void  setUpSecurity(UpSecurity const& value)
    {
        m_UpSecurity = value;
    }

PduSessionContinuityInd  getPduSessionContinuityInd() const
    {
        return m_PduSessionContinuityInd;
    }
    void  setPduSessionContinuityInd(PduSessionContinuityInd const& value)
    {
        m_PduSessionContinuityInd = value;
    }

std::string  getNiddNefId() const
    {
        return m_NiddNefId;
    }
    void  setNiddNefId(std::string const& value)
    {
        m_NiddNefId = value;
    }

NiddInformation  getNiddInfo() const
    {
        return m_NiddInfo;
    }
    void  setNiddInfo(NiddInformation const& value)
    {
        m_NiddInfo = value;
    }

bool  isRedundantSessionAllowed() const
    {
        return m_RedundantSessionAllowed;
    }
    void  setRedundantSessionAllowed(bool const value)
    {
        m_RedundantSessionAllowed = value;
    }

AcsInfo  getAcsInfo() const
    {
        return m_AcsInfo;
    }
    void  setAcsInfo(AcsInfo const& value)
    {
        m_AcsInfo = value;
    }

std::vector<FrameRouteInfo>&  getIpv4FrameRouteList()
    {
        return m_Ipv4FrameRouteList;
    }
    void  setIpv4FrameRouteList(std::vector<FrameRouteInfo> const& value)
    {
        m_Ipv4FrameRouteList = value;
    }

std::vector<FrameRouteInfo>&  getIpv6FrameRouteList()
    {
        return m_Ipv6FrameRouteList;
    }
    void  setIpv6FrameRouteList(std::vector<FrameRouteInfo> const& value)
    {
        m_Ipv6FrameRouteList = value;
    }

bool  isAtsssAllowed() const
    {
        return m_AtsssAllowed;
    }
    void  setAtsssAllowed(bool const value)
    {
        m_AtsssAllowed = value;
    }

bool  isSecondaryAuth() const
    {
        return m_SecondaryAuth;
    }
    void  setSecondaryAuth(bool const value)
    {
        m_SecondaryAuth = value;
    }

bool  isDnAaaIpAddressAllocation() const
    {
        return m_DnAaaIpAddressAllocation;
    }
    void  setDnAaaIpAddressAllocation(bool const value)
    {
        m_DnAaaIpAddressAllocation = value;
    }

IpAddress  getDnAaaAddress() const
    {
        return m_DnAaaAddress;
    }
    void  setDnAaaAddress(IpAddress const& value)
    {
        m_DnAaaAddress = value;
    }



    
public:
    PduSessionTypes m_PduSessionTypes;
    
    unsigned m_PduSessionTypesFlag;
    SscModes m_SscModes;
    
    unsigned m_SscModesFlag;
    bool m_IwkEpsInd;
    
    unsigned m_IwkEpsIndFlag;
    SubscribedDefaultQos m_r_5gQosProfile;
    
    unsigned m_r_5gQosProfileFlag;
    Ambr m_SessionAmbr;
    
    unsigned m_SessionAmbrFlag;
    std::string m_r_3gppChargingCharacteristics;
    
    unsigned m_r_3gppChargingCharacteristicsFlag;
    std::vector<IpAddress> m_StaticIpAddress;
    
    unsigned m_StaticIpAddressFlag;
    UpSecurity m_UpSecurity;
    
    unsigned m_UpSecurityFlag;
    PduSessionContinuityInd m_PduSessionContinuityInd;
    
    unsigned m_PduSessionContinuityIndFlag;
    std::string m_NiddNefId;
    
    unsigned m_NiddNefIdFlag;
    NiddInformation m_NiddInfo;
    
    unsigned m_NiddInfoFlag;
    bool m_RedundantSessionAllowed;
    
    unsigned m_RedundantSessionAllowedFlag;
    AcsInfo m_AcsInfo;
    
    unsigned m_AcsInfoFlag;
    std::vector<FrameRouteInfo> m_Ipv4FrameRouteList;
    
    unsigned m_Ipv4FrameRouteListFlag;
    std::vector<FrameRouteInfo> m_Ipv6FrameRouteList;
    
    unsigned m_Ipv6FrameRouteListFlag;
    bool m_AtsssAllowed;
    
    unsigned m_AtsssAllowedFlag;
    bool m_SecondaryAuth;
    
    unsigned m_SecondaryAuthFlag;
    bool m_DnAaaIpAddressAllocation;
    
    unsigned m_DnAaaIpAddressAllocationFlag;
    IpAddress m_DnAaaAddress;
    
    unsigned m_DnAaaAddressFlag;
  
};
}
}
}
}

#endif /* DnnConfiguration_H_ */
