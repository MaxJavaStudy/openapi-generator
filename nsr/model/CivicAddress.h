/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CivicAddress.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef CivicAddress_H_
#define CivicAddress_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class CivicAddress : public jsonParser::jsonParser<CivicAddress> {
public:
  explicit CivicAddress() {
    // constructor
    m_Country = "";

    m_CountryFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CountryOutFlag.reset(new unsigned);
    *m_CountryOutFlag.get() = 0;
    m_A1 = "";

    m_A1Flag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_A1OutFlag.reset(new unsigned);
    *m_A1OutFlag.get() = 0;
    m_A2 = "";

    m_A2Flag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_A2OutFlag.reset(new unsigned);
    *m_A2OutFlag.get() = 0;
    m_A3 = "";

    m_A3Flag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_A3OutFlag.reset(new unsigned);
    *m_A3OutFlag.get() = 0;
    m_A4 = "";

    m_A4Flag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_A4OutFlag.reset(new unsigned);
    *m_A4OutFlag.get() = 0;
    m_A5 = "";

    m_A5Flag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_A5OutFlag.reset(new unsigned);
    *m_A5OutFlag.get() = 0;
    m_A6 = "";

    m_A6Flag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_A6OutFlag.reset(new unsigned);
    *m_A6OutFlag.get() = 0;
    m_PRD = "";

    m_PRDFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PRDOutFlag.reset(new unsigned);
    *m_PRDOutFlag.get() = 0;
    m_POD = "";

    m_PODFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PODOutFlag.reset(new unsigned);
    *m_PODOutFlag.get() = 0;
    m_STS = "";

    m_STSFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_STSOutFlag.reset(new unsigned);
    *m_STSOutFlag.get() = 0;
    m_HNO = "";

    m_HNOFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_HNOOutFlag.reset(new unsigned);
    *m_HNOOutFlag.get() = 0;
    m_HNS = "";

    m_HNSFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_HNSOutFlag.reset(new unsigned);
    *m_HNSOutFlag.get() = 0;
    m_LMK = "";

    m_LMKFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LMKOutFlag.reset(new unsigned);
    *m_LMKOutFlag.get() = 0;
    m_LOC = "";

    m_LOCFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LOCOutFlag.reset(new unsigned);
    *m_LOCOutFlag.get() = 0;
    m_NAM = "";

    m_NAMFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_NAMOutFlag.reset(new unsigned);
    *m_NAMOutFlag.get() = 0;
    m_PC = "";

    m_PCFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PCOutFlag.reset(new unsigned);
    *m_PCOutFlag.get() = 0;
    m_BLD = "";

    m_BLDFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_BLDOutFlag.reset(new unsigned);
    *m_BLDOutFlag.get() = 0;
    m_UNIT = "";

    m_UNITFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UNITOutFlag.reset(new unsigned);
    *m_UNITOutFlag.get() = 0;
    m_FLR = "";

    m_FLRFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_FLROutFlag.reset(new unsigned);
    *m_FLROutFlag.get() = 0;
    m_ROOM = "";

    m_ROOMFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ROOMOutFlag.reset(new unsigned);
    *m_ROOMOutFlag.get() = 0;
    m_PLC = "";

    m_PLCFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PLCOutFlag.reset(new unsigned);
    *m_PLCOutFlag.get() = 0;
    m_PCN = "";

    m_PCNFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PCNOutFlag.reset(new unsigned);
    *m_PCNOutFlag.get() = 0;
    m_POBOX = "";

    m_POBOXFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_POBOXOutFlag.reset(new unsigned);
    *m_POBOXOutFlag.get() = 0;
    m_ADDCODE = "";

    m_ADDCODEFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ADDCODEOutFlag.reset(new unsigned);
    *m_ADDCODEOutFlag.get() = 0;
    m_SEAT = "";

    m_SEATFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SEATOutFlag.reset(new unsigned);
    *m_SEATOutFlag.get() = 0;
    m_RD = "";

    m_RDFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RDOutFlag.reset(new unsigned);
    *m_RDOutFlag.get() = 0;
    m_RDSEC = "";

    m_RDSECFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RDSECOutFlag.reset(new unsigned);
    *m_RDSECOutFlag.get() = 0;
    m_RDBR = "";

    m_RDBRFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RDBROutFlag.reset(new unsigned);
    *m_RDBROutFlag.get() = 0;
    m_RDSUBBR = "";

    m_RDSUBBRFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RDSUBBROutFlag.reset(new unsigned);
    *m_RDSUBBROutFlag.get() = 0;
    m_PRM = "";

    m_PRMFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PRMOutFlag.reset(new unsigned);
    *m_PRMOutFlag.get() = 0;
    m_POM = "";

    m_POMFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_POMOutFlag.reset(new unsigned);
    *m_POMOutFlag.get() = 0;
  };
  virtual ~CivicAddress(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Country A1 A2 A3 A4 A5 A6 PRD POD STS
    // HNO HNS LMK LOC NAM PC BLD UNIT FLR ROOM PLC PCN POBOX ADDCODE SEAT RD
    // RDSEC RDBR RDSUBBR PRM POM
    h->add_optional_property("country", &this->m_Country, m_CountryFlag,
                             m_CountryOutFlag);
    h->add_optional_property("a1", &this->m_A1, m_A1Flag, m_A1OutFlag);
    h->add_optional_property("a2", &this->m_A2, m_A2Flag, m_A2OutFlag);
    h->add_optional_property("a3", &this->m_A3, m_A3Flag, m_A3OutFlag);
    h->add_optional_property("a4", &this->m_A4, m_A4Flag, m_A4OutFlag);
    h->add_optional_property("a5", &this->m_A5, m_A5Flag, m_A5OutFlag);
    h->add_optional_property("a6", &this->m_A6, m_A6Flag, m_A6OutFlag);
    h->add_optional_property("pRD", &this->m_PRD, m_PRDFlag, m_PRDOutFlag);
    h->add_optional_property("pOD", &this->m_POD, m_PODFlag, m_PODOutFlag);
    h->add_optional_property("sTS", &this->m_STS, m_STSFlag, m_STSOutFlag);
    h->add_optional_property("hNO", &this->m_HNO, m_HNOFlag, m_HNOOutFlag);
    h->add_optional_property("hNS", &this->m_HNS, m_HNSFlag, m_HNSOutFlag);
    h->add_optional_property("lMK", &this->m_LMK, m_LMKFlag, m_LMKOutFlag);
    h->add_optional_property("lOC", &this->m_LOC, m_LOCFlag, m_LOCOutFlag);
    h->add_optional_property("nAM", &this->m_NAM, m_NAMFlag, m_NAMOutFlag);
    h->add_optional_property("pC", &this->m_PC, m_PCFlag, m_PCOutFlag);
    h->add_optional_property("bLD", &this->m_BLD, m_BLDFlag, m_BLDOutFlag);
    h->add_optional_property("uNIT", &this->m_UNIT, m_UNITFlag, m_UNITOutFlag);
    h->add_optional_property("fLR", &this->m_FLR, m_FLRFlag, m_FLROutFlag);
    h->add_optional_property("rOOM", &this->m_ROOM, m_ROOMFlag, m_ROOMOutFlag);
    h->add_optional_property("pLC", &this->m_PLC, m_PLCFlag, m_PLCOutFlag);
    h->add_optional_property("pCN", &this->m_PCN, m_PCNFlag, m_PCNOutFlag);
    h->add_optional_property("pOBOX", &this->m_POBOX, m_POBOXFlag,
                             m_POBOXOutFlag);
    h->add_optional_property("aDDCODE", &this->m_ADDCODE, m_ADDCODEFlag,
                             m_ADDCODEOutFlag);
    h->add_optional_property("sEAT", &this->m_SEAT, m_SEATFlag, m_SEATOutFlag);
    h->add_optional_property("rD", &this->m_RD, m_RDFlag, m_RDOutFlag);
    h->add_optional_property("rDSEC", &this->m_RDSEC, m_RDSECFlag,
                             m_RDSECOutFlag);
    h->add_optional_property("rDBR", &this->m_RDBR, m_RDBRFlag, m_RDBROutFlag);
    h->add_optional_property("rDSUBBR", &this->m_RDSUBBR, m_RDSUBBRFlag,
                             m_RDSUBBROutFlag);
    h->add_optional_property("pRM", &this->m_PRM, m_PRMFlag, m_PRMOutFlag);
    h->add_optional_property("pOM", &this->m_POM, m_POMFlag, m_POMOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const CivicAddress &obj) {

    o << "Country, optional flag is : " << *m_CountryOutFlag
      << ", content is : " << obj.m_Country << std::endl;

    o << "A1, optional flag is : " << *m_A1OutFlag
      << ", content is : " << obj.m_A1 << std::endl;

    o << "A2, optional flag is : " << *m_A2OutFlag
      << ", content is : " << obj.m_A2 << std::endl;

    o << "A3, optional flag is : " << *m_A3OutFlag
      << ", content is : " << obj.m_A3 << std::endl;

    o << "A4, optional flag is : " << *m_A4OutFlag
      << ", content is : " << obj.m_A4 << std::endl;

    o << "A5, optional flag is : " << *m_A5OutFlag
      << ", content is : " << obj.m_A5 << std::endl;

    o << "A6, optional flag is : " << *m_A6OutFlag
      << ", content is : " << obj.m_A6 << std::endl;

    o << "PRD, optional flag is : " << *m_PRDOutFlag
      << ", content is : " << obj.m_PRD << std::endl;

    o << "POD, optional flag is : " << *m_PODOutFlag
      << ", content is : " << obj.m_POD << std::endl;

    o << "STS, optional flag is : " << *m_STSOutFlag
      << ", content is : " << obj.m_STS << std::endl;

    o << "HNO, optional flag is : " << *m_HNOOutFlag
      << ", content is : " << obj.m_HNO << std::endl;

    o << "HNS, optional flag is : " << *m_HNSOutFlag
      << ", content is : " << obj.m_HNS << std::endl;

    o << "LMK, optional flag is : " << *m_LMKOutFlag
      << ", content is : " << obj.m_LMK << std::endl;

    o << "LOC, optional flag is : " << *m_LOCOutFlag
      << ", content is : " << obj.m_LOC << std::endl;

    o << "NAM, optional flag is : " << *m_NAMOutFlag
      << ", content is : " << obj.m_NAM << std::endl;

    o << "PC, optional flag is : " << *m_PCOutFlag
      << ", content is : " << obj.m_PC << std::endl;

    o << "BLD, optional flag is : " << *m_BLDOutFlag
      << ", content is : " << obj.m_BLD << std::endl;

    o << "UNIT, optional flag is : " << *m_UNITOutFlag
      << ", content is : " << obj.m_UNIT << std::endl;

    o << "FLR, optional flag is : " << *m_FLROutFlag
      << ", content is : " << obj.m_FLR << std::endl;

    o << "ROOM, optional flag is : " << *m_ROOMOutFlag
      << ", content is : " << obj.m_ROOM << std::endl;

    o << "PLC, optional flag is : " << *m_PLCOutFlag
      << ", content is : " << obj.m_PLC << std::endl;

    o << "PCN, optional flag is : " << *m_PCNOutFlag
      << ", content is : " << obj.m_PCN << std::endl;

    o << "POBOX, optional flag is : " << *m_POBOXOutFlag
      << ", content is : " << obj.m_POBOX << std::endl;

    o << "ADDCODE, optional flag is : " << *m_ADDCODEOutFlag
      << ", content is : " << obj.m_ADDCODE << std::endl;

    o << "SEAT, optional flag is : " << *m_SEATOutFlag
      << ", content is : " << obj.m_SEAT << std::endl;

    o << "RD, optional flag is : " << *m_RDOutFlag
      << ", content is : " << obj.m_RD << std::endl;

    o << "RDSEC, optional flag is : " << *m_RDSECOutFlag
      << ", content is : " << obj.m_RDSEC << std::endl;

    o << "RDBR, optional flag is : " << *m_RDBROutFlag
      << ", content is : " << obj.m_RDBR << std::endl;

    o << "RDSUBBR, optional flag is : " << *m_RDSUBBROutFlag
      << ", content is : " << obj.m_RDSUBBR << std::endl;

    o << "PRM, optional flag is : " << *m_PRMOutFlag
      << ", content is : " << obj.m_PRM << std::endl;

    o << "POM, optional flag is : " << *m_POMOutFlag
      << ", content is : " << obj.m_POM << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// CivicAddress members vars : Country A1 A2 A3 A4 A5 A6 PRD POD STS HNO HNS
  /// LMK LOC NAM PC BLD UNIT FLR ROOM PLC PCN POBOX ADDCODE SEAT RD RDSEC RDBR
  /// RDSUBBR PRM POM

  std::string getCountry() const { return m_Country; }
  void setCountry(std::string const &value) { m_Country = value; }

  std::string getA1() const { return m_A1; }
  void setA1(std::string const &value) { m_A1 = value; }

  std::string getA2() const { return m_A2; }
  void setA2(std::string const &value) { m_A2 = value; }

  std::string getA3() const { return m_A3; }
  void setA3(std::string const &value) { m_A3 = value; }

  std::string getA4() const { return m_A4; }
  void setA4(std::string const &value) { m_A4 = value; }

  std::string getA5() const { return m_A5; }
  void setA5(std::string const &value) { m_A5 = value; }

  std::string getA6() const { return m_A6; }
  void setA6(std::string const &value) { m_A6 = value; }

  std::string getPRD() const { return m_PRD; }
  void setPRD(std::string const &value) { m_PRD = value; }

  std::string getPOD() const { return m_POD; }
  void setPOD(std::string const &value) { m_POD = value; }

  std::string getSTS() const { return m_STS; }
  void setSTS(std::string const &value) { m_STS = value; }

  std::string getHNO() const { return m_HNO; }
  void setHNO(std::string const &value) { m_HNO = value; }

  std::string getHNS() const { return m_HNS; }
  void setHNS(std::string const &value) { m_HNS = value; }

  std::string getLMK() const { return m_LMK; }
  void setLMK(std::string const &value) { m_LMK = value; }

  std::string getLOC() const { return m_LOC; }
  void setLOC(std::string const &value) { m_LOC = value; }

  std::string getNAM() const { return m_NAM; }
  void setNAM(std::string const &value) { m_NAM = value; }

  std::string getPC() const { return m_PC; }
  void setPC(std::string const &value) { m_PC = value; }

  std::string getBLD() const { return m_BLD; }
  void setBLD(std::string const &value) { m_BLD = value; }

  std::string getUNIT() const { return m_UNIT; }
  void setUNIT(std::string const &value) { m_UNIT = value; }

  std::string getFLR() const { return m_FLR; }
  void setFLR(std::string const &value) { m_FLR = value; }

  std::string getROOM() const { return m_ROOM; }
  void setROOM(std::string const &value) { m_ROOM = value; }

  std::string getPLC() const { return m_PLC; }
  void setPLC(std::string const &value) { m_PLC = value; }

  std::string getPCN() const { return m_PCN; }
  void setPCN(std::string const &value) { m_PCN = value; }

  std::string getPOBOX() const { return m_POBOX; }
  void setPOBOX(std::string const &value) { m_POBOX = value; }

  std::string getADDCODE() const { return m_ADDCODE; }
  void setADDCODE(std::string const &value) { m_ADDCODE = value; }

  std::string getSEAT() const { return m_SEAT; }
  void setSEAT(std::string const &value) { m_SEAT = value; }

  std::string getRD() const { return m_RD; }
  void setRD(std::string const &value) { m_RD = value; }

  std::string getRDSEC() const { return m_RDSEC; }
  void setRDSEC(std::string const &value) { m_RDSEC = value; }

  std::string getRDBR() const { return m_RDBR; }
  void setRDBR(std::string const &value) { m_RDBR = value; }

  std::string getRDSUBBR() const { return m_RDSUBBR; }
  void setRDSUBBR(std::string const &value) { m_RDSUBBR = value; }

  std::string getPRM() const { return m_PRM; }
  void setPRM(std::string const &value) { m_PRM = value; }

  std::string getPOM() const { return m_POM; }
  void setPOM(std::string const &value) { m_POM = value; }

public:
  std::string m_Country;

  unsigned m_CountryFlag;
  shared_ptr<unsigned> m_CountryOutFlag;
  std::string m_A1;

  unsigned m_A1Flag;
  shared_ptr<unsigned> m_A1OutFlag;
  std::string m_A2;

  unsigned m_A2Flag;
  shared_ptr<unsigned> m_A2OutFlag;
  std::string m_A3;

  unsigned m_A3Flag;
  shared_ptr<unsigned> m_A3OutFlag;
  std::string m_A4;

  unsigned m_A4Flag;
  shared_ptr<unsigned> m_A4OutFlag;
  std::string m_A5;

  unsigned m_A5Flag;
  shared_ptr<unsigned> m_A5OutFlag;
  std::string m_A6;

  unsigned m_A6Flag;
  shared_ptr<unsigned> m_A6OutFlag;
  std::string m_PRD;

  unsigned m_PRDFlag;
  shared_ptr<unsigned> m_PRDOutFlag;
  std::string m_POD;

  unsigned m_PODFlag;
  shared_ptr<unsigned> m_PODOutFlag;
  std::string m_STS;

  unsigned m_STSFlag;
  shared_ptr<unsigned> m_STSOutFlag;
  std::string m_HNO;

  unsigned m_HNOFlag;
  shared_ptr<unsigned> m_HNOOutFlag;
  std::string m_HNS;

  unsigned m_HNSFlag;
  shared_ptr<unsigned> m_HNSOutFlag;
  std::string m_LMK;

  unsigned m_LMKFlag;
  shared_ptr<unsigned> m_LMKOutFlag;
  std::string m_LOC;

  unsigned m_LOCFlag;
  shared_ptr<unsigned> m_LOCOutFlag;
  std::string m_NAM;

  unsigned m_NAMFlag;
  shared_ptr<unsigned> m_NAMOutFlag;
  std::string m_PC;

  unsigned m_PCFlag;
  shared_ptr<unsigned> m_PCOutFlag;
  std::string m_BLD;

  unsigned m_BLDFlag;
  shared_ptr<unsigned> m_BLDOutFlag;
  std::string m_UNIT;

  unsigned m_UNITFlag;
  shared_ptr<unsigned> m_UNITOutFlag;
  std::string m_FLR;

  unsigned m_FLRFlag;
  shared_ptr<unsigned> m_FLROutFlag;
  std::string m_ROOM;

  unsigned m_ROOMFlag;
  shared_ptr<unsigned> m_ROOMOutFlag;
  std::string m_PLC;

  unsigned m_PLCFlag;
  shared_ptr<unsigned> m_PLCOutFlag;
  std::string m_PCN;

  unsigned m_PCNFlag;
  shared_ptr<unsigned> m_PCNOutFlag;
  std::string m_POBOX;

  unsigned m_POBOXFlag;
  shared_ptr<unsigned> m_POBOXOutFlag;
  std::string m_ADDCODE;

  unsigned m_ADDCODEFlag;
  shared_ptr<unsigned> m_ADDCODEOutFlag;
  std::string m_SEAT;

  unsigned m_SEATFlag;
  shared_ptr<unsigned> m_SEATOutFlag;
  std::string m_RD;

  unsigned m_RDFlag;
  shared_ptr<unsigned> m_RDOutFlag;
  std::string m_RDSEC;

  unsigned m_RDSECFlag;
  shared_ptr<unsigned> m_RDSECOutFlag;
  std::string m_RDBR;

  unsigned m_RDBRFlag;
  shared_ptr<unsigned> m_RDBROutFlag;
  std::string m_RDSUBBR;

  unsigned m_RDSUBBRFlag;
  shared_ptr<unsigned> m_RDSUBBROutFlag;
  std::string m_PRM;

  unsigned m_PRMFlag;
  shared_ptr<unsigned> m_PRMOutFlag;
  std::string m_POM;

  unsigned m_POMFlag;
  shared_ptr<unsigned> m_POMOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CivicAddress_H_ */
