/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessTokenReq.h
 *
 * Contains information related to the access token request
 */

#ifndef AccessTokenReq_H_
#define AccessTokenReq_H_

#include "NFType.h"
#include "PlmnId.h"
#include "PlmnIdNid.h"
#include "Snssai.h"
#include "jsonParser.hpp"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains information related to the access token request
/// </summary>
class AccessTokenReq : public jsonParser::jsonParser<AccessTokenReq> {
public:
  explicit AccessTokenReq() {
    // constructor
    m_Grant_type = "";

    m_Grant_typeFlag = staticjson::Flags::Default;
    m_NfInstanceId = "";

    m_NfInstanceIdFlag = staticjson::Flags::Default;

    m_NfTypeFlag = (staticjson::Flags::Optional);

    m_TargetNfTypeFlag = (staticjson::Flags::Optional);
    m_Scope = "";

    m_ScopeFlag = staticjson::Flags::Default;
    m_TargetNfInstanceId = "";

    m_TargetNfInstanceIdFlag = (staticjson::Flags::Optional);

    m_RequesterPlmnFlag = (staticjson::Flags::Optional);

    m_RequesterPlmnListFlag = (staticjson::Flags::Optional);

    m_RequesterSnssaiListFlag = (staticjson::Flags::Optional);
    m_RequesterFqdn = "";

    m_RequesterFqdnFlag = (staticjson::Flags::Optional);

    m_RequesterSnpnListFlag = (staticjson::Flags::Optional);

    m_TargetPlmnFlag = (staticjson::Flags::Optional);

    m_TargetSnssaiListFlag = (staticjson::Flags::Optional);

    m_TargetNsiListFlag = (staticjson::Flags::Optional);
    m_TargetNfSetId = "";

    m_TargetNfSetIdFlag = (staticjson::Flags::Optional);
    m_TargetNfServiceSetId = "";

    m_TargetNfServiceSetIdFlag = (staticjson::Flags::Optional);
  };
  virtual ~AccessTokenReq(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Grant_type NfInstanceId NfType
    // TargetNfType Scope TargetNfInstanceId RequesterPlmn RequesterPlmnList
    // RequesterSnssaiList RequesterFqdn RequesterSnpnList TargetPlmn
    // TargetSnssaiList TargetNsiList TargetNfSetId TargetNfServiceSetId
    h->add_property("grantType", &this->m_Grant_type, m_Grant_typeFlag);
    h->add_property("nfInstanceId", &this->m_NfInstanceId, m_NfInstanceIdFlag);
    h->add_property("nfType", &this->m_NfType, m_NfTypeFlag);
    h->add_property("targetNfType", &this->m_TargetNfType, m_TargetNfTypeFlag);
    h->add_property("scope", &this->m_Scope, m_ScopeFlag);
    h->add_property("targetNfInstanceId", &this->m_TargetNfInstanceId,
                    m_TargetNfInstanceIdFlag);
    h->add_property("requesterPlmn", &this->m_RequesterPlmn,
                    m_RequesterPlmnFlag);
    h->add_property("requesterPlmnList", &this->m_RequesterPlmnList,
                    m_RequesterPlmnListFlag);
    h->add_property("requesterSnssaiList", &this->m_RequesterSnssaiList,
                    m_RequesterSnssaiListFlag);
    h->add_property("requesterFqdn", &this->m_RequesterFqdn,
                    m_RequesterFqdnFlag);
    h->add_property("requesterSnpnList", &this->m_RequesterSnpnList,
                    m_RequesterSnpnListFlag);
    h->add_property("targetPlmn", &this->m_TargetPlmn, m_TargetPlmnFlag);
    h->add_property("targetSnssaiList", &this->m_TargetSnssaiList,
                    m_TargetSnssaiListFlag);
    h->add_property("targetNsiList", &this->m_TargetNsiList,
                    m_TargetNsiListFlag);
    h->add_property("targetNfSetId", &this->m_TargetNfSetId,
                    m_TargetNfSetIdFlag);
    h->add_property("targetNfServiceSetId", &this->m_TargetNfServiceSetId,
                    m_TargetNfServiceSetIdFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const AccessTokenReq &obj) {

    o << "Grant_type : " << obj.m_Grant_type << std::endl;

    o << "NfInstanceId : " << obj.m_NfInstanceId << std::endl;

    o << "NfType : " << obj.m_NfType << std::endl;

    o << "TargetNfType : " << obj.m_TargetNfType << std::endl;

    o << "Scope : " << obj.m_Scope << std::endl;

    o << "TargetNfInstanceId : " << obj.m_TargetNfInstanceId << std::endl;

    o << "RequesterPlmn : " << obj.m_RequesterPlmn << std::endl;
    o << convert2string(std::string("RequesterPlmnList"),
                        obj.m_RequesterPlmnList)
      << std::endl;
    o << convert2string(std::string("RequesterSnssaiList"),
                        obj.m_RequesterSnssaiList)
      << std::endl;

    o << "RequesterFqdn : " << obj.m_RequesterFqdn << std::endl;
    o << convert2string(std::string("RequesterSnpnList"),
                        obj.m_RequesterSnpnList)
      << std::endl;

    o << "TargetPlmn : " << obj.m_TargetPlmn << std::endl;
    o << convert2string(std::string("TargetSnssaiList"), obj.m_TargetSnssaiList)
      << std::endl;
    o << convert2string(std::string("TargetNsiList"), obj.m_TargetNsiList)
      << std::endl;

    o << "TargetNfSetId : " << obj.m_TargetNfSetId << std::endl;

    o << "TargetNfServiceSetId : " << obj.m_TargetNfServiceSetId << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// AccessTokenReq members vars : Grant_type NfInstanceId NfType TargetNfType
  /// Scope TargetNfInstanceId RequesterPlmn RequesterPlmnList
  /// RequesterSnssaiList RequesterFqdn RequesterSnpnList TargetPlmn
  /// TargetSnssaiList TargetNsiList TargetNfSetId TargetNfServiceSetId

  std::string getGrantType() const { return m_Grant_type; }
  void setGrantType(std::string const &value) { m_Grant_type = value; }

  std::string getNfInstanceId() const { return m_NfInstanceId; }
  void setNfInstanceId(std::string const &value) { m_NfInstanceId = value; }

  NFType getNfType() const { return m_NfType; }
  void setNfType(NFType const &value) { m_NfType = value; }

  NFType getTargetNfType() const { return m_TargetNfType; }
  void setTargetNfType(NFType const &value) { m_TargetNfType = value; }

  std::string getScope() const { return m_Scope; }
  void setScope(std::string const &value) { m_Scope = value; }

  std::string getTargetNfInstanceId() const { return m_TargetNfInstanceId; }
  void setTargetNfInstanceId(std::string const &value) {
    m_TargetNfInstanceId = value;
  }

  PlmnId getRequesterPlmn() const { return m_RequesterPlmn; }
  void setRequesterPlmn(PlmnId const &value) { m_RequesterPlmn = value; }

  std::vector<PlmnId> &getRequesterPlmnList() { return m_RequesterPlmnList; }
  void setRequesterPlmnList(std::vector<PlmnId> const &value) {
    m_RequesterPlmnList = value;
  }

  std::vector<Snssai> &getRequesterSnssaiList() {
    return m_RequesterSnssaiList;
  }
  void setRequesterSnssaiList(std::vector<Snssai> const &value) {
    m_RequesterSnssaiList = value;
  }

  std::string getRequesterFqdn() const { return m_RequesterFqdn; }
  void setRequesterFqdn(std::string const &value) { m_RequesterFqdn = value; }

  std::vector<PlmnIdNid> &getRequesterSnpnList() { return m_RequesterSnpnList; }
  void setRequesterSnpnList(std::vector<PlmnIdNid> const &value) {
    m_RequesterSnpnList = value;
  }

  PlmnId getTargetPlmn() const { return m_TargetPlmn; }
  void setTargetPlmn(PlmnId const &value) { m_TargetPlmn = value; }

  std::vector<Snssai> &getTargetSnssaiList() { return m_TargetSnssaiList; }
  void setTargetSnssaiList(std::vector<Snssai> const &value) {
    m_TargetSnssaiList = value;
  }

  std::vector<std::string> &getTargetNsiList() { return m_TargetNsiList; }
  void setTargetNsiList(std::vector<std::string> const &value) {
    m_TargetNsiList = value;
  }

  std::string getTargetNfSetId() const { return m_TargetNfSetId; }
  void setTargetNfSetId(std::string const &value) { m_TargetNfSetId = value; }

  std::string getTargetNfServiceSetId() const { return m_TargetNfServiceSetId; }
  void setTargetNfServiceSetId(std::string const &value) {
    m_TargetNfServiceSetId = value;
  }

public:
  std::string m_Grant_type;

  unsigned m_Grant_typeFlag;
  std::string m_NfInstanceId;

  unsigned m_NfInstanceIdFlag;
  NFType m_NfType;

  unsigned m_NfTypeFlag;
  NFType m_TargetNfType;

  unsigned m_TargetNfTypeFlag;
  std::string m_Scope;

  unsigned m_ScopeFlag;
  std::string m_TargetNfInstanceId;

  unsigned m_TargetNfInstanceIdFlag;
  PlmnId m_RequesterPlmn;

  unsigned m_RequesterPlmnFlag;
  std::vector<PlmnId> m_RequesterPlmnList;

  unsigned m_RequesterPlmnListFlag;
  std::vector<Snssai> m_RequesterSnssaiList;

  unsigned m_RequesterSnssaiListFlag;
  std::string m_RequesterFqdn;

  unsigned m_RequesterFqdnFlag;
  std::vector<PlmnIdNid> m_RequesterSnpnList;

  unsigned m_RequesterSnpnListFlag;
  PlmnId m_TargetPlmn;

  unsigned m_TargetPlmnFlag;
  std::vector<Snssai> m_TargetSnssaiList;

  unsigned m_TargetSnssaiListFlag;
  std::vector<std::string> m_TargetNsiList;

  unsigned m_TargetNsiListFlag;
  std::string m_TargetNfSetId;

  unsigned m_TargetNfSetIdFlag;
  std::string m_TargetNfServiceSetId;

  unsigned m_TargetNfServiceSetIdFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccessTokenReq_H_ */
