/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IpAddress.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef IpAddress_H_
#define IpAddress_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class IpAddress : public jsonParser::jsonParser<IpAddress> {
public:
  explicit IpAddress() {
    // constructor
    m_Ipv4Addr = "";

    m_Ipv4AddrFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_Ipv4AddrOutFlag.reset(new unsigned);
    *m_Ipv4AddrOutFlag.get() = 0;
    m_Ipv6Addr = "";

    m_Ipv6AddrFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_Ipv6AddrOutFlag.reset(new unsigned);
    *m_Ipv6AddrOutFlag.get() = 0;
    m_Ipv6Prefix = "";

    m_Ipv6PrefixFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_Ipv6PrefixOutFlag.reset(new unsigned);
    *m_Ipv6PrefixOutFlag.get() = 0;
  };
  virtual ~IpAddress(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Ipv4Addr Ipv6Addr Ipv6Prefix
    h->add_optional_property("ipv4Addr", &this->m_Ipv4Addr, m_Ipv4AddrFlag,
                             m_Ipv4AddrOutFlag);
    h->add_optional_property("ipv6Addr", &this->m_Ipv6Addr, m_Ipv6AddrFlag,
                             m_Ipv6AddrOutFlag);
    h->add_optional_property("ipv6Prefix", &this->m_Ipv6Prefix,
                             m_Ipv6PrefixFlag, m_Ipv6PrefixOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const IpAddress &obj) {

    o << "Ipv4Addr, optional flag is : " << *m_Ipv4AddrOutFlag
      << ", content is : " << obj.m_Ipv4Addr << std::endl;

    o << "Ipv6Addr, optional flag is : " << *m_Ipv6AddrOutFlag
      << ", content is : " << obj.m_Ipv6Addr << std::endl;

    o << "Ipv6Prefix, optional flag is : " << *m_Ipv6PrefixOutFlag
      << ", content is : " << obj.m_Ipv6Prefix << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// IpAddress members vars : Ipv4Addr Ipv6Addr Ipv6Prefix

  std::string getIpv4Addr() const { return m_Ipv4Addr; }
  void setIpv4Addr(std::string const &value) { m_Ipv4Addr = value; }

  std::string getIpv6Addr() const { return m_Ipv6Addr; }
  void setIpv6Addr(std::string const &value) { m_Ipv6Addr = value; }

  std::string getIpv6Prefix() const { return m_Ipv6Prefix; }
  void setIpv6Prefix(std::string const &value) { m_Ipv6Prefix = value; }

public:
  std::string m_Ipv4Addr;

  unsigned m_Ipv4AddrFlag;
  shared_ptr<unsigned> m_Ipv4AddrOutFlag;
  std::string m_Ipv6Addr;

  unsigned m_Ipv6AddrFlag;
  shared_ptr<unsigned> m_Ipv6AddrOutFlag;
  std::string m_Ipv6Prefix;

  unsigned m_Ipv6PrefixFlag;
  shared_ptr<unsigned> m_Ipv6PrefixOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IpAddress_H_ */
