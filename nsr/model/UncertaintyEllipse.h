/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UncertaintyEllipse.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef UncertaintyEllipse_H_
#define UncertaintyEllipse_H_

#include "CSB_JsonParser.h"
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UncertaintyEllipse : public jsonParser::jsonParser<UncertaintyEllipse> {
public:
  explicit UncertaintyEllipse() {
    // constructor
    m_SemiMajor = 0.0f;

    m_SemiMajorFlag = staticjson::Flags::Default;
    m_SemiMajorOutFlag.reset(new unsigned);
    *m_SemiMajorOutFlag.get() = 0;
    m_SemiMinor = 0.0f;

    m_SemiMinorFlag = staticjson::Flags::Default;
    m_SemiMinorOutFlag.reset(new unsigned);
    *m_SemiMinorOutFlag.get() = 0;
    m_OrientationMajor = 0;

    m_OrientationMajorFlag = staticjson::Flags::Default;
    m_OrientationMajorOutFlag.reset(new unsigned);
    *m_OrientationMajorOutFlag.get() = 0;
  };
  virtual ~UncertaintyEllipse(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SemiMajor SemiMinor OrientationMajor
    h->add_property("semiMajor", &this->m_SemiMajor, m_SemiMajorFlag);
    h->add_property("semiMinor", &this->m_SemiMinor, m_SemiMinorFlag);
    h->add_property("orientationMajor", &this->m_OrientationMajor,
                    m_OrientationMajorFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const UncertaintyEllipse &obj) {

    o << "SemiMajor : " << obj.m_SemiMajor << std::endl;

    o << "SemiMinor : " << obj.m_SemiMinor << std::endl;

    o << "OrientationMajor : " << obj.m_OrientationMajor << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UncertaintyEllipse members vars : SemiMajor SemiMinor OrientationMajor

  float getSemiMajor() const { return m_SemiMajor; }
  void setSemiMajor(float const value) { m_SemiMajor = value; }

  float getSemiMinor() const { return m_SemiMinor; }
  void setSemiMinor(float const value) { m_SemiMinor = value; }

  int32_t getOrientationMajor() const { return m_OrientationMajor; }
  void setOrientationMajor(int32_t const value) { m_OrientationMajor = value; }

public:
  float m_SemiMajor;

  unsigned m_SemiMajorFlag;
  shared_ptr<unsigned> m_SemiMajorOutFlag;
  float m_SemiMinor;

  unsigned m_SemiMinorFlag;
  shared_ptr<unsigned> m_SemiMinorOutFlag;
  int32_t m_OrientationMajor;

  unsigned m_OrientationMajorFlag;
  shared_ptr<unsigned> m_OrientationMajorOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UncertaintyEllipse_H_ */
