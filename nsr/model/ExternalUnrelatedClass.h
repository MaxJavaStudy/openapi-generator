/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExternalUnrelatedClass.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef ExternalUnrelatedClass_H_
#define ExternalUnrelatedClass_H_

#include "AfExternal.h"
#include "CSB_JsonParser.h"
#include "LcsClientExternal.h"
#include "LcsClientGroupExternal.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ExternalUnrelatedClass
    : public jsonParser::jsonParser<ExternalUnrelatedClass> {
public:
  explicit ExternalUnrelatedClass() {
    // constructor

    m_LcsClientExternalsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LcsClientExternalsOutFlag.reset(new unsigned);
    *m_LcsClientExternalsOutFlag.get() = 0;

    m_AfExternalsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AfExternalsOutFlag.reset(new unsigned);
    *m_AfExternalsOutFlag.get() = 0;

    m_LcsClientGroupExternalsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LcsClientGroupExternalsOutFlag.reset(new unsigned);
    *m_LcsClientGroupExternalsOutFlag.get() = 0;
  };
  virtual ~ExternalUnrelatedClass(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : LcsClientExternals AfExternals
    // LcsClientGroupExternals
    h->add_optional_property("lcsClientExternals", &this->m_LcsClientExternals,
                             m_LcsClientExternalsFlag,
                             m_LcsClientExternalsOutFlag);
    h->add_optional_property("afExternals", &this->m_AfExternals,
                             m_AfExternalsFlag, m_AfExternalsOutFlag);
    h->add_optional_property(
        "lcsClientGroupExternals", &this->m_LcsClientGroupExternals,
        m_LcsClientGroupExternalsFlag, m_LcsClientGroupExternalsOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const ExternalUnrelatedClass &obj) {
    o << "LcsClientExternals, optional flag is : "
      << *m_LcsClientExternalsOutFlag << std::endl;
    o << convert2string(std::string("LcsClientExternals"),
                        obj.m_LcsClientExternals)
      << std::endl;
    o << "AfExternals, optional flag is : " << *m_AfExternalsOutFlag
      << std::endl;
    o << convert2string(std::string("AfExternals"), obj.m_AfExternals)
      << std::endl;
    o << "LcsClientGroupExternals, optional flag is : "
      << *m_LcsClientGroupExternalsOutFlag << std::endl;
    o << convert2string(std::string("LcsClientGroupExternals"),
                        obj.m_LcsClientGroupExternals)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// ExternalUnrelatedClass members vars : LcsClientExternals AfExternals
  /// LcsClientGroupExternals

  std::vector<LcsClientExternal> &getLcsClientExternals() {
    return m_LcsClientExternals;
  }
  void setLcsClientExternals(std::vector<LcsClientExternal> const &value) {
    m_LcsClientExternals = value;
  }

  std::vector<AfExternal> &getAfExternals() { return m_AfExternals; }
  void setAfExternals(std::vector<AfExternal> const &value) {
    m_AfExternals = value;
  }

  std::vector<LcsClientGroupExternal> &getLcsClientGroupExternals() {
    return m_LcsClientGroupExternals;
  }
  void
  setLcsClientGroupExternals(std::vector<LcsClientGroupExternal> const &value) {
    m_LcsClientGroupExternals = value;
  }

public:
  std::vector<LcsClientExternal> m_LcsClientExternals;

  unsigned m_LcsClientExternalsFlag;
  shared_ptr<unsigned> m_LcsClientExternalsOutFlag;
  std::vector<AfExternal> m_AfExternals;

  unsigned m_AfExternalsFlag;
  shared_ptr<unsigned> m_AfExternalsOutFlag;
  std::vector<LcsClientGroupExternal> m_LcsClientGroupExternals;

  unsigned m_LcsClientGroupExternalsFlag;
  shared_ptr<unsigned> m_LcsClientGroupExternalsOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ExternalUnrelatedClass_H_ */
