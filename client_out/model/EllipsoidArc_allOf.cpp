/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EllipsoidArc_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EllipsoidArc_allOf::EllipsoidArc_allOf()
{
    m_PointIsSet = false;
    m_InnerRadius = 0;
    m_InnerRadiusIsSet = false;
    m_UncertaintyRadius = 0.0f;
    m_UncertaintyRadiusIsSet = false;
    m_OffsetAngle = 0;
    m_OffsetAngleIsSet = false;
    m_IncludedAngle = 0;
    m_IncludedAngleIsSet = false;
    m_Confidence = 0;
    m_ConfidenceIsSet = false;
}

EllipsoidArc_allOf::~EllipsoidArc_allOf()
{
}

void EllipsoidArc_allOf::validate()
{
    // TODO: implement validation
}

web::json::value EllipsoidArc_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PointIsSet)
    {
        val[utility::conversions::to_string_t("point")] = ModelBase::toJson(m_Point);
    }
    if(m_InnerRadiusIsSet)
    {
        val[utility::conversions::to_string_t("innerRadius")] = ModelBase::toJson(m_InnerRadius);
    }
    if(m_UncertaintyRadiusIsSet)
    {
        val[utility::conversions::to_string_t("uncertaintyRadius")] = ModelBase::toJson(m_UncertaintyRadius);
    }
    if(m_OffsetAngleIsSet)
    {
        val[utility::conversions::to_string_t("offsetAngle")] = ModelBase::toJson(m_OffsetAngle);
    }
    if(m_IncludedAngleIsSet)
    {
        val[utility::conversions::to_string_t("includedAngle")] = ModelBase::toJson(m_IncludedAngle);
    }
    if(m_ConfidenceIsSet)
    {
        val[utility::conversions::to_string_t("confidence")] = ModelBase::toJson(m_Confidence);
    }

    return val;
}

bool EllipsoidArc_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("point")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("point"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GeographicalCoordinates> refVal_point;
            ok &= ModelBase::fromJson(fieldValue, refVal_point);
            setPoint(refVal_point);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("innerRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("innerRadius"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_innerRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_innerRadius);
            setInnerRadius(refVal_innerRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uncertaintyRadius")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uncertaintyRadius"));
        if(!fieldValue.is_null())
        {
            float refVal_uncertaintyRadius;
            ok &= ModelBase::fromJson(fieldValue, refVal_uncertaintyRadius);
            setUncertaintyRadius(refVal_uncertaintyRadius);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offsetAngle")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("offsetAngle"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_offsetAngle;
            ok &= ModelBase::fromJson(fieldValue, refVal_offsetAngle);
            setOffsetAngle(refVal_offsetAngle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("includedAngle")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("includedAngle"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_includedAngle;
            ok &= ModelBase::fromJson(fieldValue, refVal_includedAngle);
            setIncludedAngle(refVal_includedAngle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confidence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("confidence"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_confidence;
            ok &= ModelBase::fromJson(fieldValue, refVal_confidence);
            setConfidence(refVal_confidence);
        }
    }
    return ok;
}

void EllipsoidArc_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("point"), m_Point));
    }
    if(m_InnerRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("innerRadius"), m_InnerRadius));
    }
    if(m_UncertaintyRadiusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uncertaintyRadius"), m_UncertaintyRadius));
    }
    if(m_OffsetAngleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offsetAngle"), m_OffsetAngle));
    }
    if(m_IncludedAngleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("includedAngle"), m_IncludedAngle));
    }
    if(m_ConfidenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confidence"), m_Confidence));
    }
}

bool EllipsoidArc_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("point")))
    {
        std::shared_ptr<GeographicalCoordinates> refVal_point;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("point")), refVal_point );
        setPoint(refVal_point);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("innerRadius")))
    {
        int32_t refVal_innerRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("innerRadius")), refVal_innerRadius );
        setInnerRadius(refVal_innerRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uncertaintyRadius")))
    {
        float refVal_uncertaintyRadius;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uncertaintyRadius")), refVal_uncertaintyRadius );
        setUncertaintyRadius(refVal_uncertaintyRadius);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offsetAngle")))
    {
        int32_t refVal_offsetAngle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("offsetAngle")), refVal_offsetAngle );
        setOffsetAngle(refVal_offsetAngle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("includedAngle")))
    {
        int32_t refVal_includedAngle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("includedAngle")), refVal_includedAngle );
        setIncludedAngle(refVal_includedAngle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confidence")))
    {
        int32_t refVal_confidence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("confidence")), refVal_confidence );
        setConfidence(refVal_confidence);
    }
    return ok;
}

std::shared_ptr<GeographicalCoordinates> EllipsoidArc_allOf::getPoint() const
{
    return m_Point;
}

void EllipsoidArc_allOf::setPoint(const std::shared_ptr<GeographicalCoordinates>& value)
{
    m_Point = value;
    m_PointIsSet = true;
}

bool EllipsoidArc_allOf::pointIsSet() const
{
    return m_PointIsSet;
}

void EllipsoidArc_allOf::unsetPoint()
{
    m_PointIsSet = false;
}
int32_t EllipsoidArc_allOf::getInnerRadius() const
{
    return m_InnerRadius;
}

void EllipsoidArc_allOf::setInnerRadius(int32_t value)
{
    m_InnerRadius = value;
    m_InnerRadiusIsSet = true;
}

bool EllipsoidArc_allOf::innerRadiusIsSet() const
{
    return m_InnerRadiusIsSet;
}

void EllipsoidArc_allOf::unsetInnerRadius()
{
    m_InnerRadiusIsSet = false;
}
float EllipsoidArc_allOf::getUncertaintyRadius() const
{
    return m_UncertaintyRadius;
}

void EllipsoidArc_allOf::setUncertaintyRadius(float value)
{
    m_UncertaintyRadius = value;
    m_UncertaintyRadiusIsSet = true;
}

bool EllipsoidArc_allOf::uncertaintyRadiusIsSet() const
{
    return m_UncertaintyRadiusIsSet;
}

void EllipsoidArc_allOf::unsetUncertaintyRadius()
{
    m_UncertaintyRadiusIsSet = false;
}
int32_t EllipsoidArc_allOf::getOffsetAngle() const
{
    return m_OffsetAngle;
}

void EllipsoidArc_allOf::setOffsetAngle(int32_t value)
{
    m_OffsetAngle = value;
    m_OffsetAngleIsSet = true;
}

bool EllipsoidArc_allOf::offsetAngleIsSet() const
{
    return m_OffsetAngleIsSet;
}

void EllipsoidArc_allOf::unsetOffsetAngle()
{
    m_OffsetAngleIsSet = false;
}
int32_t EllipsoidArc_allOf::getIncludedAngle() const
{
    return m_IncludedAngle;
}

void EllipsoidArc_allOf::setIncludedAngle(int32_t value)
{
    m_IncludedAngle = value;
    m_IncludedAngleIsSet = true;
}

bool EllipsoidArc_allOf::includedAngleIsSet() const
{
    return m_IncludedAngleIsSet;
}

void EllipsoidArc_allOf::unsetIncludedAngle()
{
    m_IncludedAngleIsSet = false;
}
int32_t EllipsoidArc_allOf::getConfidence() const
{
    return m_Confidence;
}

void EllipsoidArc_allOf::setConfidence(int32_t value)
{
    m_Confidence = value;
    m_ConfidenceIsSet = true;
}

bool EllipsoidArc_allOf::confidenceIsSet() const
{
    return m_ConfidenceIsSet;
}

void EllipsoidArc_allOf::unsetConfidence()
{
    m_ConfidenceIsSet = false;
}
}
}
}
}


