/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AcknowledgeInfo.h
 *
 * 
 */

#ifndef AcknowledgeInfo_H_
#define AcknowledgeInfo_H_


#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  AcknowledgeInfo: public jsonParser::jsonParser<AcknowledgeInfo>
{
public:
    explicit AcknowledgeInfo(){
        // constructor
        m_SorMacIue = "";
        
            m_SorMacIueFlag = (staticjson::Flags::Optional);
m_UpuMacIue = "";
        
            m_UpuMacIueFlag = (staticjson::Flags::Optional);
m_SecuredPacket = "";
        
            m_SecuredPacketFlag = (staticjson::Flags::Optional);
m_ProvisioningTime = "";
        
            m_ProvisioningTimeFlag = staticjson::Flags::Default;
    };
    virtual ~AcknowledgeInfo(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : SorMacIue UpuMacIue SecuredPacket ProvisioningTime 
        h->add_property("sorMacIue", &this->m_SorMacIue, m_SorMacIueFlag);
        h->add_property("upuMacIue", &this->m_UpuMacIue, m_UpuMacIueFlag);
        h->add_property("securedPacket", &this->m_SecuredPacket, m_SecuredPacketFlag);
        h->add_property("provisioningTime", &this->m_ProvisioningTime, m_ProvisioningTimeFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const AcknowledgeInfo& obj)
    {
        
        o << "SorMacIue : " << obj.m_SorMacIue << std::endl;

        o << "UpuMacIue : " << obj.m_UpuMacIue << std::endl;

        o << "SecuredPacket : " << obj.m_SecuredPacket << std::endl;

        o << "ProvisioningTime : " << obj.m_ProvisioningTime << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// AcknowledgeInfo members vars : SorMacIue UpuMacIue SecuredPacket ProvisioningTime 

    std::string  getSorMacIue() const
    {
        return m_SorMacIue;
    }
    void  setSorMacIue(std::string const& value)
    {
        m_SorMacIue = value;
    }

std::string  getUpuMacIue() const
    {
        return m_UpuMacIue;
    }
    void  setUpuMacIue(std::string const& value)
    {
        m_UpuMacIue = value;
    }

std::string  getSecuredPacket() const
    {
        return m_SecuredPacket;
    }
    void  setSecuredPacket(std::string const& value)
    {
        m_SecuredPacket = value;
    }

std::string  getProvisioningTime() const
    {
        return m_ProvisioningTime;
    }
    void  setProvisioningTime(std::string const& value)
    {
        m_ProvisioningTime = value;
    }



    
public:
    std::string m_SorMacIue;
    
    unsigned m_SorMacIueFlag;
    std::string m_UpuMacIue;
    
    unsigned m_UpuMacIueFlag;
    std::string m_SecuredPacket;
    
    unsigned m_SecuredPacketFlag;
    std::string m_ProvisioningTime;
    
    unsigned m_ProvisioningTimeFlag;
  
};
}
}
}
}

#endif /* AcknowledgeInfo_H_ */
