/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SmsManagementSubscriptionData.h
 *
 * 
 */

#ifndef SmsManagementSubscriptionData_H_
#define SmsManagementSubscriptionData_H_


#include <string>
#include "TraceData.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SmsManagementSubscriptionData: public jsonParser::jsonParser<SmsManagementSubscriptionData>
{
public:
    explicit SmsManagementSubscriptionData(){
        // constructor
        m_SupportedFeatures = "";
        
            m_SupportedFeaturesFlag = (staticjson::Flags::Optional);
m_MtSmsSubscribed = false;
        
            m_MtSmsSubscribedFlag = (staticjson::Flags::Optional);
m_MtSmsBarringAll = false;
        
            m_MtSmsBarringAllFlag = (staticjson::Flags::Optional);
m_MtSmsBarringRoaming = false;
        
            m_MtSmsBarringRoamingFlag = (staticjson::Flags::Optional);
m_MoSmsSubscribed = false;
        
            m_MoSmsSubscribedFlag = (staticjson::Flags::Optional);
m_MoSmsBarringAll = false;
        
            m_MoSmsBarringAllFlag = (staticjson::Flags::Optional);
m_MoSmsBarringRoaming = false;
        
            m_MoSmsBarringRoamingFlag = (staticjson::Flags::Optional);

            m_SharedSmsMngDataIdsFlag = (staticjson::Flags::Optional);

            m_TraceDataFlag = (staticjson::Flags::Optional);
    };
    virtual ~SmsManagementSubscriptionData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : SupportedFeatures MtSmsSubscribed MtSmsBarringAll MtSmsBarringRoaming MoSmsSubscribed MoSmsBarringAll MoSmsBarringRoaming SharedSmsMngDataIds TraceData 
        h->add_property("supportedFeatures", &this->m_SupportedFeatures, m_SupportedFeaturesFlag);
        h->add_property("mtSmsSubscribed", &this->m_MtSmsSubscribed, m_MtSmsSubscribedFlag);
        h->add_property("mtSmsBarringAll", &this->m_MtSmsBarringAll, m_MtSmsBarringAllFlag);
        h->add_property("mtSmsBarringRoaming", &this->m_MtSmsBarringRoaming, m_MtSmsBarringRoamingFlag);
        h->add_property("moSmsSubscribed", &this->m_MoSmsSubscribed, m_MoSmsSubscribedFlag);
        h->add_property("moSmsBarringAll", &this->m_MoSmsBarringAll, m_MoSmsBarringAllFlag);
        h->add_property("moSmsBarringRoaming", &this->m_MoSmsBarringRoaming, m_MoSmsBarringRoamingFlag);
        h->add_property("sharedSmsMngDataIds", &this->m_SharedSmsMngDataIds, m_SharedSmsMngDataIdsFlag);
        h->add_property("traceData", &this->m_TraceData, m_TraceDataFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SmsManagementSubscriptionData& obj)
    {
        
        o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;

        o << "MtSmsSubscribed : " << obj.m_MtSmsSubscribed << std::endl;

        o << "MtSmsBarringAll : " << obj.m_MtSmsBarringAll << std::endl;

        o << "MtSmsBarringRoaming : " << obj.m_MtSmsBarringRoaming << std::endl;

        o << "MoSmsSubscribed : " << obj.m_MoSmsSubscribed << std::endl;

        o << "MoSmsBarringAll : " << obj.m_MoSmsBarringAll << std::endl;

        o << "MoSmsBarringRoaming : " << obj.m_MoSmsBarringRoaming << std::endl;
        o<< convert2string(std::string("SharedSmsMngDataIds"), obj.m_SharedSmsMngDataIds) <<std::endl;
       
        o << "TraceData : " << obj.m_TraceData << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// SmsManagementSubscriptionData members vars : SupportedFeatures MtSmsSubscribed MtSmsBarringAll MtSmsBarringRoaming MoSmsSubscribed MoSmsBarringAll MoSmsBarringRoaming SharedSmsMngDataIds TraceData 

    std::string  getSupportedFeatures() const
    {
        return m_SupportedFeatures;
    }
    void  setSupportedFeatures(std::string const& value)
    {
        m_SupportedFeatures = value;
    }

bool  isMtSmsSubscribed() const
    {
        return m_MtSmsSubscribed;
    }
    void  setMtSmsSubscribed(bool const value)
    {
        m_MtSmsSubscribed = value;
    }

bool  isMtSmsBarringAll() const
    {
        return m_MtSmsBarringAll;
    }
    void  setMtSmsBarringAll(bool const value)
    {
        m_MtSmsBarringAll = value;
    }

bool  isMtSmsBarringRoaming() const
    {
        return m_MtSmsBarringRoaming;
    }
    void  setMtSmsBarringRoaming(bool const value)
    {
        m_MtSmsBarringRoaming = value;
    }

bool  isMoSmsSubscribed() const
    {
        return m_MoSmsSubscribed;
    }
    void  setMoSmsSubscribed(bool const value)
    {
        m_MoSmsSubscribed = value;
    }

bool  isMoSmsBarringAll() const
    {
        return m_MoSmsBarringAll;
    }
    void  setMoSmsBarringAll(bool const value)
    {
        m_MoSmsBarringAll = value;
    }

bool  isMoSmsBarringRoaming() const
    {
        return m_MoSmsBarringRoaming;
    }
    void  setMoSmsBarringRoaming(bool const value)
    {
        m_MoSmsBarringRoaming = value;
    }

std::vector<std::string>&  getSharedSmsMngDataIds()
    {
        return m_SharedSmsMngDataIds;
    }
    void  setSharedSmsMngDataIds(std::vector<std::string> const& value)
    {
        m_SharedSmsMngDataIds = value;
    }

TraceData  getTraceData() const
    {
        return m_TraceData;
    }
    void  setTraceData(TraceData const& value)
    {
        m_TraceData = value;
    }



    
public:
    std::string m_SupportedFeatures;
    
    unsigned m_SupportedFeaturesFlag;
    bool m_MtSmsSubscribed;
    
    unsigned m_MtSmsSubscribedFlag;
    bool m_MtSmsBarringAll;
    
    unsigned m_MtSmsBarringAllFlag;
    bool m_MtSmsBarringRoaming;
    
    unsigned m_MtSmsBarringRoamingFlag;
    bool m_MoSmsSubscribed;
    
    unsigned m_MoSmsSubscribedFlag;
    bool m_MoSmsBarringAll;
    
    unsigned m_MoSmsBarringAllFlag;
    bool m_MoSmsBarringRoaming;
    
    unsigned m_MoSmsBarringRoamingFlag;
    std::vector<std::string> m_SharedSmsMngDataIds;
    
    unsigned m_SharedSmsMngDataIdsFlag;
    TraceData m_TraceData;
    
    unsigned m_TraceDataFlag;
  
};
}
}
}
}

#endif /* SmsManagementSubscriptionData_H_ */
