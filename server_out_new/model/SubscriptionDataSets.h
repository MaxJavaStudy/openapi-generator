/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SubscriptionDataSets.h
 *
 * 
 */

#ifndef SubscriptionDataSets_H_
#define SubscriptionDataSets_H_


#include "SmsSubscriptionData.h"
#include "LcsMoData.h"
#include "AccessAndMobilitySubscriptionData.h"
#include "UeContextInAmfData.h"
#include "V2xSubscriptionData.h"
#include "TraceData.h"
#include "UeContextInSmsfData.h"
#include <vector>
#include "LcsBroadcastAssistanceTypesData.h"
#include "SessionManagementSubscriptionData.h"
#include "LcsPrivacyData.h"
#include "SmsManagementSubscriptionData.h"
#include "SmfSelectionSubscriptionData.h"
#include "UeContextInSmfData.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SubscriptionDataSets: public jsonParser::jsonParser<SubscriptionDataSets>
{
public:
    explicit SubscriptionDataSets(){
        // constructor
        
            m_AmDataFlag = (staticjson::Flags::Optional);

            m_SmfSelDataFlag = (staticjson::Flags::Optional);

            m_UecAmfDataFlag = (staticjson::Flags::Optional);

            m_UecSmfDataFlag = (staticjson::Flags::Optional);

            m_UecSmsfDataFlag = (staticjson::Flags::Optional);

            m_SmsSubsDataFlag = (staticjson::Flags::Optional);

            m_SmDataFlag = (staticjson::Flags::Optional);

            m_TraceDataFlag = (staticjson::Flags::Optional);

            m_SmsMngDataFlag = (staticjson::Flags::Optional);

            m_LcsPrivacyDataFlag = (staticjson::Flags::Optional);

            m_LcsMoDataFlag = (staticjson::Flags::Optional);

            m_V2xDataFlag = (staticjson::Flags::Optional);

            m_LcsBroadcastAssistanceTypesDataFlag = (staticjson::Flags::Optional);
    };
    virtual ~SubscriptionDataSets(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : AmData SmfSelData UecAmfData UecSmfData UecSmsfData SmsSubsData SmData TraceData SmsMngData LcsPrivacyData LcsMoData V2xData LcsBroadcastAssistanceTypesData 
        h->add_property("amData", &this->m_AmData, m_AmDataFlag);
        h->add_property("smfSelData", &this->m_SmfSelData, m_SmfSelDataFlag);
        h->add_property("uecAmfData", &this->m_UecAmfData, m_UecAmfDataFlag);
        h->add_property("uecSmfData", &this->m_UecSmfData, m_UecSmfDataFlag);
        h->add_property("uecSmsfData", &this->m_UecSmsfData, m_UecSmsfDataFlag);
        h->add_property("smsSubsData", &this->m_SmsSubsData, m_SmsSubsDataFlag);
        h->add_property("smData", &this->m_SmData, m_SmDataFlag);
        h->add_property("traceData", &this->m_TraceData, m_TraceDataFlag);
        h->add_property("smsMngData", &this->m_SmsMngData, m_SmsMngDataFlag);
        h->add_property("lcsPrivacyData", &this->m_LcsPrivacyData, m_LcsPrivacyDataFlag);
        h->add_property("lcsMoData", &this->m_LcsMoData, m_LcsMoDataFlag);
        h->add_property("v2xData", &this->m_V2xData, m_V2xDataFlag);
        h->add_property("lcsBroadcastAssistanceTypesData", &this->m_LcsBroadcastAssistanceTypesData, m_LcsBroadcastAssistanceTypesDataFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SubscriptionDataSets& obj)
    {
        
        o << "AmData : " << obj.m_AmData << std::endl;

        o << "SmfSelData : " << obj.m_SmfSelData << std::endl;

        o << "UecAmfData : " << obj.m_UecAmfData << std::endl;

        o << "UecSmfData : " << obj.m_UecSmfData << std::endl;

        o << "UecSmsfData : " << obj.m_UecSmsfData << std::endl;

        o << "SmsSubsData : " << obj.m_SmsSubsData << std::endl;
        o<< convert2string(std::string("SmData"), obj.m_SmData) <<std::endl;
       
        o << "TraceData : " << obj.m_TraceData << std::endl;

        o << "SmsMngData : " << obj.m_SmsMngData << std::endl;

        o << "LcsPrivacyData : " << obj.m_LcsPrivacyData << std::endl;

        o << "LcsMoData : " << obj.m_LcsMoData << std::endl;

        o << "V2xData : " << obj.m_V2xData << std::endl;

        o << "LcsBroadcastAssistanceTypesData : " << obj.m_LcsBroadcastAssistanceTypesData << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// SubscriptionDataSets members vars : AmData SmfSelData UecAmfData UecSmfData UecSmsfData SmsSubsData SmData TraceData SmsMngData LcsPrivacyData LcsMoData V2xData LcsBroadcastAssistanceTypesData 

    AccessAndMobilitySubscriptionData  getAmData() const
    {
        return m_AmData;
    }
    void  setAmData(AccessAndMobilitySubscriptionData const& value)
    {
        m_AmData = value;
    }

SmfSelectionSubscriptionData  getSmfSelData() const
    {
        return m_SmfSelData;
    }
    void  setSmfSelData(SmfSelectionSubscriptionData const& value)
    {
        m_SmfSelData = value;
    }

UeContextInAmfData  getUecAmfData() const
    {
        return m_UecAmfData;
    }
    void  setUecAmfData(UeContextInAmfData const& value)
    {
        m_UecAmfData = value;
    }

UeContextInSmfData  getUecSmfData() const
    {
        return m_UecSmfData;
    }
    void  setUecSmfData(UeContextInSmfData const& value)
    {
        m_UecSmfData = value;
    }

UeContextInSmsfData  getUecSmsfData() const
    {
        return m_UecSmsfData;
    }
    void  setUecSmsfData(UeContextInSmsfData const& value)
    {
        m_UecSmsfData = value;
    }

SmsSubscriptionData  getSmsSubsData() const
    {
        return m_SmsSubsData;
    }
    void  setSmsSubsData(SmsSubscriptionData const& value)
    {
        m_SmsSubsData = value;
    }

std::vector<SessionManagementSubscriptionData>&  getSmData()
    {
        return m_SmData;
    }
    void  setSmData(std::vector<SessionManagementSubscriptionData> const& value)
    {
        m_SmData = value;
    }

TraceData  getTraceData() const
    {
        return m_TraceData;
    }
    void  setTraceData(TraceData const& value)
    {
        m_TraceData = value;
    }

SmsManagementSubscriptionData  getSmsMngData() const
    {
        return m_SmsMngData;
    }
    void  setSmsMngData(SmsManagementSubscriptionData const& value)
    {
        m_SmsMngData = value;
    }

LcsPrivacyData  getLcsPrivacyData() const
    {
        return m_LcsPrivacyData;
    }
    void  setLcsPrivacyData(LcsPrivacyData const& value)
    {
        m_LcsPrivacyData = value;
    }

LcsMoData  getLcsMoData() const
    {
        return m_LcsMoData;
    }
    void  setLcsMoData(LcsMoData const& value)
    {
        m_LcsMoData = value;
    }

V2xSubscriptionData  getV2xData() const
    {
        return m_V2xData;
    }
    void  setV2xData(V2xSubscriptionData const& value)
    {
        m_V2xData = value;
    }

LcsBroadcastAssistanceTypesData  getLcsBroadcastAssistanceTypesData() const
    {
        return m_LcsBroadcastAssistanceTypesData;
    }
    void  setLcsBroadcastAssistanceTypesData(LcsBroadcastAssistanceTypesData const& value)
    {
        m_LcsBroadcastAssistanceTypesData = value;
    }



    
public:
    AccessAndMobilitySubscriptionData m_AmData;
    
    unsigned m_AmDataFlag;
    SmfSelectionSubscriptionData m_SmfSelData;
    
    unsigned m_SmfSelDataFlag;
    UeContextInAmfData m_UecAmfData;
    
    unsigned m_UecAmfDataFlag;
    UeContextInSmfData m_UecSmfData;
    
    unsigned m_UecSmfDataFlag;
    UeContextInSmsfData m_UecSmsfData;
    
    unsigned m_UecSmsfDataFlag;
    SmsSubscriptionData m_SmsSubsData;
    
    unsigned m_SmsSubsDataFlag;
    std::vector<SessionManagementSubscriptionData> m_SmData;
    
    unsigned m_SmDataFlag;
    TraceData m_TraceData;
    
    unsigned m_TraceDataFlag;
    SmsManagementSubscriptionData m_SmsMngData;
    
    unsigned m_SmsMngDataFlag;
    LcsPrivacyData m_LcsPrivacyData;
    
    unsigned m_LcsPrivacyDataFlag;
    LcsMoData m_LcsMoData;
    
    unsigned m_LcsMoDataFlag;
    V2xSubscriptionData m_V2xData;
    
    unsigned m_V2xDataFlag;
    LcsBroadcastAssistanceTypesData m_LcsBroadcastAssistanceTypesData;
    
    unsigned m_LcsBroadcastAssistanceTypesDataFlag;
  
};
}
}
}
}

#endif /* SubscriptionDataSets_H_ */
