/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessAndMobilitySubscriptionData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef AccessAndMobilitySubscriptionData_H_
#define AccessAndMobilitySubscriptionData_H_

#include "AmbrRm.h"
#include "Area.h"
#include "CSB_JsonParser.h"
#include "CoreNetworkType.h"
#include "Nssai.h"
#include "OdbPacketServices.h"
#include "RatType.h"
#include "ServiceAreaRestriction.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AccessAndMobilitySubscriptionData
    : public jsonParser::jsonParser<AccessAndMobilitySubscriptionData> {
public:
  explicit AccessAndMobilitySubscriptionData() {
    // constructor
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SupportedFeaturesOutFlag.reset(new unsigned);
    *m_SupportedFeaturesOutFlag.get() = 0;

    m_GpsisFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_GpsisOutFlag.reset(new unsigned);
    *m_GpsisOutFlag.get() = 0;

    m_InternalGroupIdsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_InternalGroupIdsOutFlag.reset(new unsigned);
    *m_InternalGroupIdsOutFlag.get() = 0;

    m_SubscribedUeAmbrFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SubscribedUeAmbrOutFlag.reset(new unsigned);
    *m_SubscribedUeAmbrOutFlag.get() = 0;

    m_NssaiFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_NssaiOutFlag.reset(new unsigned);
    *m_NssaiOutFlag.get() = 0;

    m_RatRestrictionsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RatRestrictionsOutFlag.reset(new unsigned);
    *m_RatRestrictionsOutFlag.get() = 0;

    m_ForbiddenAreasFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ForbiddenAreasOutFlag.reset(new unsigned);
    *m_ForbiddenAreasOutFlag.get() = 0;

    m_ServiceAreaRestrictionFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ServiceAreaRestrictionOutFlag.reset(new unsigned);
    *m_ServiceAreaRestrictionOutFlag.get() = 0;

    m_CoreNetworkTypeRestrictionsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CoreNetworkTypeRestrictionsOutFlag.reset(new unsigned);
    *m_CoreNetworkTypeRestrictionsOutFlag.get() = 0;
    m_RfspIndex = 0;

    m_RfspIndexFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RfspIndexOutFlag.reset(new unsigned);
    *m_RfspIndexOutFlag.get() = 0;
    m_SubsRegTimer = 0;

    m_SubsRegTimerFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SubsRegTimerOutFlag.reset(new unsigned);
    *m_SubsRegTimerOutFlag.get() = 0;
    m_UeUsageType = 0;

    m_UeUsageTypeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UeUsageTypeOutFlag.reset(new unsigned);
    *m_UeUsageTypeOutFlag.get() = 0;
    m_MpsPriority = false;

    m_MpsPriorityFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MpsPriorityOutFlag.reset(new unsigned);
    *m_MpsPriorityOutFlag.get() = 0;
    m_McsPriority = false;

    m_McsPriorityFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_McsPriorityOutFlag.reset(new unsigned);
    *m_McsPriorityOutFlag.get() = 0;
    m_ActiveTime = 0;

    m_ActiveTimeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ActiveTimeOutFlag.reset(new unsigned);
    *m_ActiveTimeOutFlag.get() = 0;
    m_MicoAllowed = false;

    m_MicoAllowedFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MicoAllowedOutFlag.reset(new unsigned);
    *m_MicoAllowedOutFlag.get() = 0;

    m_SharedAmDataIdsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedAmDataIdsOutFlag.reset(new unsigned);
    *m_SharedAmDataIdsOutFlag.get() = 0;

    m_OdbPacketServicesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_OdbPacketServicesOutFlag.reset(new unsigned);
    *m_OdbPacketServicesOutFlag.get() = 0;

    m_SubscribedDnnListFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SubscribedDnnListOutFlag.reset(new unsigned);
    *m_SubscribedDnnListOutFlag.get() = 0;
    m_NssaiInclusionAllowed = false;

    m_NssaiInclusionAllowedFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_NssaiInclusionAllowedOutFlag.reset(new unsigned);
    *m_NssaiInclusionAllowedOutFlag.get() = 0;

    m_PrimaryRatRestrictionsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PrimaryRatRestrictionsOutFlag.reset(new unsigned);
    *m_PrimaryRatRestrictionsOutFlag.get() = 0;

    m_SecondaryRatRestrictionsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SecondaryRatRestrictionsOutFlag.reset(new unsigned);
    *m_SecondaryRatRestrictionsOutFlag.get() = 0;
  };
  virtual ~AccessAndMobilitySubscriptionData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SupportedFeatures Gpsis
    // InternalGroupIds SubscribedUeAmbr Nssai RatRestrictions ForbiddenAreas
    // ServiceAreaRestriction CoreNetworkTypeRestrictions RfspIndex SubsRegTimer
    // UeUsageType MpsPriority McsPriority ActiveTime MicoAllowed
    // SharedAmDataIds OdbPacketServices SubscribedDnnList NssaiInclusionAllowed
    // PrimaryRatRestrictions SecondaryRatRestrictions
    h->add_optional_property("supportedFeatures", &this->m_SupportedFeatures,
                             m_SupportedFeaturesFlag,
                             m_SupportedFeaturesOutFlag);
    h->add_optional_property("gpsis", &this->m_Gpsis, m_GpsisFlag,
                             m_GpsisOutFlag);
    h->add_optional_property("internalGroupIds", &this->m_InternalGroupIds,
                             m_InternalGroupIdsFlag, m_InternalGroupIdsOutFlag);
    h->add_optional_property("subscribedUeAmbr", &this->m_SubscribedUeAmbr,
                             m_SubscribedUeAmbrFlag, m_SubscribedUeAmbrOutFlag);
    h->add_optional_property("nssai", &this->m_Nssai, m_NssaiFlag,
                             m_NssaiOutFlag);
    h->add_optional_property("ratRestrictions", &this->m_RatRestrictions,
                             m_RatRestrictionsFlag, m_RatRestrictionsOutFlag);
    h->add_optional_property("forbiddenAreas", &this->m_ForbiddenAreas,
                             m_ForbiddenAreasFlag, m_ForbiddenAreasOutFlag);
    h->add_optional_property(
        "serviceAreaRestriction", &this->m_ServiceAreaRestriction,
        m_ServiceAreaRestrictionFlag, m_ServiceAreaRestrictionOutFlag);
    h->add_optional_property("coreNetworkTypeRestrictions",
                             &this->m_CoreNetworkTypeRestrictions,
                             m_CoreNetworkTypeRestrictionsFlag,
                             m_CoreNetworkTypeRestrictionsOutFlag);
    h->add_optional_property("rfspIndex", &this->m_RfspIndex, m_RfspIndexFlag,
                             m_RfspIndexOutFlag);
    h->add_optional_property("subsRegTimer", &this->m_SubsRegTimer,
                             m_SubsRegTimerFlag, m_SubsRegTimerOutFlag);
    h->add_optional_property("ueUsageType", &this->m_UeUsageType,
                             m_UeUsageTypeFlag, m_UeUsageTypeOutFlag);
    h->add_optional_property("mpsPriority", &this->m_MpsPriority,
                             m_MpsPriorityFlag, m_MpsPriorityOutFlag);
    h->add_optional_property("mcsPriority", &this->m_McsPriority,
                             m_McsPriorityFlag, m_McsPriorityOutFlag);
    h->add_optional_property("activeTime", &this->m_ActiveTime,
                             m_ActiveTimeFlag, m_ActiveTimeOutFlag);
    h->add_optional_property("micoAllowed", &this->m_MicoAllowed,
                             m_MicoAllowedFlag, m_MicoAllowedOutFlag);
    h->add_optional_property("sharedAmDataIds", &this->m_SharedAmDataIds,
                             m_SharedAmDataIdsFlag, m_SharedAmDataIdsOutFlag);
    h->add_optional_property("odbPacketServices", &this->m_OdbPacketServices,
                             m_OdbPacketServicesFlag,
                             m_OdbPacketServicesOutFlag);
    h->add_optional_property("subscribedDnnList", &this->m_SubscribedDnnList,
                             m_SubscribedDnnListFlag,
                             m_SubscribedDnnListOutFlag);
    h->add_optional_property(
        "nssaiInclusionAllowed", &this->m_NssaiInclusionAllowed,
        m_NssaiInclusionAllowedFlag, m_NssaiInclusionAllowedOutFlag);
    h->add_optional_property(
        "primaryRatRestrictions", &this->m_PrimaryRatRestrictions,
        m_PrimaryRatRestrictionsFlag, m_PrimaryRatRestrictionsOutFlag);
    h->add_optional_property(
        "secondaryRatRestrictions", &this->m_SecondaryRatRestrictions,
        m_SecondaryRatRestrictionsFlag, m_SecondaryRatRestrictionsOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &
  operator<<(std::ostream &o, const AccessAndMobilitySubscriptionData &obj) {

    o << "SupportedFeatures, optional flag is : " << *m_SupportedFeaturesOutFlag
      << ", content is : " << obj.m_SupportedFeatures << std::endl;
    o << "Gpsis, optional flag is : " << *m_GpsisOutFlag << std::endl;
    o << convert2string(std::string("Gpsis"), obj.m_Gpsis) << std::endl;
    o << "InternalGroupIds, optional flag is : " << *m_InternalGroupIdsOutFlag
      << std::endl;
    o << convert2string(std::string("InternalGroupIds"), obj.m_InternalGroupIds)
      << std::endl;

    o << "SubscribedUeAmbr, optional flag is : " << *m_SubscribedUeAmbrOutFlag
      << ", content is : " << obj.m_SubscribedUeAmbr << std::endl;

    o << "Nssai, optional flag is : " << *m_NssaiOutFlag
      << ", content is : " << obj.m_Nssai << std::endl;
    o << "RatRestrictions, optional flag is : " << *m_RatRestrictionsOutFlag
      << std::endl;
    o << convert2string(std::string("RatRestrictions"), obj.m_RatRestrictions)
      << std::endl;
    o << "ForbiddenAreas, optional flag is : " << *m_ForbiddenAreasOutFlag
      << std::endl;
    o << convert2string(std::string("ForbiddenAreas"), obj.m_ForbiddenAreas)
      << std::endl;

    o << "ServiceAreaRestriction, optional flag is : "
      << *m_ServiceAreaRestrictionOutFlag
      << ", content is : " << obj.m_ServiceAreaRestriction << std::endl;
    o << "CoreNetworkTypeRestrictions, optional flag is : "
      << *m_CoreNetworkTypeRestrictionsOutFlag << std::endl;
    o << convert2string(std::string("CoreNetworkTypeRestrictions"),
                        obj.m_CoreNetworkTypeRestrictions)
      << std::endl;

    o << "RfspIndex, optional flag is : " << *m_RfspIndexOutFlag
      << ", content is : " << obj.m_RfspIndex << std::endl;

    o << "SubsRegTimer, optional flag is : " << *m_SubsRegTimerOutFlag
      << ", content is : " << obj.m_SubsRegTimer << std::endl;

    o << "UeUsageType, optional flag is : " << *m_UeUsageTypeOutFlag
      << ", content is : " << obj.m_UeUsageType << std::endl;

    o << "MpsPriority, optional flag is : " << *m_MpsPriorityOutFlag
      << ", content is : " << obj.m_MpsPriority << std::endl;

    o << "McsPriority, optional flag is : " << *m_McsPriorityOutFlag
      << ", content is : " << obj.m_McsPriority << std::endl;

    o << "ActiveTime, optional flag is : " << *m_ActiveTimeOutFlag
      << ", content is : " << obj.m_ActiveTime << std::endl;

    o << "MicoAllowed, optional flag is : " << *m_MicoAllowedOutFlag
      << ", content is : " << obj.m_MicoAllowed << std::endl;
    o << "SharedAmDataIds, optional flag is : " << *m_SharedAmDataIdsOutFlag
      << std::endl;
    o << convert2string(std::string("SharedAmDataIds"), obj.m_SharedAmDataIds)
      << std::endl;

    o << "OdbPacketServices, optional flag is : " << *m_OdbPacketServicesOutFlag
      << ", content is : " << obj.m_OdbPacketServices << std::endl;
    o << "SubscribedDnnList, optional flag is : " << *m_SubscribedDnnListOutFlag
      << std::endl;
    o << convert2string(std::string("SubscribedDnnList"),
                        obj.m_SubscribedDnnList)
      << std::endl;

    o << "NssaiInclusionAllowed, optional flag is : "
      << *m_NssaiInclusionAllowedOutFlag
      << ", content is : " << obj.m_NssaiInclusionAllowed << std::endl;
    o << "PrimaryRatRestrictions, optional flag is : "
      << *m_PrimaryRatRestrictionsOutFlag << std::endl;
    o << convert2string(std::string("PrimaryRatRestrictions"),
                        obj.m_PrimaryRatRestrictions)
      << std::endl;
    o << "SecondaryRatRestrictions, optional flag is : "
      << *m_SecondaryRatRestrictionsOutFlag << std::endl;
    o << convert2string(std::string("SecondaryRatRestrictions"),
                        obj.m_SecondaryRatRestrictions)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// AccessAndMobilitySubscriptionData members vars : SupportedFeatures Gpsis
  /// InternalGroupIds SubscribedUeAmbr Nssai RatRestrictions ForbiddenAreas
  /// ServiceAreaRestriction CoreNetworkTypeRestrictions RfspIndex SubsRegTimer
  /// UeUsageType MpsPriority McsPriority ActiveTime MicoAllowed SharedAmDataIds
  /// OdbPacketServices SubscribedDnnList NssaiInclusionAllowed
  /// PrimaryRatRestrictions SecondaryRatRestrictions

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

  std::vector<std::string> &getGpsis() { return m_Gpsis; }
  void setGpsis(std::vector<std::string> const &value) { m_Gpsis = value; }

  std::vector<std::string> &getInternalGroupIds() { return m_InternalGroupIds; }
  void setInternalGroupIds(std::vector<std::string> const &value) {
    m_InternalGroupIds = value;
  }

  AmbrRm getSubscribedUeAmbr() const { return m_SubscribedUeAmbr; }
  void setSubscribedUeAmbr(AmbrRm const &value) { m_SubscribedUeAmbr = value; }

  Nssai getNssai() const { return m_Nssai; }
  void setNssai(Nssai const &value) { m_Nssai = value; }

  std::vector<RatType> &getRatRestrictions() { return m_RatRestrictions; }
  void setRatRestrictions(std::vector<RatType> const &value) {
    m_RatRestrictions = value;
  }

  std::vector<Area> &getForbiddenAreas() { return m_ForbiddenAreas; }
  void setForbiddenAreas(std::vector<Area> const &value) {
    m_ForbiddenAreas = value;
  }

  ServiceAreaRestriction getServiceAreaRestriction() const {
    return m_ServiceAreaRestriction;
  }
  void setServiceAreaRestriction(ServiceAreaRestriction const &value) {
    m_ServiceAreaRestriction = value;
  }

  std::vector<CoreNetworkType> &getCoreNetworkTypeRestrictions() {
    return m_CoreNetworkTypeRestrictions;
  }
  void
  setCoreNetworkTypeRestrictions(std::vector<CoreNetworkType> const &value) {
    m_CoreNetworkTypeRestrictions = value;
  }

  int32_t getRfspIndex() const { return m_RfspIndex; }
  void setRfspIndex(int32_t const value) { m_RfspIndex = value; }

  int32_t getSubsRegTimer() const { return m_SubsRegTimer; }
  void setSubsRegTimer(int32_t const value) { m_SubsRegTimer = value; }

  int32_t getUeUsageType() const { return m_UeUsageType; }
  void setUeUsageType(int32_t const value) { m_UeUsageType = value; }

  bool isMpsPriority() const { return m_MpsPriority; }
  void setMpsPriority(bool const value) { m_MpsPriority = value; }

  bool isMcsPriority() const { return m_McsPriority; }
  void setMcsPriority(bool const value) { m_McsPriority = value; }

  int32_t getActiveTime() const { return m_ActiveTime; }
  void setActiveTime(int32_t const value) { m_ActiveTime = value; }

  bool isMicoAllowed() const { return m_MicoAllowed; }
  void setMicoAllowed(bool const value) { m_MicoAllowed = value; }

  std::vector<std::string> &getSharedAmDataIds() { return m_SharedAmDataIds; }
  void setSharedAmDataIds(std::vector<std::string> const &value) {
    m_SharedAmDataIds = value;
  }

  OdbPacketServices getOdbPacketServices() const { return m_OdbPacketServices; }
  void setOdbPacketServices(OdbPacketServices const &value) {
    m_OdbPacketServices = value;
  }

  std::vector<std::string> &getSubscribedDnnList() {
    return m_SubscribedDnnList;
  }
  void setSubscribedDnnList(std::vector<std::string> const &value) {
    m_SubscribedDnnList = value;
  }

  bool isNssaiInclusionAllowed() const { return m_NssaiInclusionAllowed; }
  void setNssaiInclusionAllowed(bool const value) {
    m_NssaiInclusionAllowed = value;
  }

  std::vector<RatType> &getPrimaryRatRestrictions() {
    return m_PrimaryRatRestrictions;
  }
  void setPrimaryRatRestrictions(std::vector<RatType> const &value) {
    m_PrimaryRatRestrictions = value;
  }

  std::vector<RatType> &getSecondaryRatRestrictions() {
    return m_SecondaryRatRestrictions;
  }
  void setSecondaryRatRestrictions(std::vector<RatType> const &value) {
    m_SecondaryRatRestrictions = value;
  }

public:
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
  shared_ptr<unsigned> m_SupportedFeaturesOutFlag;
  std::vector<std::string> m_Gpsis;

  unsigned m_GpsisFlag;
  shared_ptr<unsigned> m_GpsisOutFlag;
  std::vector<std::string> m_InternalGroupIds;

  unsigned m_InternalGroupIdsFlag;
  shared_ptr<unsigned> m_InternalGroupIdsOutFlag;
  AmbrRm m_SubscribedUeAmbr;

  unsigned m_SubscribedUeAmbrFlag;
  shared_ptr<unsigned> m_SubscribedUeAmbrOutFlag;
  Nssai m_Nssai;

  unsigned m_NssaiFlag;
  shared_ptr<unsigned> m_NssaiOutFlag;
  std::vector<RatType> m_RatRestrictions;

  unsigned m_RatRestrictionsFlag;
  shared_ptr<unsigned> m_RatRestrictionsOutFlag;
  std::vector<Area> m_ForbiddenAreas;

  unsigned m_ForbiddenAreasFlag;
  shared_ptr<unsigned> m_ForbiddenAreasOutFlag;
  ServiceAreaRestriction m_ServiceAreaRestriction;

  unsigned m_ServiceAreaRestrictionFlag;
  shared_ptr<unsigned> m_ServiceAreaRestrictionOutFlag;
  std::vector<CoreNetworkType> m_CoreNetworkTypeRestrictions;

  unsigned m_CoreNetworkTypeRestrictionsFlag;
  shared_ptr<unsigned> m_CoreNetworkTypeRestrictionsOutFlag;
  int32_t m_RfspIndex;

  unsigned m_RfspIndexFlag;
  shared_ptr<unsigned> m_RfspIndexOutFlag;
  int32_t m_SubsRegTimer;

  unsigned m_SubsRegTimerFlag;
  shared_ptr<unsigned> m_SubsRegTimerOutFlag;
  int32_t m_UeUsageType;

  unsigned m_UeUsageTypeFlag;
  shared_ptr<unsigned> m_UeUsageTypeOutFlag;
  bool m_MpsPriority;

  unsigned m_MpsPriorityFlag;
  shared_ptr<unsigned> m_MpsPriorityOutFlag;
  bool m_McsPriority;

  unsigned m_McsPriorityFlag;
  shared_ptr<unsigned> m_McsPriorityOutFlag;
  int32_t m_ActiveTime;

  unsigned m_ActiveTimeFlag;
  shared_ptr<unsigned> m_ActiveTimeOutFlag;
  bool m_MicoAllowed;

  unsigned m_MicoAllowedFlag;
  shared_ptr<unsigned> m_MicoAllowedOutFlag;
  std::vector<std::string> m_SharedAmDataIds;

  unsigned m_SharedAmDataIdsFlag;
  shared_ptr<unsigned> m_SharedAmDataIdsOutFlag;
  OdbPacketServices m_OdbPacketServices;

  unsigned m_OdbPacketServicesFlag;
  shared_ptr<unsigned> m_OdbPacketServicesOutFlag;
  std::vector<std::string> m_SubscribedDnnList;

  unsigned m_SubscribedDnnListFlag;
  shared_ptr<unsigned> m_SubscribedDnnListOutFlag;
  bool m_NssaiInclusionAllowed;

  unsigned m_NssaiInclusionAllowedFlag;
  shared_ptr<unsigned> m_NssaiInclusionAllowedOutFlag;
  std::vector<RatType> m_PrimaryRatRestrictions;

  unsigned m_PrimaryRatRestrictionsFlag;
  shared_ptr<unsigned> m_PrimaryRatRestrictionsOutFlag;
  std::vector<RatType> m_SecondaryRatRestrictions;

  unsigned m_SecondaryRatRestrictionsFlag;
  shared_ptr<unsigned> m_SecondaryRatRestrictionsOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccessAndMobilitySubscriptionData_H_ */
