/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ProvidingAcknowledgementOfSteeringOfRoamingApi.h
 *
 * 
 */

#ifndef ProvidingAcknowledgementOfSteeringOfRoamingApi_H_
#define ProvidingAcknowledgementOfSteeringOfRoamingApi_H_






#include "ProvidingAcknowledgementOfSteeringOfRoamingApiImpl.h"

#include "AcknowledgeInfo.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  ProvidingAcknowledgementOfSteeringOfRoamingApi {
public:
    ProvidingAcknowledgementOfSteeringOfRoamingApi();
    virtual ~ProvidingAcknowledgementOfSteeringOfRoamingApi() {}
 



private:
   

    static void sor_ack_info_handler(request &requestIn,  response responseIn)
    {
    // Getting the path params
    std::string supi;

    if(request.param.count("supi"))
    {
      supi = request.param["supi"];
    }
    
    // Getting the body param
    
    AcknowledgeInfo acknowledgeInfo;
    
    
    

    try {
      // nlohmann::json::parse(request.body()).get_to(acknowledgeInfo);
      staticjson::ParseStatus result;
      acknowledgeInfo.decode(request.body(),result);
    /// <param name="supi">Identifier of the UE</param>
    /// <param name="acknowledgeInfo"> (optional)</param>
      ProvidingAcknowledgementOfSteeringOfRoamingApiImpl::sor_ack_info(supi, acknowledgeInfo, response);
   
    }  catch (std::exception &e) {
        responseIn.write_head(500);
        responseIn.end(e.what());
        //send a 500 error
        return;
    }
    }
   
 

};

}
}
}
}

#endif /* ProvidingAcknowledgementOfSteeringOfRoamingApi_H_ */

