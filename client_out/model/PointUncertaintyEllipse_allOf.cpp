/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PointUncertaintyEllipse_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PointUncertaintyEllipse_allOf::PointUncertaintyEllipse_allOf()
{
    m_PointIsSet = false;
    m_UncertaintyEllipseIsSet = false;
    m_Confidence = 0;
    m_ConfidenceIsSet = false;
}

PointUncertaintyEllipse_allOf::~PointUncertaintyEllipse_allOf()
{
}

void PointUncertaintyEllipse_allOf::validate()
{
    // TODO: implement validation
}

web::json::value PointUncertaintyEllipse_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PointIsSet)
    {
        val[utility::conversions::to_string_t("point")] = ModelBase::toJson(m_Point);
    }
    if(m_UncertaintyEllipseIsSet)
    {
        val[utility::conversions::to_string_t("uncertaintyEllipse")] = ModelBase::toJson(m_UncertaintyEllipse);
    }
    if(m_ConfidenceIsSet)
    {
        val[utility::conversions::to_string_t("confidence")] = ModelBase::toJson(m_Confidence);
    }

    return val;
}

bool PointUncertaintyEllipse_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("point")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("point"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GeographicalCoordinates> refVal_point;
            ok &= ModelBase::fromJson(fieldValue, refVal_point);
            setPoint(refVal_point);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uncertaintyEllipse")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uncertaintyEllipse"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UncertaintyEllipse> refVal_uncertaintyEllipse;
            ok &= ModelBase::fromJson(fieldValue, refVal_uncertaintyEllipse);
            setUncertaintyEllipse(refVal_uncertaintyEllipse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confidence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("confidence"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_confidence;
            ok &= ModelBase::fromJson(fieldValue, refVal_confidence);
            setConfidence(refVal_confidence);
        }
    }
    return ok;
}

void PointUncertaintyEllipse_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("point"), m_Point));
    }
    if(m_UncertaintyEllipseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uncertaintyEllipse"), m_UncertaintyEllipse));
    }
    if(m_ConfidenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confidence"), m_Confidence));
    }
}

bool PointUncertaintyEllipse_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("point")))
    {
        std::shared_ptr<GeographicalCoordinates> refVal_point;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("point")), refVal_point );
        setPoint(refVal_point);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uncertaintyEllipse")))
    {
        std::shared_ptr<UncertaintyEllipse> refVal_uncertaintyEllipse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uncertaintyEllipse")), refVal_uncertaintyEllipse );
        setUncertaintyEllipse(refVal_uncertaintyEllipse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confidence")))
    {
        int32_t refVal_confidence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("confidence")), refVal_confidence );
        setConfidence(refVal_confidence);
    }
    return ok;
}

std::shared_ptr<GeographicalCoordinates> PointUncertaintyEllipse_allOf::getPoint() const
{
    return m_Point;
}

void PointUncertaintyEllipse_allOf::setPoint(const std::shared_ptr<GeographicalCoordinates>& value)
{
    m_Point = value;
    m_PointIsSet = true;
}

bool PointUncertaintyEllipse_allOf::pointIsSet() const
{
    return m_PointIsSet;
}

void PointUncertaintyEllipse_allOf::unsetPoint()
{
    m_PointIsSet = false;
}
std::shared_ptr<UncertaintyEllipse> PointUncertaintyEllipse_allOf::getUncertaintyEllipse() const
{
    return m_UncertaintyEllipse;
}

void PointUncertaintyEllipse_allOf::setUncertaintyEllipse(const std::shared_ptr<UncertaintyEllipse>& value)
{
    m_UncertaintyEllipse = value;
    m_UncertaintyEllipseIsSet = true;
}

bool PointUncertaintyEllipse_allOf::uncertaintyEllipseIsSet() const
{
    return m_UncertaintyEllipseIsSet;
}

void PointUncertaintyEllipse_allOf::unsetUncertaintyEllipse()
{
    m_UncertaintyEllipseIsSet = false;
}
int32_t PointUncertaintyEllipse_allOf::getConfidence() const
{
    return m_Confidence;
}

void PointUncertaintyEllipse_allOf::setConfidence(int32_t value)
{
    m_Confidence = value;
    m_ConfidenceIsSet = true;
}

bool PointUncertaintyEllipse_allOf::confidenceIsSet() const
{
    return m_ConfidenceIsSet;
}

void PointUncertaintyEllipse_allOf::unsetConfidence()
{
    m_ConfidenceIsSet = false;
}
}
}
}
}


