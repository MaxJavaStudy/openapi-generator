/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TrafficProfile.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TrafficProfile::TrafficProfile()
{
}

TrafficProfile::~TrafficProfile()
{
}

void TrafficProfile::validate()
{
    // TODO: implement validation
}

web::json::value TrafficProfile::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eTrafficProfile::TrafficProfile_SINGLE_TRANS_UL) val = web::json::value::string(U(SINGLE_TRANS_UL));
    if (m_value == eTrafficProfile::TrafficProfile_SINGLE_TRANS_DL) val = web::json::value::string(U(SINGLE_TRANS_DL));
    if (m_value == eTrafficProfile::TrafficProfile_DUAL_TRANS_UL_FIRST) val = web::json::value::string(U(DUAL_TRANS_UL_FIRST));
    if (m_value == eTrafficProfile::TrafficProfile_DUAL_TRANS_DL_FIRST) val = web::json::value::string(U(DUAL_TRANS_DL_FIRST));
    if (m_value == eTrafficProfile::TrafficProfile_MULTI_TRANS) val = web::json::value::string(U(MULTI_TRANS));

    return val;
}

bool TrafficProfile::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(SINGLE_TRANS_UL)) m_value = eTrafficProfile::TrafficProfile_SINGLE_TRANS_UL;
    if (s == utility::conversions::to_string_t(SINGLE_TRANS_DL)) m_value = eTrafficProfile::TrafficProfile_SINGLE_TRANS_DL;
    if (s == utility::conversions::to_string_t(DUAL_TRANS_UL_FIRST)) m_value = eTrafficProfile::TrafficProfile_DUAL_TRANS_UL_FIRST;
    if (s == utility::conversions::to_string_t(DUAL_TRANS_DL_FIRST)) m_value = eTrafficProfile::TrafficProfile_DUAL_TRANS_DL_FIRST;
    if (s == utility::conversions::to_string_t(MULTI_TRANS)) m_value = eTrafficProfile::TrafficProfile_MULTI_TRANS;
    return true;
}

void TrafficProfile::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eTrafficProfile::TrafficProfile_SINGLE_TRANS_UL) s = utility::conversions::to_string_t(SINGLE_TRANS_UL);
    if (m_value == eTrafficProfile::TrafficProfile_SINGLE_TRANS_DL) s = utility::conversions::to_string_t(SINGLE_TRANS_DL);
    if (m_value == eTrafficProfile::TrafficProfile_DUAL_TRANS_UL_FIRST) s = utility::conversions::to_string_t(DUAL_TRANS_UL_FIRST);
    if (m_value == eTrafficProfile::TrafficProfile_DUAL_TRANS_DL_FIRST) s = utility::conversions::to_string_t(DUAL_TRANS_DL_FIRST);
    if (m_value == eTrafficProfile::TrafficProfile_MULTI_TRANS) s = utility::conversions::to_string_t(MULTI_TRANS);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool TrafficProfile::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eTrafficProfile v;

        
        if (s == utility::conversions::to_string_t(SINGLE_TRANS_UL)) v = eTrafficProfile::TrafficProfile_SINGLE_TRANS_UL;
        if (s == utility::conversions::to_string_t(SINGLE_TRANS_DL)) v = eTrafficProfile::TrafficProfile_SINGLE_TRANS_DL;
        if (s == utility::conversions::to_string_t(DUAL_TRANS_UL_FIRST)) v = eTrafficProfile::TrafficProfile_DUAL_TRANS_UL_FIRST;
        if (s == utility::conversions::to_string_t(DUAL_TRANS_DL_FIRST)) v = eTrafficProfile::TrafficProfile_DUAL_TRANS_DL_FIRST;
        if (s == utility::conversions::to_string_t(MULTI_TRANS)) v = eTrafficProfile::TrafficProfile_MULTI_TRANS;

        setValue(v);
    }
    return ok;
}

TrafficProfile::eTrafficProfile TrafficProfile::getValue() const
{
   return m_value;
}

void TrafficProfile::setValue(TrafficProfile::eTrafficProfile const value)
{
   m_value = value;
}


}
}
}
}


