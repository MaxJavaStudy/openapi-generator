/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UeContextInSmfData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UeContextInSmfData::UeContextInSmfData()
{
    m_PduSessionsIsSet = false;
    m_PgwInfoIsSet = false;
    m_EmergencyInfoIsSet = false;
}

UeContextInSmfData::~UeContextInSmfData()
{
}

void UeContextInSmfData::validate()
{
    // TODO: implement validation
}

web::json::value UeContextInSmfData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PduSessionsIsSet)
    {
        val[utility::conversions::to_string_t("pduSessions")] = ModelBase::toJson(m_PduSessions);
    }
    if(m_PgwInfoIsSet)
    {
        val[utility::conversions::to_string_t("pgwInfo")] = ModelBase::toJson(m_PgwInfo);
    }
    if(m_EmergencyInfoIsSet)
    {
        val[utility::conversions::to_string_t("emergencyInfo")] = ModelBase::toJson(m_EmergencyInfo);
    }

    return val;
}

bool UeContextInSmfData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pduSessions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pduSessions"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<PduSession>> refVal_pduSessions;
            ok &= ModelBase::fromJson(fieldValue, refVal_pduSessions);
            setPduSessions(refVal_pduSessions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pgwInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pgwInfo"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PgwInfo>> refVal_pgwInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_pgwInfo);
            setPgwInfo(refVal_pgwInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emergencyInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emergencyInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmergencyInfo> refVal_emergencyInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_emergencyInfo);
            setEmergencyInfo(refVal_emergencyInfo);
        }
    }
    return ok;
}

void UeContextInSmfData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PduSessionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pduSessions"), m_PduSessions));
    }
    if(m_PgwInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pgwInfo"), m_PgwInfo));
    }
    if(m_EmergencyInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emergencyInfo"), m_EmergencyInfo));
    }
}

bool UeContextInSmfData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pduSessions")))
    {
        std::map<utility::string_t, std::shared_ptr<PduSession>> refVal_pduSessions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pduSessions")), refVal_pduSessions );
        setPduSessions(refVal_pduSessions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pgwInfo")))
    {
        std::vector<std::shared_ptr<PgwInfo>> refVal_pgwInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pgwInfo")), refVal_pgwInfo );
        setPgwInfo(refVal_pgwInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emergencyInfo")))
    {
        std::shared_ptr<EmergencyInfo> refVal_emergencyInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emergencyInfo")), refVal_emergencyInfo );
        setEmergencyInfo(refVal_emergencyInfo);
    }
    return ok;
}

std::map<utility::string_t, std::shared_ptr<PduSession>>& UeContextInSmfData::getPduSessions()
{
    return m_PduSessions;
}

void UeContextInSmfData::setPduSessions(const std::map<utility::string_t, std::shared_ptr<PduSession>>& value)
{
    m_PduSessions = value;
    m_PduSessionsIsSet = true;
}

bool UeContextInSmfData::pduSessionsIsSet() const
{
    return m_PduSessionsIsSet;
}

void UeContextInSmfData::unsetPduSessions()
{
    m_PduSessionsIsSet = false;
}
std::vector<std::shared_ptr<PgwInfo>>& UeContextInSmfData::getPgwInfo()
{
    return m_PgwInfo;
}

void UeContextInSmfData::setPgwInfo(const std::vector<std::shared_ptr<PgwInfo>>& value)
{
    m_PgwInfo = value;
    m_PgwInfoIsSet = true;
}

bool UeContextInSmfData::pgwInfoIsSet() const
{
    return m_PgwInfoIsSet;
}

void UeContextInSmfData::unsetPgwInfo()
{
    m_PgwInfoIsSet = false;
}
std::shared_ptr<EmergencyInfo> UeContextInSmfData::getEmergencyInfo() const
{
    return m_EmergencyInfo;
}

void UeContextInSmfData::setEmergencyInfo(const std::shared_ptr<EmergencyInfo>& value)
{
    m_EmergencyInfo = value;
    m_EmergencyInfoIsSet = true;
}

bool UeContextInSmfData::emergencyInfoIsSet() const
{
    return m_EmergencyInfoIsSet;
}

void UeContextInSmfData::unsetEmergencyInfo()
{
    m_EmergencyInfoIsSet = false;
}
}
}
}
}


