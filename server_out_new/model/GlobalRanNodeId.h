/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GlobalRanNodeId.h
 *
 * 
 */

#ifndef GlobalRanNodeId_H_
#define GlobalRanNodeId_H_


#include <string>
#include "GNbId.h"
#include "PlmnId.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  GlobalRanNodeId: public jsonParser::jsonParser<GlobalRanNodeId>
{
public:
    explicit GlobalRanNodeId(){
        // constructor
        
            m_PlmnIdFlag = staticjson::Flags::Default;
m_N3IwfId = "";
        
            m_N3IwfIdFlag = (staticjson::Flags::Optional);

            m_GNbIdFlag = (staticjson::Flags::Optional);
m_NgeNbId = "";
        
            m_NgeNbIdFlag = (staticjson::Flags::Optional);
m_WagfId = "";
        
            m_WagfIdFlag = (staticjson::Flags::Optional);
m_TngfId = "";
        
            m_TngfIdFlag = (staticjson::Flags::Optional);
m_Nid = "";
        
            m_NidFlag = (staticjson::Flags::Optional);
m_ENbId = "";
        
            m_ENbIdFlag = (staticjson::Flags::Optional);
    };
    virtual ~GlobalRanNodeId(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : PlmnId N3IwfId GNbId NgeNbId WagfId TngfId Nid ENbId 
        h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);
        h->add_property("n3IwfId", &this->m_N3IwfId, m_N3IwfIdFlag);
        h->add_property("gNbId", &this->m_GNbId, m_GNbIdFlag);
        h->add_property("ngeNbId", &this->m_NgeNbId, m_NgeNbIdFlag);
        h->add_property("wagfId", &this->m_WagfId, m_WagfIdFlag);
        h->add_property("tngfId", &this->m_TngfId, m_TngfIdFlag);
        h->add_property("nid", &this->m_Nid, m_NidFlag);
        h->add_property("eNbId", &this->m_ENbId, m_ENbIdFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const GlobalRanNodeId& obj)
    {
        
        o << "PlmnId : " << obj.m_PlmnId << std::endl;

        o << "N3IwfId : " << obj.m_N3IwfId << std::endl;

        o << "GNbId : " << obj.m_GNbId << std::endl;

        o << "NgeNbId : " << obj.m_NgeNbId << std::endl;

        o << "WagfId : " << obj.m_WagfId << std::endl;

        o << "TngfId : " << obj.m_TngfId << std::endl;

        o << "Nid : " << obj.m_Nid << std::endl;

        o << "ENbId : " << obj.m_ENbId << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// GlobalRanNodeId members vars : PlmnId N3IwfId GNbId NgeNbId WagfId TngfId Nid ENbId 

    PlmnId  getPlmnId() const
    {
        return m_PlmnId;
    }
    void  setPlmnId(PlmnId const& value)
    {
        m_PlmnId = value;
    }

std::string  getN3IwfId() const
    {
        return m_N3IwfId;
    }
    void  setN3IwfId(std::string const& value)
    {
        m_N3IwfId = value;
    }

GNbId  getGNbId() const
    {
        return m_GNbId;
    }
    void  setGNbId(GNbId const& value)
    {
        m_GNbId = value;
    }

std::string  getNgeNbId() const
    {
        return m_NgeNbId;
    }
    void  setNgeNbId(std::string const& value)
    {
        m_NgeNbId = value;
    }

std::string  getWagfId() const
    {
        return m_WagfId;
    }
    void  setWagfId(std::string const& value)
    {
        m_WagfId = value;
    }

std::string  getTngfId() const
    {
        return m_TngfId;
    }
    void  setTngfId(std::string const& value)
    {
        m_TngfId = value;
    }

std::string  getNid() const
    {
        return m_Nid;
    }
    void  setNid(std::string const& value)
    {
        m_Nid = value;
    }

std::string  getENbId() const
    {
        return m_ENbId;
    }
    void  setENbId(std::string const& value)
    {
        m_ENbId = value;
    }



    
public:
    PlmnId m_PlmnId;
    
    unsigned m_PlmnIdFlag;
    std::string m_N3IwfId;
    
    unsigned m_N3IwfIdFlag;
    GNbId m_GNbId;
    
    unsigned m_GNbIdFlag;
    std::string m_NgeNbId;
    
    unsigned m_NgeNbIdFlag;
    std::string m_WagfId;
    
    unsigned m_WagfIdFlag;
    std::string m_TngfId;
    
    unsigned m_TngfIdFlag;
    std::string m_Nid;
    
    unsigned m_NidFlag;
    std::string m_ENbId;
    
    unsigned m_ENbIdFlag;
  
};
}
}
}
}

#endif /* GlobalRanNodeId_H_ */
