/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LcsPrivacyData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef LcsPrivacyData_H_
#define LcsPrivacyData_H_

#include "CSB_JsonParser.h"
#include "Lpi.h"
#include "PlmnOperatorClass.h"
#include "UnrelatedClass.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class LcsPrivacyData : public jsonParser::jsonParser<LcsPrivacyData> {
public:
  explicit LcsPrivacyData() {
    // constructor

    m_LpiFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_LpiOutFlag.reset(new unsigned);
    *m_LpiOutFlag.get() = 0;

    m_UnrelatedClassFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UnrelatedClassOutFlag.reset(new unsigned);
    *m_UnrelatedClassOutFlag.get() = 0;

    m_PlmnOperatorClassesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PlmnOperatorClassesOutFlag.reset(new unsigned);
    *m_PlmnOperatorClassesOutFlag.get() = 0;
  };
  virtual ~LcsPrivacyData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Lpi UnrelatedClass
    // PlmnOperatorClasses
    h->add_optional_property("lpi", &this->m_Lpi, m_LpiFlag, m_LpiOutFlag);
    h->add_optional_property("unrelatedClass", &this->m_UnrelatedClass,
                             m_UnrelatedClassFlag, m_UnrelatedClassOutFlag);
    h->add_optional_property(
        "plmnOperatorClasses", &this->m_PlmnOperatorClasses,
        m_PlmnOperatorClassesFlag, m_PlmnOperatorClassesOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const LcsPrivacyData &obj) {

    o << "Lpi, optional flag is : " << *m_LpiOutFlag
      << ", content is : " << obj.m_Lpi << std::endl;

    o << "UnrelatedClass, optional flag is : " << *m_UnrelatedClassOutFlag
      << ", content is : " << obj.m_UnrelatedClass << std::endl;
    o << "PlmnOperatorClasses, optional flag is : "
      << *m_PlmnOperatorClassesOutFlag << std::endl;
    o << convert2string(std::string("PlmnOperatorClasses"),
                        obj.m_PlmnOperatorClasses)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// LcsPrivacyData members vars : Lpi UnrelatedClass PlmnOperatorClasses

  Lpi getLpi() const { return m_Lpi; }
  void setLpi(Lpi const &value) { m_Lpi = value; }

  UnrelatedClass getUnrelatedClass() const { return m_UnrelatedClass; }
  void setUnrelatedClass(UnrelatedClass const &value) {
    m_UnrelatedClass = value;
  }

  std::vector<PlmnOperatorClass> &getPlmnOperatorClasses() {
    return m_PlmnOperatorClasses;
  }
  void setPlmnOperatorClasses(std::vector<PlmnOperatorClass> const &value) {
    m_PlmnOperatorClasses = value;
  }

public:
  Lpi m_Lpi;

  unsigned m_LpiFlag;
  shared_ptr<unsigned> m_LpiOutFlag;
  UnrelatedClass m_UnrelatedClass;

  unsigned m_UnrelatedClassFlag;
  shared_ptr<unsigned> m_UnrelatedClassOutFlag;
  std::vector<PlmnOperatorClass> m_PlmnOperatorClasses;

  unsigned m_PlmnOperatorClassesFlag;
  shared_ptr<unsigned> m_PlmnOperatorClassesOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LcsPrivacyData_H_ */
