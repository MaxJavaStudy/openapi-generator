/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TraceData.h
 *
 * 
 */

#ifndef TraceData_H_
#define TraceData_H_


#include "TraceDepth.h"
#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  TraceData: public jsonParser::jsonParser<TraceData>
{
public:
    explicit TraceData(){
        // constructor
        m_TraceRef = "";
        
            m_TraceRefFlag = staticjson::Flags::Default;

            m_TraceDepthFlag = staticjson::Flags::Default;
m_NeTypeList = "";
        
            m_NeTypeListFlag = staticjson::Flags::Default;
m_EventList = "";
        
            m_EventListFlag = staticjson::Flags::Default;
m_CollectionEntityIpv4Addr = "";
        
            m_CollectionEntityIpv4AddrFlag = (staticjson::Flags::Optional);
m_CollectionEntityIpv6Addr = "";
        
            m_CollectionEntityIpv6AddrFlag = (staticjson::Flags::Optional);
m_InterfaceList = "";
        
            m_InterfaceListFlag = (staticjson::Flags::Optional);
    };
    virtual ~TraceData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : TraceRef TraceDepth NeTypeList EventList CollectionEntityIpv4Addr CollectionEntityIpv6Addr InterfaceList 
        h->add_property("traceRef", &this->m_TraceRef, m_TraceRefFlag);
        h->add_property("traceDepth", &this->m_TraceDepth, m_TraceDepthFlag);
        h->add_property("neTypeList", &this->m_NeTypeList, m_NeTypeListFlag);
        h->add_property("eventList", &this->m_EventList, m_EventListFlag);
        h->add_property("collectionEntityIpv4Addr", &this->m_CollectionEntityIpv4Addr, m_CollectionEntityIpv4AddrFlag);
        h->add_property("collectionEntityIpv6Addr", &this->m_CollectionEntityIpv6Addr, m_CollectionEntityIpv6AddrFlag);
        h->add_property("interfaceList", &this->m_InterfaceList, m_InterfaceListFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const TraceData& obj)
    {
        
        o << "TraceRef : " << obj.m_TraceRef << std::endl;

        o << "TraceDepth : " << obj.m_TraceDepth << std::endl;

        o << "NeTypeList : " << obj.m_NeTypeList << std::endl;

        o << "EventList : " << obj.m_EventList << std::endl;

        o << "CollectionEntityIpv4Addr : " << obj.m_CollectionEntityIpv4Addr << std::endl;

        o << "CollectionEntityIpv6Addr : " << obj.m_CollectionEntityIpv6Addr << std::endl;

        o << "InterfaceList : " << obj.m_InterfaceList << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// TraceData members vars : TraceRef TraceDepth NeTypeList EventList CollectionEntityIpv4Addr CollectionEntityIpv6Addr InterfaceList 

    std::string  getTraceRef() const
    {
        return m_TraceRef;
    }
    void  setTraceRef(std::string const& value)
    {
        m_TraceRef = value;
    }

TraceDepth  getTraceDepth() const
    {
        return m_TraceDepth;
    }
    void  setTraceDepth(TraceDepth const& value)
    {
        m_TraceDepth = value;
    }

std::string  getNeTypeList() const
    {
        return m_NeTypeList;
    }
    void  setNeTypeList(std::string const& value)
    {
        m_NeTypeList = value;
    }

std::string  getEventList() const
    {
        return m_EventList;
    }
    void  setEventList(std::string const& value)
    {
        m_EventList = value;
    }

std::string  getCollectionEntityIpv4Addr() const
    {
        return m_CollectionEntityIpv4Addr;
    }
    void  setCollectionEntityIpv4Addr(std::string const& value)
    {
        m_CollectionEntityIpv4Addr = value;
    }

std::string  getCollectionEntityIpv6Addr() const
    {
        return m_CollectionEntityIpv6Addr;
    }
    void  setCollectionEntityIpv6Addr(std::string const& value)
    {
        m_CollectionEntityIpv6Addr = value;
    }

std::string  getInterfaceList() const
    {
        return m_InterfaceList;
    }
    void  setInterfaceList(std::string const& value)
    {
        m_InterfaceList = value;
    }



    
public:
    std::string m_TraceRef;
    
    unsigned m_TraceRefFlag;
    TraceDepth m_TraceDepth;
    
    unsigned m_TraceDepthFlag;
    std::string m_NeTypeList;
    
    unsigned m_NeTypeListFlag;
    std::string m_EventList;
    
    unsigned m_EventListFlag;
    std::string m_CollectionEntityIpv4Addr;
    
    unsigned m_CollectionEntityIpv4AddrFlag;
    std::string m_CollectionEntityIpv6Addr;
    
    unsigned m_CollectionEntityIpv6AddrFlag;
    std::string m_InterfaceList;
    
    unsigned m_InterfaceListFlag;
  
};
}
}
}
}

#endif /* TraceData_H_ */
