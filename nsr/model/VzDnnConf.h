/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * VzDnnConf.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef VzDnnConf_H_
#define VzDnnConf_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class VzDnnConf : public jsonParser::jsonParser<VzDnnConf> {
public:
  explicit VzDnnConf() {
    // constructor
    m_FramedIpv4PoolName = "";

    m_FramedIpv4PoolNameFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_FramedIpv4PoolNameOutFlag.reset(new unsigned);
    *m_FramedIpv4PoolNameOutFlag.get() = 0;
    m_FramedIpv6PoolName = "";

    m_FramedIpv6PoolNameFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_FramedIpv6PoolNameOutFlag.reset(new unsigned);
    *m_FramedIpv6PoolNameOutFlag.get() = 0;
    m_VirtualApnName = "";

    m_VirtualApnNameFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_VirtualApnNameOutFlag.reset(new unsigned);
    *m_VirtualApnNameOutFlag.get() = 0;
    m_FlexibleServiceField = "";

    m_FlexibleServiceFieldFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_FlexibleServiceFieldOutFlag.reset(new unsigned);
    *m_FlexibleServiceFieldOutFlag.get() = 0;

    m_DnAaaListFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DnAaaListOutFlag.reset(new unsigned);
    *m_DnAaaListOutFlag.get() = 0;
    m_SubscriberPermission = "";

    m_SubscriberPermissionFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SubscriberPermissionOutFlag.reset(new unsigned);
    *m_SubscriberPermissionOutFlag.get() = 0;
    m_IdleTimeout = 0;

    m_IdleTimeoutFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_IdleTimeoutOutFlag.reset(new unsigned);
    *m_IdleTimeoutOutFlag.get() = 0;
    m_SessionTimeout = 0;

    m_SessionTimeoutFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SessionTimeoutOutFlag.reset(new unsigned);
    *m_SessionTimeoutOutFlag.get() = 0;
    m_DnnPcscfAddress = "";

    m_DnnPcscfAddressFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DnnPcscfAddressOutFlag.reset(new unsigned);
    *m_DnnPcscfAddressOutFlag.get() = 0;
  };
  virtual ~VzDnnConf(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : FramedIpv4PoolName FramedIpv6PoolName
    // VirtualApnName FlexibleServiceField DnAaaList SubscriberPermission
    // IdleTimeout SessionTimeout DnnPcscfAddress
    h->add_optional_property("framedIpv4PoolName", &this->m_FramedIpv4PoolName,
                             m_FramedIpv4PoolNameFlag,
                             m_FramedIpv4PoolNameOutFlag);
    h->add_optional_property("framedIpv6PoolName", &this->m_FramedIpv6PoolName,
                             m_FramedIpv6PoolNameFlag,
                             m_FramedIpv6PoolNameOutFlag);
    h->add_optional_property("virtualApnName", &this->m_VirtualApnName,
                             m_VirtualApnNameFlag, m_VirtualApnNameOutFlag);
    h->add_optional_property(
        "flexibleServiceField", &this->m_FlexibleServiceField,
        m_FlexibleServiceFieldFlag, m_FlexibleServiceFieldOutFlag);
    h->add_optional_property("dnAaaList", &this->m_DnAaaList, m_DnAaaListFlag,
                             m_DnAaaListOutFlag);
    h->add_optional_property(
        "subscriberPermission", &this->m_SubscriberPermission,
        m_SubscriberPermissionFlag, m_SubscriberPermissionOutFlag);
    h->add_optional_property("idleTimeout", &this->m_IdleTimeout,
                             m_IdleTimeoutFlag, m_IdleTimeoutOutFlag);
    h->add_optional_property("sessionTimeout", &this->m_SessionTimeout,
                             m_SessionTimeoutFlag, m_SessionTimeoutOutFlag);
    h->add_optional_property("dnnPcscfAddress", &this->m_DnnPcscfAddress,
                             m_DnnPcscfAddressFlag, m_DnnPcscfAddressOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const VzDnnConf &obj) {

    o << "FramedIpv4PoolName, optional flag is : "
      << *m_FramedIpv4PoolNameOutFlag
      << ", content is : " << obj.m_FramedIpv4PoolName << std::endl;

    o << "FramedIpv6PoolName, optional flag is : "
      << *m_FramedIpv6PoolNameOutFlag
      << ", content is : " << obj.m_FramedIpv6PoolName << std::endl;

    o << "VirtualApnName, optional flag is : " << *m_VirtualApnNameOutFlag
      << ", content is : " << obj.m_VirtualApnName << std::endl;

    o << "FlexibleServiceField, optional flag is : "
      << *m_FlexibleServiceFieldOutFlag
      << ", content is : " << obj.m_FlexibleServiceField << std::endl;
    o << "DnAaaList, optional flag is : " << *m_DnAaaListOutFlag << std::endl;
    o << convert2string(std::string("DnAaaList"), obj.m_DnAaaList) << std::endl;

    o << "SubscriberPermission, optional flag is : "
      << *m_SubscriberPermissionOutFlag
      << ", content is : " << obj.m_SubscriberPermission << std::endl;

    o << "IdleTimeout, optional flag is : " << *m_IdleTimeoutOutFlag
      << ", content is : " << obj.m_IdleTimeout << std::endl;

    o << "SessionTimeout, optional flag is : " << *m_SessionTimeoutOutFlag
      << ", content is : " << obj.m_SessionTimeout << std::endl;

    o << "DnnPcscfAddress, optional flag is : " << *m_DnnPcscfAddressOutFlag
      << ", content is : " << obj.m_DnnPcscfAddress << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// VzDnnConf members vars : FramedIpv4PoolName FramedIpv6PoolName
  /// VirtualApnName FlexibleServiceField DnAaaList SubscriberPermission
  /// IdleTimeout SessionTimeout DnnPcscfAddress

  std::string getFramedIpv4PoolName() const { return m_FramedIpv4PoolName; }
  void setFramedIpv4PoolName(std::string const &value) {
    m_FramedIpv4PoolName = value;
  }

  std::string getFramedIpv6PoolName() const { return m_FramedIpv6PoolName; }
  void setFramedIpv6PoolName(std::string const &value) {
    m_FramedIpv6PoolName = value;
  }

  std::string getVirtualApnName() const { return m_VirtualApnName; }
  void setVirtualApnName(std::string const &value) { m_VirtualApnName = value; }

  std::string getFlexibleServiceField() const { return m_FlexibleServiceField; }
  void setFlexibleServiceField(std::string const &value) {
    m_FlexibleServiceField = value;
  }

  std::vector<std::string> &getDnAaaList() { return m_DnAaaList; }
  void setDnAaaList(std::vector<std::string> const &value) {
    m_DnAaaList = value;
  }

  std::string getSubscriberPermission() const { return m_SubscriberPermission; }
  void setSubscriberPermission(std::string const &value) {
    m_SubscriberPermission = value;
  }

  int32_t getIdleTimeout() const { return m_IdleTimeout; }
  void setIdleTimeout(int32_t const value) { m_IdleTimeout = value; }

  int32_t getSessionTimeout() const { return m_SessionTimeout; }
  void setSessionTimeout(int32_t const value) { m_SessionTimeout = value; }

  std::string getDnnPcscfAddress() const { return m_DnnPcscfAddress; }
  void setDnnPcscfAddress(std::string const &value) {
    m_DnnPcscfAddress = value;
  }

public:
  std::string m_FramedIpv4PoolName;

  unsigned m_FramedIpv4PoolNameFlag;
  shared_ptr<unsigned> m_FramedIpv4PoolNameOutFlag;
  std::string m_FramedIpv6PoolName;

  unsigned m_FramedIpv6PoolNameFlag;
  shared_ptr<unsigned> m_FramedIpv6PoolNameOutFlag;
  std::string m_VirtualApnName;

  unsigned m_VirtualApnNameFlag;
  shared_ptr<unsigned> m_VirtualApnNameOutFlag;
  std::string m_FlexibleServiceField;

  unsigned m_FlexibleServiceFieldFlag;
  shared_ptr<unsigned> m_FlexibleServiceFieldOutFlag;
  std::vector<std::string> m_DnAaaList;

  unsigned m_DnAaaListFlag;
  shared_ptr<unsigned> m_DnAaaListOutFlag;
  std::string m_SubscriberPermission;

  unsigned m_SubscriberPermissionFlag;
  shared_ptr<unsigned> m_SubscriberPermissionOutFlag;
  int32_t m_IdleTimeout;

  unsigned m_IdleTimeoutFlag;
  shared_ptr<unsigned> m_IdleTimeoutOutFlag;
  int32_t m_SessionTimeout;

  unsigned m_SessionTimeoutFlag;
  shared_ptr<unsigned> m_SessionTimeoutOutFlag;
  std::string m_DnnPcscfAddress;

  unsigned m_DnnPcscfAddressFlag;
  shared_ptr<unsigned> m_DnnPcscfAddressOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* VzDnnConf_H_ */
