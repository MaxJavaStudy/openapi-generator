/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceAreaRestriction.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef ServiceAreaRestriction_H_
#define ServiceAreaRestriction_H_

#include "Area.h"
#include "CSB_JsonParser.h"
#include "RestrictionType.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ServiceAreaRestriction
    : public jsonParser::jsonParser<ServiceAreaRestriction> {
public:
  explicit ServiceAreaRestriction() {
    // constructor

    m_RestrictionTypeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RestrictionTypeOutFlag.reset(new unsigned);
    *m_RestrictionTypeOutFlag.get() = 0;

    m_AreasFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AreasOutFlag.reset(new unsigned);
    *m_AreasOutFlag.get() = 0;
    m_MaxNumOfTAs = 0;

    m_MaxNumOfTAsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MaxNumOfTAsOutFlag.reset(new unsigned);
    *m_MaxNumOfTAsOutFlag.get() = 0;
    m_MaxNumOfTAsForNotAllowedAreas = 0;

    m_MaxNumOfTAsForNotAllowedAreasFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_MaxNumOfTAsForNotAllowedAreasOutFlag.reset(new unsigned);
    *m_MaxNumOfTAsForNotAllowedAreasOutFlag.get() = 0;
  };
  virtual ~ServiceAreaRestriction(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : RestrictionType Areas MaxNumOfTAs
    // MaxNumOfTAsForNotAllowedAreas
    h->add_optional_property("restrictionType", &this->m_RestrictionType,
                             m_RestrictionTypeFlag, m_RestrictionTypeOutFlag);
    h->add_optional_property("areas", &this->m_Areas, m_AreasFlag,
                             m_AreasOutFlag);
    h->add_optional_property("maxNumOfTAs", &this->m_MaxNumOfTAs,
                             m_MaxNumOfTAsFlag, m_MaxNumOfTAsOutFlag);
    h->add_optional_property("maxNumOfTAsForNotAllowedAreas",
                             &this->m_MaxNumOfTAsForNotAllowedAreas,
                             m_MaxNumOfTAsForNotAllowedAreasFlag,
                             m_MaxNumOfTAsForNotAllowedAreasOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const ServiceAreaRestriction &obj) {

    o << "RestrictionType, optional flag is : " << *m_RestrictionTypeOutFlag
      << ", content is : " << obj.m_RestrictionType << std::endl;
    o << "Areas, optional flag is : " << *m_AreasOutFlag << std::endl;
    o << convert2string(std::string("Areas"), obj.m_Areas) << std::endl;

    o << "MaxNumOfTAs, optional flag is : " << *m_MaxNumOfTAsOutFlag
      << ", content is : " << obj.m_MaxNumOfTAs << std::endl;

    o << "MaxNumOfTAsForNotAllowedAreas, optional flag is : "
      << *m_MaxNumOfTAsForNotAllowedAreasOutFlag
      << ", content is : " << obj.m_MaxNumOfTAsForNotAllowedAreas << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// ServiceAreaRestriction members vars : RestrictionType Areas MaxNumOfTAs
  /// MaxNumOfTAsForNotAllowedAreas

  RestrictionType getRestrictionType() const { return m_RestrictionType; }
  void setRestrictionType(RestrictionType const &value) {
    m_RestrictionType = value;
  }

  std::vector<Area> &getAreas() { return m_Areas; }
  void setAreas(std::vector<Area> const &value) { m_Areas = value; }

  int32_t getMaxNumOfTAs() const { return m_MaxNumOfTAs; }
  void setMaxNumOfTAs(int32_t const value) { m_MaxNumOfTAs = value; }

  int32_t getMaxNumOfTAsForNotAllowedAreas() const {
    return m_MaxNumOfTAsForNotAllowedAreas;
  }
  void setMaxNumOfTAsForNotAllowedAreas(int32_t const value) {
    m_MaxNumOfTAsForNotAllowedAreas = value;
  }

public:
  RestrictionType m_RestrictionType;

  unsigned m_RestrictionTypeFlag;
  shared_ptr<unsigned> m_RestrictionTypeOutFlag;
  std::vector<Area> m_Areas;

  unsigned m_AreasFlag;
  shared_ptr<unsigned> m_AreasOutFlag;
  int32_t m_MaxNumOfTAs;

  unsigned m_MaxNumOfTAsFlag;
  shared_ptr<unsigned> m_MaxNumOfTAsOutFlag;
  int32_t m_MaxNumOfTAsForNotAllowedAreas;

  unsigned m_MaxNumOfTAsForNotAllowedAreasFlag;
  shared_ptr<unsigned> m_MaxNumOfTAsForNotAllowedAreasOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceAreaRestriction_H_ */
