/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DnnConfiguration.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




DnnConfiguration::DnnConfiguration()
{
    m_PduSessionTypesIsSet = false;
    m_SscModesIsSet = false;
    m_IwkEpsInd = false;
    m_IwkEpsIndIsSet = false;
    m_r_5gQosProfileIsSet = false;
    m_SessionAmbrIsSet = false;
    m_r_3gppChargingCharacteristics = utility::conversions::to_string_t("");
    m_r_3gppChargingCharacteristicsIsSet = false;
    m_StaticIpAddressIsSet = false;
    m_UpSecurityIsSet = false;
    m_PduSessionContinuityIndIsSet = false;
    m_NiddNefId = utility::conversions::to_string_t("");
    m_NiddNefIdIsSet = false;
    m_NiddInfoIsSet = false;
    m_RedundantSessionAllowed = false;
    m_RedundantSessionAllowedIsSet = false;
    m_AcsInfoIsSet = false;
    m_Ipv4FrameRouteListIsSet = false;
    m_Ipv6FrameRouteListIsSet = false;
    m_AtsssAllowed = false;
    m_AtsssAllowedIsSet = false;
    m_SecondaryAuth = false;
    m_SecondaryAuthIsSet = false;
    m_DnAaaIpAddressAllocation = false;
    m_DnAaaIpAddressAllocationIsSet = false;
    m_DnAaaAddressIsSet = false;
}

DnnConfiguration::~DnnConfiguration()
{
}

void DnnConfiguration::validate()
{
    // TODO: implement validation
}

web::json::value DnnConfiguration::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PduSessionTypesIsSet)
    {
        val[utility::conversions::to_string_t("pduSessionTypes")] = ModelBase::toJson(m_PduSessionTypes);
    }
    if(m_SscModesIsSet)
    {
        val[utility::conversions::to_string_t("sscModes")] = ModelBase::toJson(m_SscModes);
    }
    if(m_IwkEpsIndIsSet)
    {
        val[utility::conversions::to_string_t("iwkEpsInd")] = ModelBase::toJson(m_IwkEpsInd);
    }
    if(m_r_5gQosProfileIsSet)
    {
        val[utility::conversions::to_string_t("5gQosProfile")] = ModelBase::toJson(m_r_5gQosProfile);
    }
    if(m_SessionAmbrIsSet)
    {
        val[utility::conversions::to_string_t("sessionAmbr")] = ModelBase::toJson(m_SessionAmbr);
    }
    if(m_r_3gppChargingCharacteristicsIsSet)
    {
        val[utility::conversions::to_string_t("3gppChargingCharacteristics")] = ModelBase::toJson(m_r_3gppChargingCharacteristics);
    }
    if(m_StaticIpAddressIsSet)
    {
        val[utility::conversions::to_string_t("staticIpAddress")] = ModelBase::toJson(m_StaticIpAddress);
    }
    if(m_UpSecurityIsSet)
    {
        val[utility::conversions::to_string_t("upSecurity")] = ModelBase::toJson(m_UpSecurity);
    }
    if(m_PduSessionContinuityIndIsSet)
    {
        val[utility::conversions::to_string_t("pduSessionContinuityInd")] = ModelBase::toJson(m_PduSessionContinuityInd);
    }
    if(m_NiddNefIdIsSet)
    {
        val[utility::conversions::to_string_t("niddNefId")] = ModelBase::toJson(m_NiddNefId);
    }
    if(m_NiddInfoIsSet)
    {
        val[utility::conversions::to_string_t("niddInfo")] = ModelBase::toJson(m_NiddInfo);
    }
    if(m_RedundantSessionAllowedIsSet)
    {
        val[utility::conversions::to_string_t("redundantSessionAllowed")] = ModelBase::toJson(m_RedundantSessionAllowed);
    }
    if(m_AcsInfoIsSet)
    {
        val[utility::conversions::to_string_t("acsInfo")] = ModelBase::toJson(m_AcsInfo);
    }
    if(m_Ipv4FrameRouteListIsSet)
    {
        val[utility::conversions::to_string_t("ipv4FrameRouteList")] = ModelBase::toJson(m_Ipv4FrameRouteList);
    }
    if(m_Ipv6FrameRouteListIsSet)
    {
        val[utility::conversions::to_string_t("ipv6FrameRouteList")] = ModelBase::toJson(m_Ipv6FrameRouteList);
    }
    if(m_AtsssAllowedIsSet)
    {
        val[utility::conversions::to_string_t("atsssAllowed")] = ModelBase::toJson(m_AtsssAllowed);
    }
    if(m_SecondaryAuthIsSet)
    {
        val[utility::conversions::to_string_t("secondaryAuth")] = ModelBase::toJson(m_SecondaryAuth);
    }
    if(m_DnAaaIpAddressAllocationIsSet)
    {
        val[utility::conversions::to_string_t("dnAaaIpAddressAllocation")] = ModelBase::toJson(m_DnAaaIpAddressAllocation);
    }
    if(m_DnAaaAddressIsSet)
    {
        val[utility::conversions::to_string_t("dnAaaAddress")] = ModelBase::toJson(m_DnAaaAddress);
    }

    return val;
}

bool DnnConfiguration::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pduSessionTypes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pduSessionTypes"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PduSessionTypes> refVal_pduSessionTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_pduSessionTypes);
            setPduSessionTypes(refVal_pduSessionTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sscModes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sscModes"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SscModes> refVal_sscModes;
            ok &= ModelBase::fromJson(fieldValue, refVal_sscModes);
            setSscModes(refVal_sscModes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iwkEpsInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iwkEpsInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_iwkEpsInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_iwkEpsInd);
            setIwkEpsInd(refVal_iwkEpsInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("5gQosProfile")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("5gQosProfile"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscribedDefaultQos> refVal_5gQosProfile;
            ok &= ModelBase::fromJson(fieldValue, refVal_5gQosProfile);
            setR5gQosProfile(refVal_5gQosProfile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sessionAmbr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sessionAmbr"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ambr> refVal_sessionAmbr;
            ok &= ModelBase::fromJson(fieldValue, refVal_sessionAmbr);
            setSessionAmbr(refVal_sessionAmbr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("3gppChargingCharacteristics")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("3gppChargingCharacteristics"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_3gppChargingCharacteristics;
            ok &= ModelBase::fromJson(fieldValue, refVal_3gppChargingCharacteristics);
            setR3gppChargingCharacteristics(refVal_3gppChargingCharacteristics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("staticIpAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("staticIpAddress"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<IpAddress>> refVal_staticIpAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_staticIpAddress);
            setStaticIpAddress(refVal_staticIpAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("upSecurity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("upSecurity"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UpSecurity> refVal_upSecurity;
            ok &= ModelBase::fromJson(fieldValue, refVal_upSecurity);
            setUpSecurity(refVal_upSecurity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pduSessionContinuityInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pduSessionContinuityInd"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PduSessionContinuityInd> refVal_pduSessionContinuityInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_pduSessionContinuityInd);
            setPduSessionContinuityInd(refVal_pduSessionContinuityInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("niddNefId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("niddNefId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_niddNefId;
            ok &= ModelBase::fromJson(fieldValue, refVal_niddNefId);
            setNiddNefId(refVal_niddNefId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("niddInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("niddInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NiddInformation> refVal_niddInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_niddInfo);
            setNiddInfo(refVal_niddInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("redundantSessionAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("redundantSessionAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_redundantSessionAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_redundantSessionAllowed);
            setRedundantSessionAllowed(refVal_redundantSessionAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acsInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acsInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AcsInfo> refVal_acsInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_acsInfo);
            setAcsInfo(refVal_acsInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ipv4FrameRouteList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ipv4FrameRouteList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FrameRouteInfo>> refVal_ipv4FrameRouteList;
            ok &= ModelBase::fromJson(fieldValue, refVal_ipv4FrameRouteList);
            setIpv4FrameRouteList(refVal_ipv4FrameRouteList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ipv6FrameRouteList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ipv6FrameRouteList"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FrameRouteInfo>> refVal_ipv6FrameRouteList;
            ok &= ModelBase::fromJson(fieldValue, refVal_ipv6FrameRouteList);
            setIpv6FrameRouteList(refVal_ipv6FrameRouteList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("atsssAllowed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("atsssAllowed"));
        if(!fieldValue.is_null())
        {
            bool refVal_atsssAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_atsssAllowed);
            setAtsssAllowed(refVal_atsssAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("secondaryAuth")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("secondaryAuth"));
        if(!fieldValue.is_null())
        {
            bool refVal_secondaryAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_secondaryAuth);
            setSecondaryAuth(refVal_secondaryAuth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dnAaaIpAddressAllocation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnAaaIpAddressAllocation"));
        if(!fieldValue.is_null())
        {
            bool refVal_dnAaaIpAddressAllocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnAaaIpAddressAllocation);
            setDnAaaIpAddressAllocation(refVal_dnAaaIpAddressAllocation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dnAaaAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnAaaAddress"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<IpAddress> refVal_dnAaaAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnAaaAddress);
            setDnAaaAddress(refVal_dnAaaAddress);
        }
    }
    return ok;
}

void DnnConfiguration::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PduSessionTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pduSessionTypes"), m_PduSessionTypes));
    }
    if(m_SscModesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sscModes"), m_SscModes));
    }
    if(m_IwkEpsIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iwkEpsInd"), m_IwkEpsInd));
    }
    if(m_r_5gQosProfileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("5gQosProfile"), m_r_5gQosProfile));
    }
    if(m_SessionAmbrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sessionAmbr"), m_SessionAmbr));
    }
    if(m_r_3gppChargingCharacteristicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("3gppChargingCharacteristics"), m_r_3gppChargingCharacteristics));
    }
    if(m_StaticIpAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("staticIpAddress"), m_StaticIpAddress));
    }
    if(m_UpSecurityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("upSecurity"), m_UpSecurity));
    }
    if(m_PduSessionContinuityIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pduSessionContinuityInd"), m_PduSessionContinuityInd));
    }
    if(m_NiddNefIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("niddNefId"), m_NiddNefId));
    }
    if(m_NiddInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("niddInfo"), m_NiddInfo));
    }
    if(m_RedundantSessionAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("redundantSessionAllowed"), m_RedundantSessionAllowed));
    }
    if(m_AcsInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acsInfo"), m_AcsInfo));
    }
    if(m_Ipv4FrameRouteListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ipv4FrameRouteList"), m_Ipv4FrameRouteList));
    }
    if(m_Ipv6FrameRouteListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ipv6FrameRouteList"), m_Ipv6FrameRouteList));
    }
    if(m_AtsssAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("atsssAllowed"), m_AtsssAllowed));
    }
    if(m_SecondaryAuthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("secondaryAuth"), m_SecondaryAuth));
    }
    if(m_DnAaaIpAddressAllocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnAaaIpAddressAllocation"), m_DnAaaIpAddressAllocation));
    }
    if(m_DnAaaAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnAaaAddress"), m_DnAaaAddress));
    }
}

bool DnnConfiguration::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pduSessionTypes")))
    {
        std::shared_ptr<PduSessionTypes> refVal_pduSessionTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pduSessionTypes")), refVal_pduSessionTypes );
        setPduSessionTypes(refVal_pduSessionTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sscModes")))
    {
        std::shared_ptr<SscModes> refVal_sscModes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sscModes")), refVal_sscModes );
        setSscModes(refVal_sscModes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iwkEpsInd")))
    {
        bool refVal_iwkEpsInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iwkEpsInd")), refVal_iwkEpsInd );
        setIwkEpsInd(refVal_iwkEpsInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("5gQosProfile")))
    {
        std::shared_ptr<SubscribedDefaultQos> refVal_5gQosProfile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("5gQosProfile")), refVal_5gQosProfile );
        setR5gQosProfile(refVal_5gQosProfile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sessionAmbr")))
    {
        std::shared_ptr<Ambr> refVal_sessionAmbr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sessionAmbr")), refVal_sessionAmbr );
        setSessionAmbr(refVal_sessionAmbr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("3gppChargingCharacteristics")))
    {
        utility::string_t refVal_3gppChargingCharacteristics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("3gppChargingCharacteristics")), refVal_3gppChargingCharacteristics );
        setR3gppChargingCharacteristics(refVal_3gppChargingCharacteristics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("staticIpAddress")))
    {
        std::vector<std::shared_ptr<IpAddress>> refVal_staticIpAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("staticIpAddress")), refVal_staticIpAddress );
        setStaticIpAddress(refVal_staticIpAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("upSecurity")))
    {
        std::shared_ptr<UpSecurity> refVal_upSecurity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("upSecurity")), refVal_upSecurity );
        setUpSecurity(refVal_upSecurity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pduSessionContinuityInd")))
    {
        std::shared_ptr<PduSessionContinuityInd> refVal_pduSessionContinuityInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pduSessionContinuityInd")), refVal_pduSessionContinuityInd );
        setPduSessionContinuityInd(refVal_pduSessionContinuityInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("niddNefId")))
    {
        utility::string_t refVal_niddNefId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("niddNefId")), refVal_niddNefId );
        setNiddNefId(refVal_niddNefId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("niddInfo")))
    {
        std::shared_ptr<NiddInformation> refVal_niddInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("niddInfo")), refVal_niddInfo );
        setNiddInfo(refVal_niddInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("redundantSessionAllowed")))
    {
        bool refVal_redundantSessionAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("redundantSessionAllowed")), refVal_redundantSessionAllowed );
        setRedundantSessionAllowed(refVal_redundantSessionAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acsInfo")))
    {
        std::shared_ptr<AcsInfo> refVal_acsInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acsInfo")), refVal_acsInfo );
        setAcsInfo(refVal_acsInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ipv4FrameRouteList")))
    {
        std::vector<std::shared_ptr<FrameRouteInfo>> refVal_ipv4FrameRouteList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ipv4FrameRouteList")), refVal_ipv4FrameRouteList );
        setIpv4FrameRouteList(refVal_ipv4FrameRouteList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ipv6FrameRouteList")))
    {
        std::vector<std::shared_ptr<FrameRouteInfo>> refVal_ipv6FrameRouteList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ipv6FrameRouteList")), refVal_ipv6FrameRouteList );
        setIpv6FrameRouteList(refVal_ipv6FrameRouteList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("atsssAllowed")))
    {
        bool refVal_atsssAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("atsssAllowed")), refVal_atsssAllowed );
        setAtsssAllowed(refVal_atsssAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("secondaryAuth")))
    {
        bool refVal_secondaryAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("secondaryAuth")), refVal_secondaryAuth );
        setSecondaryAuth(refVal_secondaryAuth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dnAaaIpAddressAllocation")))
    {
        bool refVal_dnAaaIpAddressAllocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnAaaIpAddressAllocation")), refVal_dnAaaIpAddressAllocation );
        setDnAaaIpAddressAllocation(refVal_dnAaaIpAddressAllocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dnAaaAddress")))
    {
        std::shared_ptr<IpAddress> refVal_dnAaaAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnAaaAddress")), refVal_dnAaaAddress );
        setDnAaaAddress(refVal_dnAaaAddress);
    }
    return ok;
}

std::shared_ptr<PduSessionTypes> DnnConfiguration::getPduSessionTypes() const
{
    return m_PduSessionTypes;
}

void DnnConfiguration::setPduSessionTypes(const std::shared_ptr<PduSessionTypes>& value)
{
    m_PduSessionTypes = value;
    m_PduSessionTypesIsSet = true;
}

bool DnnConfiguration::pduSessionTypesIsSet() const
{
    return m_PduSessionTypesIsSet;
}

void DnnConfiguration::unsetPduSessionTypes()
{
    m_PduSessionTypesIsSet = false;
}
std::shared_ptr<SscModes> DnnConfiguration::getSscModes() const
{
    return m_SscModes;
}

void DnnConfiguration::setSscModes(const std::shared_ptr<SscModes>& value)
{
    m_SscModes = value;
    m_SscModesIsSet = true;
}

bool DnnConfiguration::sscModesIsSet() const
{
    return m_SscModesIsSet;
}

void DnnConfiguration::unsetSscModes()
{
    m_SscModesIsSet = false;
}
bool DnnConfiguration::isIwkEpsInd() const
{
    return m_IwkEpsInd;
}

void DnnConfiguration::setIwkEpsInd(bool value)
{
    m_IwkEpsInd = value;
    m_IwkEpsIndIsSet = true;
}

bool DnnConfiguration::iwkEpsIndIsSet() const
{
    return m_IwkEpsIndIsSet;
}

void DnnConfiguration::unsetIwkEpsInd()
{
    m_IwkEpsIndIsSet = false;
}
std::shared_ptr<SubscribedDefaultQos> DnnConfiguration::getR5gQosProfile() const
{
    return m_r_5gQosProfile;
}

void DnnConfiguration::setR5gQosProfile(const std::shared_ptr<SubscribedDefaultQos>& value)
{
    m_r_5gQosProfile = value;
    m_r_5gQosProfileIsSet = true;
}

bool DnnConfiguration::r5gQosProfileIsSet() const
{
    return m_r_5gQosProfileIsSet;
}

void DnnConfiguration::unsetr_5gQosProfile()
{
    m_r_5gQosProfileIsSet = false;
}
std::shared_ptr<Ambr> DnnConfiguration::getSessionAmbr() const
{
    return m_SessionAmbr;
}

void DnnConfiguration::setSessionAmbr(const std::shared_ptr<Ambr>& value)
{
    m_SessionAmbr = value;
    m_SessionAmbrIsSet = true;
}

bool DnnConfiguration::sessionAmbrIsSet() const
{
    return m_SessionAmbrIsSet;
}

void DnnConfiguration::unsetSessionAmbr()
{
    m_SessionAmbrIsSet = false;
}
utility::string_t DnnConfiguration::getR3gppChargingCharacteristics() const
{
    return m_r_3gppChargingCharacteristics;
}

void DnnConfiguration::setR3gppChargingCharacteristics(const utility::string_t& value)
{
    m_r_3gppChargingCharacteristics = value;
    m_r_3gppChargingCharacteristicsIsSet = true;
}

bool DnnConfiguration::r3gppChargingCharacteristicsIsSet() const
{
    return m_r_3gppChargingCharacteristicsIsSet;
}

void DnnConfiguration::unsetr_3gppChargingCharacteristics()
{
    m_r_3gppChargingCharacteristicsIsSet = false;
}
std::vector<std::shared_ptr<IpAddress>>& DnnConfiguration::getStaticIpAddress()
{
    return m_StaticIpAddress;
}

void DnnConfiguration::setStaticIpAddress(const std::vector<std::shared_ptr<IpAddress>>& value)
{
    m_StaticIpAddress = value;
    m_StaticIpAddressIsSet = true;
}

bool DnnConfiguration::staticIpAddressIsSet() const
{
    return m_StaticIpAddressIsSet;
}

void DnnConfiguration::unsetStaticIpAddress()
{
    m_StaticIpAddressIsSet = false;
}
std::shared_ptr<UpSecurity> DnnConfiguration::getUpSecurity() const
{
    return m_UpSecurity;
}

void DnnConfiguration::setUpSecurity(const std::shared_ptr<UpSecurity>& value)
{
    m_UpSecurity = value;
    m_UpSecurityIsSet = true;
}

bool DnnConfiguration::upSecurityIsSet() const
{
    return m_UpSecurityIsSet;
}

void DnnConfiguration::unsetUpSecurity()
{
    m_UpSecurityIsSet = false;
}
std::shared_ptr<PduSessionContinuityInd> DnnConfiguration::getPduSessionContinuityInd() const
{
    return m_PduSessionContinuityInd;
}

void DnnConfiguration::setPduSessionContinuityInd(const std::shared_ptr<PduSessionContinuityInd>& value)
{
    m_PduSessionContinuityInd = value;
    m_PduSessionContinuityIndIsSet = true;
}

bool DnnConfiguration::pduSessionContinuityIndIsSet() const
{
    return m_PduSessionContinuityIndIsSet;
}

void DnnConfiguration::unsetPduSessionContinuityInd()
{
    m_PduSessionContinuityIndIsSet = false;
}
utility::string_t DnnConfiguration::getNiddNefId() const
{
    return m_NiddNefId;
}

void DnnConfiguration::setNiddNefId(const utility::string_t& value)
{
    m_NiddNefId = value;
    m_NiddNefIdIsSet = true;
}

bool DnnConfiguration::niddNefIdIsSet() const
{
    return m_NiddNefIdIsSet;
}

void DnnConfiguration::unsetNiddNefId()
{
    m_NiddNefIdIsSet = false;
}
std::shared_ptr<NiddInformation> DnnConfiguration::getNiddInfo() const
{
    return m_NiddInfo;
}

void DnnConfiguration::setNiddInfo(const std::shared_ptr<NiddInformation>& value)
{
    m_NiddInfo = value;
    m_NiddInfoIsSet = true;
}

bool DnnConfiguration::niddInfoIsSet() const
{
    return m_NiddInfoIsSet;
}

void DnnConfiguration::unsetNiddInfo()
{
    m_NiddInfoIsSet = false;
}
bool DnnConfiguration::isRedundantSessionAllowed() const
{
    return m_RedundantSessionAllowed;
}

void DnnConfiguration::setRedundantSessionAllowed(bool value)
{
    m_RedundantSessionAllowed = value;
    m_RedundantSessionAllowedIsSet = true;
}

bool DnnConfiguration::redundantSessionAllowedIsSet() const
{
    return m_RedundantSessionAllowedIsSet;
}

void DnnConfiguration::unsetRedundantSessionAllowed()
{
    m_RedundantSessionAllowedIsSet = false;
}
std::shared_ptr<AcsInfo> DnnConfiguration::getAcsInfo() const
{
    return m_AcsInfo;
}

void DnnConfiguration::setAcsInfo(const std::shared_ptr<AcsInfo>& value)
{
    m_AcsInfo = value;
    m_AcsInfoIsSet = true;
}

bool DnnConfiguration::acsInfoIsSet() const
{
    return m_AcsInfoIsSet;
}

void DnnConfiguration::unsetAcsInfo()
{
    m_AcsInfoIsSet = false;
}
std::vector<std::shared_ptr<FrameRouteInfo>>& DnnConfiguration::getIpv4FrameRouteList()
{
    return m_Ipv4FrameRouteList;
}

void DnnConfiguration::setIpv4FrameRouteList(const std::vector<std::shared_ptr<FrameRouteInfo>>& value)
{
    m_Ipv4FrameRouteList = value;
    m_Ipv4FrameRouteListIsSet = true;
}

bool DnnConfiguration::ipv4FrameRouteListIsSet() const
{
    return m_Ipv4FrameRouteListIsSet;
}

void DnnConfiguration::unsetIpv4FrameRouteList()
{
    m_Ipv4FrameRouteListIsSet = false;
}
std::vector<std::shared_ptr<FrameRouteInfo>>& DnnConfiguration::getIpv6FrameRouteList()
{
    return m_Ipv6FrameRouteList;
}

void DnnConfiguration::setIpv6FrameRouteList(const std::vector<std::shared_ptr<FrameRouteInfo>>& value)
{
    m_Ipv6FrameRouteList = value;
    m_Ipv6FrameRouteListIsSet = true;
}

bool DnnConfiguration::ipv6FrameRouteListIsSet() const
{
    return m_Ipv6FrameRouteListIsSet;
}

void DnnConfiguration::unsetIpv6FrameRouteList()
{
    m_Ipv6FrameRouteListIsSet = false;
}
bool DnnConfiguration::isAtsssAllowed() const
{
    return m_AtsssAllowed;
}

void DnnConfiguration::setAtsssAllowed(bool value)
{
    m_AtsssAllowed = value;
    m_AtsssAllowedIsSet = true;
}

bool DnnConfiguration::atsssAllowedIsSet() const
{
    return m_AtsssAllowedIsSet;
}

void DnnConfiguration::unsetAtsssAllowed()
{
    m_AtsssAllowedIsSet = false;
}
bool DnnConfiguration::isSecondaryAuth() const
{
    return m_SecondaryAuth;
}

void DnnConfiguration::setSecondaryAuth(bool value)
{
    m_SecondaryAuth = value;
    m_SecondaryAuthIsSet = true;
}

bool DnnConfiguration::secondaryAuthIsSet() const
{
    return m_SecondaryAuthIsSet;
}

void DnnConfiguration::unsetSecondaryAuth()
{
    m_SecondaryAuthIsSet = false;
}
bool DnnConfiguration::isDnAaaIpAddressAllocation() const
{
    return m_DnAaaIpAddressAllocation;
}

void DnnConfiguration::setDnAaaIpAddressAllocation(bool value)
{
    m_DnAaaIpAddressAllocation = value;
    m_DnAaaIpAddressAllocationIsSet = true;
}

bool DnnConfiguration::dnAaaIpAddressAllocationIsSet() const
{
    return m_DnAaaIpAddressAllocationIsSet;
}

void DnnConfiguration::unsetDnAaaIpAddressAllocation()
{
    m_DnAaaIpAddressAllocationIsSet = false;
}
std::shared_ptr<IpAddress> DnnConfiguration::getDnAaaAddress() const
{
    return m_DnAaaAddress;
}

void DnnConfiguration::setDnAaaAddress(const std::shared_ptr<IpAddress>& value)
{
    m_DnAaaAddress = value;
    m_DnAaaAddressIsSet = true;
}

bool DnnConfiguration::dnAaaAddressIsSet() const
{
    return m_DnAaaAddressIsSet;
}

void DnnConfiguration::unsetDnAaaAddress()
{
    m_DnAaaAddressIsSet = false;
}
}
}
}
}


