/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceTypeUnrelatedClass.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef ServiceTypeUnrelatedClass_H_
#define ServiceTypeUnrelatedClass_H_

#include "CSB_JsonParser.h"
#include "CodeWordInd.h"
#include "GeographicArea.h"
#include "PrivacyCheckRelatedAction.h"
#include "ValidTimePeriod.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ServiceTypeUnrelatedClass
    : public jsonParser::jsonParser<ServiceTypeUnrelatedClass> {
public:
  explicit ServiceTypeUnrelatedClass() {
    // constructor
    m_ServiceType = 0;

    m_ServiceTypeFlag = staticjson::Flags::Default;
    m_ServiceTypeOutFlag.reset(new unsigned);
    *m_ServiceTypeOutFlag.get() = 0;

    m_AllowedGeographicAreaFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AllowedGeographicAreaOutFlag.reset(new unsigned);
    *m_AllowedGeographicAreaOutFlag.get() = 0;

    m_PrivacyCheckRelatedActionFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PrivacyCheckRelatedActionOutFlag.reset(new unsigned);
    *m_PrivacyCheckRelatedActionOutFlag.get() = 0;

    m_CodeWordIndFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CodeWordIndOutFlag.reset(new unsigned);
    *m_CodeWordIndOutFlag.get() = 0;

    m_ValidTimePeriodFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ValidTimePeriodOutFlag.reset(new unsigned);
    *m_ValidTimePeriodOutFlag.get() = 0;

    m_CodeWordListFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CodeWordListOutFlag.reset(new unsigned);
    *m_CodeWordListOutFlag.get() = 0;
  };
  virtual ~ServiceTypeUnrelatedClass(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : ServiceType AllowedGeographicArea
    // PrivacyCheckRelatedAction CodeWordInd ValidTimePeriod CodeWordList
    h->add_property("serviceType", &this->m_ServiceType, m_ServiceTypeFlag);
    h->add_optional_property(
        "allowedGeographicArea", &this->m_AllowedGeographicArea,
        m_AllowedGeographicAreaFlag, m_AllowedGeographicAreaOutFlag);
    h->add_optional_property(
        "privacyCheckRelatedAction", &this->m_PrivacyCheckRelatedAction,
        m_PrivacyCheckRelatedActionFlag, m_PrivacyCheckRelatedActionOutFlag);
    h->add_optional_property("codeWordInd", &this->m_CodeWordInd,
                             m_CodeWordIndFlag, m_CodeWordIndOutFlag);
    h->add_optional_property("validTimePeriod", &this->m_ValidTimePeriod,
                             m_ValidTimePeriodFlag, m_ValidTimePeriodOutFlag);
    h->add_optional_property("codeWordList", &this->m_CodeWordList,
                             m_CodeWordListFlag, m_CodeWordListOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const ServiceTypeUnrelatedClass &obj) {

    o << "ServiceType : " << obj.m_ServiceType << std::endl;
    o << "AllowedGeographicArea, optional flag is : "
      << *m_AllowedGeographicAreaOutFlag << std::endl;
    o << convert2string(std::string("AllowedGeographicArea"),
                        obj.m_AllowedGeographicArea)
      << std::endl;

    o << "PrivacyCheckRelatedAction, optional flag is : "
      << *m_PrivacyCheckRelatedActionOutFlag
      << ", content is : " << obj.m_PrivacyCheckRelatedAction << std::endl;

    o << "CodeWordInd, optional flag is : " << *m_CodeWordIndOutFlag
      << ", content is : " << obj.m_CodeWordInd << std::endl;

    o << "ValidTimePeriod, optional flag is : " << *m_ValidTimePeriodOutFlag
      << ", content is : " << obj.m_ValidTimePeriod << std::endl;
    o << "CodeWordList, optional flag is : " << *m_CodeWordListOutFlag
      << std::endl;
    o << convert2string(std::string("CodeWordList"), obj.m_CodeWordList)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// ServiceTypeUnrelatedClass members vars : ServiceType AllowedGeographicArea
  /// PrivacyCheckRelatedAction CodeWordInd ValidTimePeriod CodeWordList

  int32_t getServiceType() const { return m_ServiceType; }
  void setServiceType(int32_t const value) { m_ServiceType = value; }

  std::vector<GeographicArea> &getAllowedGeographicArea() {
    return m_AllowedGeographicArea;
  }
  void setAllowedGeographicArea(std::vector<GeographicArea> const &value) {
    m_AllowedGeographicArea = value;
  }

  PrivacyCheckRelatedAction getPrivacyCheckRelatedAction() const {
    return m_PrivacyCheckRelatedAction;
  }
  void setPrivacyCheckRelatedAction(PrivacyCheckRelatedAction const &value) {
    m_PrivacyCheckRelatedAction = value;
  }

  CodeWordInd getCodeWordInd() const { return m_CodeWordInd; }
  void setCodeWordInd(CodeWordInd const &value) { m_CodeWordInd = value; }

  ValidTimePeriod getValidTimePeriod() const { return m_ValidTimePeriod; }
  void setValidTimePeriod(ValidTimePeriod const &value) {
    m_ValidTimePeriod = value;
  }

  std::vector<std::string> &getCodeWordList() { return m_CodeWordList; }
  void setCodeWordList(std::vector<std::string> const &value) {
    m_CodeWordList = value;
  }

public:
  int32_t m_ServiceType;

  unsigned m_ServiceTypeFlag;
  shared_ptr<unsigned> m_ServiceTypeOutFlag;
  std::vector<GeographicArea> m_AllowedGeographicArea;

  unsigned m_AllowedGeographicAreaFlag;
  shared_ptr<unsigned> m_AllowedGeographicAreaOutFlag;
  PrivacyCheckRelatedAction m_PrivacyCheckRelatedAction;

  unsigned m_PrivacyCheckRelatedActionFlag;
  shared_ptr<unsigned> m_PrivacyCheckRelatedActionOutFlag;
  CodeWordInd m_CodeWordInd;

  unsigned m_CodeWordIndFlag;
  shared_ptr<unsigned> m_CodeWordIndOutFlag;
  ValidTimePeriod m_ValidTimePeriod;

  unsigned m_ValidTimePeriodFlag;
  shared_ptr<unsigned> m_ValidTimePeriodOutFlag;
  std::vector<std::string> m_CodeWordList;

  unsigned m_CodeWordListFlag;
  shared_ptr<unsigned> m_CodeWordListOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceTypeUnrelatedClass_H_ */
