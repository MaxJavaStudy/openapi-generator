/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SdmSubscription.h
 *
 * 
 */

#ifndef SdmSubscription_H_
#define SdmSubscription_H_


#include "SubscriptionDataSets.h"
#include "ContextInfo.h"
#include <string>
#include "PlmnId.h"
#include "Snssai.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SdmSubscription: public jsonParser::jsonParser<SdmSubscription>
{
public:
    explicit SdmSubscription(){
        // constructor
        m_NfInstanceId = "";
        
            m_NfInstanceIdFlag = staticjson::Flags::Default;
m_ImplicitUnsubscribe = false;
        
            m_ImplicitUnsubscribeFlag = (staticjson::Flags::Optional);
m_Expires = "";
        
            m_ExpiresFlag = (staticjson::Flags::Optional);
m_CallbackReference = "";
        
            m_CallbackReferenceFlag = staticjson::Flags::Default;
m_AmfServiceName = "";
        
            m_AmfServiceNameFlag = (staticjson::Flags::Optional);

            m_MonitoredResourceUrisFlag = staticjson::Flags::Default;

            m_SingleNssaiFlag = (staticjson::Flags::Optional);
m_Dnn = "";
        
            m_DnnFlag = (staticjson::Flags::Optional);
m_SubscriptionId = "";
        
            m_SubscriptionIdFlag = (staticjson::Flags::Optional);

            m_PlmnIdFlag = (staticjson::Flags::Optional);
m_ImmediateReport = false;
        
            m_ImmediateReportFlag = (staticjson::Flags::Optional);

            m_ReportFlag = (staticjson::Flags::Optional);
m_SupportedFeatures = "";
        
            m_SupportedFeaturesFlag = (staticjson::Flags::Optional);

            m_ContextInfoFlag = (staticjson::Flags::Optional);
    };
    virtual ~SdmSubscription(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : NfInstanceId ImplicitUnsubscribe Expires CallbackReference AmfServiceName MonitoredResourceUris SingleNssai Dnn SubscriptionId PlmnId ImmediateReport Report SupportedFeatures ContextInfo 
        h->add_property("nfInstanceId", &this->m_NfInstanceId, m_NfInstanceIdFlag);
        h->add_property("implicitUnsubscribe", &this->m_ImplicitUnsubscribe, m_ImplicitUnsubscribeFlag);
        h->add_property("expires", &this->m_Expires, m_ExpiresFlag);
        h->add_property("callbackReference", &this->m_CallbackReference, m_CallbackReferenceFlag);
        h->add_property("amfServiceName", &this->m_AmfServiceName, m_AmfServiceNameFlag);
        h->add_property("monitoredResourceUris", &this->m_MonitoredResourceUris, m_MonitoredResourceUrisFlag);
        h->add_property("singleNssai", &this->m_SingleNssai, m_SingleNssaiFlag);
        h->add_property("dnn", &this->m_Dnn, m_DnnFlag);
        h->add_property("subscriptionId", &this->m_SubscriptionId, m_SubscriptionIdFlag);
        h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);
        h->add_property("immediateReport", &this->m_ImmediateReport, m_ImmediateReportFlag);
        h->add_property("report", &this->m_Report, m_ReportFlag);
        h->add_property("supportedFeatures", &this->m_SupportedFeatures, m_SupportedFeaturesFlag);
        h->add_property("contextInfo", &this->m_ContextInfo, m_ContextInfoFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SdmSubscription& obj)
    {
        
        o << "NfInstanceId : " << obj.m_NfInstanceId << std::endl;

        o << "ImplicitUnsubscribe : " << obj.m_ImplicitUnsubscribe << std::endl;

        o << "Expires : " << obj.m_Expires << std::endl;

        o << "CallbackReference : " << obj.m_CallbackReference << std::endl;

        o << "AmfServiceName : " << obj.m_AmfServiceName << std::endl;
        o<< convert2string(std::string("MonitoredResourceUris"), obj.m_MonitoredResourceUris) <<std::endl;
       
        o << "SingleNssai : " << obj.m_SingleNssai << std::endl;

        o << "Dnn : " << obj.m_Dnn << std::endl;

        o << "SubscriptionId : " << obj.m_SubscriptionId << std::endl;

        o << "PlmnId : " << obj.m_PlmnId << std::endl;

        o << "ImmediateReport : " << obj.m_ImmediateReport << std::endl;

        o << "Report : " << obj.m_Report << std::endl;

        o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;

        o << "ContextInfo : " << obj.m_ContextInfo << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// SdmSubscription members vars : NfInstanceId ImplicitUnsubscribe Expires CallbackReference AmfServiceName MonitoredResourceUris SingleNssai Dnn SubscriptionId PlmnId ImmediateReport Report SupportedFeatures ContextInfo 

    std::string  getNfInstanceId() const
    {
        return m_NfInstanceId;
    }
    void  setNfInstanceId(std::string const& value)
    {
        m_NfInstanceId = value;
    }

bool  isImplicitUnsubscribe() const
    {
        return m_ImplicitUnsubscribe;
    }
    void  setImplicitUnsubscribe(bool const value)
    {
        m_ImplicitUnsubscribe = value;
    }

std::string  getExpires() const
    {
        return m_Expires;
    }
    void  setExpires(std::string const& value)
    {
        m_Expires = value;
    }

std::string  getCallbackReference() const
    {
        return m_CallbackReference;
    }
    void  setCallbackReference(std::string const& value)
    {
        m_CallbackReference = value;
    }

std::string  getAmfServiceName() const
    {
        return m_AmfServiceName;
    }
    void  setAmfServiceName(std::string const& value)
    {
        m_AmfServiceName = value;
    }

std::vector<std::string>&  getMonitoredResourceUris()
    {
        return m_MonitoredResourceUris;
    }
    void  setMonitoredResourceUris(std::vector<std::string> const& value)
    {
        m_MonitoredResourceUris = value;
    }

Snssai  getSingleNssai() const
    {
        return m_SingleNssai;
    }
    void  setSingleNssai(Snssai const& value)
    {
        m_SingleNssai = value;
    }

std::string  getDnn() const
    {
        return m_Dnn;
    }
    void  setDnn(std::string const& value)
    {
        m_Dnn = value;
    }

std::string  getSubscriptionId() const
    {
        return m_SubscriptionId;
    }
    void  setSubscriptionId(std::string const& value)
    {
        m_SubscriptionId = value;
    }

PlmnId  getPlmnId() const
    {
        return m_PlmnId;
    }
    void  setPlmnId(PlmnId const& value)
    {
        m_PlmnId = value;
    }

bool  isImmediateReport() const
    {
        return m_ImmediateReport;
    }
    void  setImmediateReport(bool const value)
    {
        m_ImmediateReport = value;
    }

SubscriptionDataSets  getReport() const
    {
        return m_Report;
    }
    void  setReport(SubscriptionDataSets const& value)
    {
        m_Report = value;
    }

std::string  getSupportedFeatures() const
    {
        return m_SupportedFeatures;
    }
    void  setSupportedFeatures(std::string const& value)
    {
        m_SupportedFeatures = value;
    }

ContextInfo  getContextInfo() const
    {
        return m_ContextInfo;
    }
    void  setContextInfo(ContextInfo const& value)
    {
        m_ContextInfo = value;
    }



    
public:
    std::string m_NfInstanceId;
    
    unsigned m_NfInstanceIdFlag;
    bool m_ImplicitUnsubscribe;
    
    unsigned m_ImplicitUnsubscribeFlag;
    std::string m_Expires;
    
    unsigned m_ExpiresFlag;
    std::string m_CallbackReference;
    
    unsigned m_CallbackReferenceFlag;
    std::string m_AmfServiceName;
    
    unsigned m_AmfServiceNameFlag;
    std::vector<std::string> m_MonitoredResourceUris;
    
    unsigned m_MonitoredResourceUrisFlag;
    Snssai m_SingleNssai;
    
    unsigned m_SingleNssaiFlag;
    std::string m_Dnn;
    
    unsigned m_DnnFlag;
    std::string m_SubscriptionId;
    
    unsigned m_SubscriptionIdFlag;
    PlmnId m_PlmnId;
    
    unsigned m_PlmnIdFlag;
    bool m_ImmediateReport;
    
    unsigned m_ImmediateReportFlag;
    SubscriptionDataSets m_Report;
    
    unsigned m_ReportFlag;
    std::string m_SupportedFeatures;
    
    unsigned m_SupportedFeaturesFlag;
    ContextInfo m_ContextInfo;
    
    unsigned m_ContextInfoFlag;
  
};
}
}
}
}

#endif /* SdmSubscription_H_ */
