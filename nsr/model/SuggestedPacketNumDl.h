/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SuggestedPacketNumDl.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SuggestedPacketNumDl_H_
#define SuggestedPacketNumDl_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SuggestedPacketNumDl
    : public jsonParser::jsonParser<SuggestedPacketNumDl> {
public:
  explicit SuggestedPacketNumDl() {
    // constructor
    m_SuggestedPacketNumDl = 0;

    m_SuggestedPacketNumDlFlag = staticjson::Flags::Default;
    m_SuggestedPacketNumDlOutFlag.reset(new unsigned);
    *m_SuggestedPacketNumDlOutFlag.get() = 0;
    m_ValidityTime = "";

    m_ValidityTimeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ValidityTimeOutFlag.reset(new unsigned);
    *m_ValidityTimeOutFlag.get() = 0;
  };
  virtual ~SuggestedPacketNumDl(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SuggestedPacketNumDl ValidityTime
    h->add_property("suggestedPacketNumDl", &this->m_SuggestedPacketNumDl,
                    m_SuggestedPacketNumDlFlag);
    h->add_optional_property("validityTime", &this->m_ValidityTime,
                             m_ValidityTimeFlag, m_ValidityTimeOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const SuggestedPacketNumDl &obj) {

    o << "SuggestedPacketNumDl : " << obj.m_SuggestedPacketNumDl << std::endl;

    o << "ValidityTime, optional flag is : " << *m_ValidityTimeOutFlag
      << ", content is : " << obj.m_ValidityTime << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SuggestedPacketNumDl members vars : SuggestedPacketNumDl ValidityTime

  int32_t getSuggestedPacketNumDl() const { return m_SuggestedPacketNumDl; }
  void setSuggestedPacketNumDl(int32_t const value) {
    m_SuggestedPacketNumDl = value;
  }

  std::string getValidityTime() const { return m_ValidityTime; }
  void setValidityTime(std::string const &value) { m_ValidityTime = value; }

public:
  int32_t m_SuggestedPacketNumDl;

  unsigned m_SuggestedPacketNumDlFlag;
  shared_ptr<unsigned> m_SuggestedPacketNumDlOutFlag;
  std::string m_ValidityTime;

  unsigned m_ValidityTimeFlag;
  shared_ptr<unsigned> m_ValidityTimeOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SuggestedPacketNumDl_H_ */
