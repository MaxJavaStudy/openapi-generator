/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GNbId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GNbId::GNbId()
{
    m_BitLength = 0;
    m_BitLengthIsSet = false;
    m_GNBValue = utility::conversions::to_string_t("");
    m_GNBValueIsSet = false;
}

GNbId::~GNbId()
{
}

void GNbId::validate()
{
    // TODO: implement validation
}

web::json::value GNbId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BitLengthIsSet)
    {
        val[utility::conversions::to_string_t("bitLength")] = ModelBase::toJson(m_BitLength);
    }
    if(m_GNBValueIsSet)
    {
        val[utility::conversions::to_string_t("gNBValue")] = ModelBase::toJson(m_GNBValue);
    }

    return val;
}

bool GNbId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bitLength")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bitLength"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bitLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_bitLength);
            setBitLength(refVal_bitLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gNBValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gNBValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_gNBValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_gNBValue);
            setGNBValue(refVal_gNBValue);
        }
    }
    return ok;
}

void GNbId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BitLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bitLength"), m_BitLength));
    }
    if(m_GNBValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gNBValue"), m_GNBValue));
    }
}

bool GNbId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bitLength")))
    {
        int32_t refVal_bitLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bitLength")), refVal_bitLength );
        setBitLength(refVal_bitLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gNBValue")))
    {
        utility::string_t refVal_gNBValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gNBValue")), refVal_gNBValue );
        setGNBValue(refVal_gNBValue);
    }
    return ok;
}

int32_t GNbId::getBitLength() const
{
    return m_BitLength;
}

void GNbId::setBitLength(int32_t value)
{
    m_BitLength = value;
    m_BitLengthIsSet = true;
}

bool GNbId::bitLengthIsSet() const
{
    return m_BitLengthIsSet;
}

void GNbId::unsetBitLength()
{
    m_BitLengthIsSet = false;
}
utility::string_t GNbId::getGNBValue() const
{
    return m_GNBValue;
}

void GNbId::setGNBValue(const utility::string_t& value)
{
    m_GNBValue = value;
    m_GNBValueIsSet = true;
}

bool GNbId::gNBValueIsSet() const
{
    return m_GNBValueIsSet;
}

void GNbId::unsetGNBValue()
{
    m_GNBValueIsSet = false;
}
}
}
}
}


