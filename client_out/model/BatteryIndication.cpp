/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BatteryIndication.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BatteryIndication::BatteryIndication()
{
    m_BatteryInd = false;
    m_BatteryIndIsSet = false;
    m_ReplaceableInd = false;
    m_ReplaceableIndIsSet = false;
    m_RechargeableInd = false;
    m_RechargeableIndIsSet = false;
}

BatteryIndication::~BatteryIndication()
{
}

void BatteryIndication::validate()
{
    // TODO: implement validation
}

web::json::value BatteryIndication::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BatteryIndIsSet)
    {
        val[utility::conversions::to_string_t("batteryInd")] = ModelBase::toJson(m_BatteryInd);
    }
    if(m_ReplaceableIndIsSet)
    {
        val[utility::conversions::to_string_t("replaceableInd")] = ModelBase::toJson(m_ReplaceableInd);
    }
    if(m_RechargeableIndIsSet)
    {
        val[utility::conversions::to_string_t("rechargeableInd")] = ModelBase::toJson(m_RechargeableInd);
    }

    return val;
}

bool BatteryIndication::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("batteryInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("batteryInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_batteryInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_batteryInd);
            setBatteryInd(refVal_batteryInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("replaceableInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("replaceableInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_replaceableInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_replaceableInd);
            setReplaceableInd(refVal_replaceableInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rechargeableInd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rechargeableInd"));
        if(!fieldValue.is_null())
        {
            bool refVal_rechargeableInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_rechargeableInd);
            setRechargeableInd(refVal_rechargeableInd);
        }
    }
    return ok;
}

void BatteryIndication::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BatteryIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("batteryInd"), m_BatteryInd));
    }
    if(m_ReplaceableIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("replaceableInd"), m_ReplaceableInd));
    }
    if(m_RechargeableIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rechargeableInd"), m_RechargeableInd));
    }
}

bool BatteryIndication::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("batteryInd")))
    {
        bool refVal_batteryInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("batteryInd")), refVal_batteryInd );
        setBatteryInd(refVal_batteryInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("replaceableInd")))
    {
        bool refVal_replaceableInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("replaceableInd")), refVal_replaceableInd );
        setReplaceableInd(refVal_replaceableInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rechargeableInd")))
    {
        bool refVal_rechargeableInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rechargeableInd")), refVal_rechargeableInd );
        setRechargeableInd(refVal_rechargeableInd);
    }
    return ok;
}

bool BatteryIndication::isBatteryInd() const
{
    return m_BatteryInd;
}

void BatteryIndication::setBatteryInd(bool value)
{
    m_BatteryInd = value;
    m_BatteryIndIsSet = true;
}

bool BatteryIndication::batteryIndIsSet() const
{
    return m_BatteryIndIsSet;
}

void BatteryIndication::unsetBatteryInd()
{
    m_BatteryIndIsSet = false;
}
bool BatteryIndication::isReplaceableInd() const
{
    return m_ReplaceableInd;
}

void BatteryIndication::setReplaceableInd(bool value)
{
    m_ReplaceableInd = value;
    m_ReplaceableIndIsSet = true;
}

bool BatteryIndication::replaceableIndIsSet() const
{
    return m_ReplaceableIndIsSet;
}

void BatteryIndication::unsetReplaceableInd()
{
    m_ReplaceableIndIsSet = false;
}
bool BatteryIndication::isRechargeableInd() const
{
    return m_RechargeableInd;
}

void BatteryIndication::setRechargeableInd(bool value)
{
    m_RechargeableInd = value;
    m_RechargeableIndIsSet = true;
}

bool BatteryIndication::rechargeableIndIsSet() const
{
    return m_RechargeableIndIsSet;
}

void BatteryIndication::unsetRechargeableInd()
{
    m_RechargeableIndIsSet = false;
}
}
}
}
}


