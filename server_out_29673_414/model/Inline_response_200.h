/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Inline_response_200.h
 *
 *
 */

#ifndef Inline_response_200_H_
#define Inline_response_200_H_

#include "DicEntryData.h"
#include "jsonParser.hpp"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class Inline_response_200 : public jsonParser::jsonParser<Inline_response_200> {
public:
  explicit Inline_response_200() {
    // constructor

    m_JsonDataFlag = (staticjson::Flags::Optional);

    m_BinaryDataUeRadioCapability5GSFlag = (staticjson::Flags::Optional);

    m_BinaryDataUeRadioCapabilityEPSFlag = (staticjson::Flags::Optional);
  };
  virtual ~Inline_response_200(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : JsonData
    // BinaryDataUeRadioCapability5GS BinaryDataUeRadioCapabilityEPS
    h->add_property("jsonData", &this->m_JsonData, m_JsonDataFlag);
    h->add_property("binaryDataUeRadioCapability5GS",
                    &this->m_BinaryDataUeRadioCapability5GS,
                    m_BinaryDataUeRadioCapability5GSFlag);
    h->add_property("binaryDataUeRadioCapabilityEPS",
                    &this->m_BinaryDataUeRadioCapabilityEPS,
                    m_BinaryDataUeRadioCapabilityEPSFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const Inline_response_200 &obj) {

    o << "JsonData : " << obj.m_JsonData << std::endl;

    o << "BinaryDataUeRadioCapability5GS : "
      << obj.m_BinaryDataUeRadioCapability5GS << std::endl;

    o << "BinaryDataUeRadioCapabilityEPS : "
      << obj.m_BinaryDataUeRadioCapabilityEPS << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// Inline_response_200 members vars : JsonData BinaryDataUeRadioCapability5GS
  /// BinaryDataUeRadioCapabilityEPS

  DicEntryData getJsonData() const { return m_JsonData; }
  void setJsonData(DicEntryData const &value) { m_JsonData = value; }

  std::string getBinaryDataUeRadioCapability5GS() const {
    return m_BinaryDataUeRadioCapability5GS;
  }
  void setBinaryDataUeRadioCapability5GS(std::string const &value) {
    m_BinaryDataUeRadioCapability5GS = value;
  }

  std::string getBinaryDataUeRadioCapabilityEPS() const {
    return m_BinaryDataUeRadioCapabilityEPS;
  }
  void setBinaryDataUeRadioCapabilityEPS(std::string const &value) {
    m_BinaryDataUeRadioCapabilityEPS = value;
  }

public:
  DicEntryData m_JsonData;

  unsigned m_JsonDataFlag;
  std::string m_BinaryDataUeRadioCapability5GS;

  unsigned m_BinaryDataUeRadioCapability5GSFlag;
  std::string m_BinaryDataUeRadioCapabilityEPS;

  unsigned m_BinaryDataUeRadioCapabilityEPSFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Inline_response_200_H_ */
