/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SessionManagementSubscriptionData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SessionManagementSubscriptionData_H_
#define SessionManagementSubscriptionData_H_

#include "CSB_JsonParser.h"
#include "DnnConfiguration.h"
#include "OdbPacketServices.h"
#include "Snssai.h"
#include <map>
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SessionManagementSubscriptionData
    : public jsonParser::jsonParser<SessionManagementSubscriptionData> {
public:
  explicit SessionManagementSubscriptionData() {
    // constructor

    m_SingleNssaiFlag = staticjson::Flags::Default;
    m_SingleNssaiOutFlag.reset(new unsigned);
    *m_SingleNssaiOutFlag.get() = 0;

    m_DnnConfigurationsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DnnConfigurationsOutFlag.reset(new unsigned);
    *m_DnnConfigurationsOutFlag.get() = 0;

    m_InternalGroupIdsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_InternalGroupIdsOutFlag.reset(new unsigned);
    *m_InternalGroupIdsOutFlag.get() = 0;
    m_SharedDnnConfigurationsId = "";

    m_SharedDnnConfigurationsIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedDnnConfigurationsIdOutFlag.reset(new unsigned);
    *m_SharedDnnConfigurationsIdOutFlag.get() = 0;

    m_OdbPacketServicesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_OdbPacketServicesOutFlag.reset(new unsigned);
    *m_OdbPacketServicesOutFlag.get() = 0;
  };
  virtual ~SessionManagementSubscriptionData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SingleNssai DnnConfigurations
    // InternalGroupIds SharedDnnConfigurationsId OdbPacketServices
    h->add_property("singleNssai", &this->m_SingleNssai, m_SingleNssaiFlag);
    h->add_optional_property("dnnConfigurations", &this->m_DnnConfigurations,
                             m_DnnConfigurationsFlag,
                             m_DnnConfigurationsOutFlag);
    h->add_optional_property("internalGroupIds", &this->m_InternalGroupIds,
                             m_InternalGroupIdsFlag, m_InternalGroupIdsOutFlag);
    h->add_optional_property(
        "sharedDnnConfigurationsId", &this->m_SharedDnnConfigurationsId,
        m_SharedDnnConfigurationsIdFlag, m_SharedDnnConfigurationsIdOutFlag);
    h->add_optional_property("odbPacketServices", &this->m_OdbPacketServices,
                             m_OdbPacketServicesFlag,
                             m_OdbPacketServicesOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &
  operator<<(std::ostream &o, const SessionManagementSubscriptionData &obj) {

    o << "SingleNssai : " << obj.m_SingleNssai << std::endl;
    o << "DnnConfigurations, optional flag is : " << *m_DnnConfigurationsOutFlag
      << std::endl;
    o << convert2string(std::string("DnnConfigurations"),
                        obj.m_DnnConfigurations)
      << std::endl;
    o << "InternalGroupIds, optional flag is : " << *m_InternalGroupIdsOutFlag
      << std::endl;
    o << convert2string(std::string("InternalGroupIds"), obj.m_InternalGroupIds)
      << std::endl;

    o << "SharedDnnConfigurationsId, optional flag is : "
      << *m_SharedDnnConfigurationsIdOutFlag
      << ", content is : " << obj.m_SharedDnnConfigurationsId << std::endl;

    o << "OdbPacketServices, optional flag is : " << *m_OdbPacketServicesOutFlag
      << ", content is : " << obj.m_OdbPacketServices << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SessionManagementSubscriptionData members vars : SingleNssai
  /// DnnConfigurations InternalGroupIds SharedDnnConfigurationsId
  /// OdbPacketServices

  Snssai getSingleNssai() const { return m_SingleNssai; }
  void setSingleNssai(Snssai const &value) { m_SingleNssai = value; }

  std::map<std::string, DnnConfiguration> &getDnnConfigurations() {
    return m_DnnConfigurations;
  }
  void
  setDnnConfigurations(std::map<std::string, DnnConfiguration> const &value) {
    m_DnnConfigurations = value;
  }

  std::vector<std::string> &getInternalGroupIds() { return m_InternalGroupIds; }
  void setInternalGroupIds(std::vector<std::string> const &value) {
    m_InternalGroupIds = value;
  }

  std::string getSharedDnnConfigurationsId() const {
    return m_SharedDnnConfigurationsId;
  }
  void setSharedDnnConfigurationsId(std::string const &value) {
    m_SharedDnnConfigurationsId = value;
  }

  OdbPacketServices getOdbPacketServices() const { return m_OdbPacketServices; }
  void setOdbPacketServices(OdbPacketServices const &value) {
    m_OdbPacketServices = value;
  }

public:
  Snssai m_SingleNssai;

  unsigned m_SingleNssaiFlag;
  shared_ptr<unsigned> m_SingleNssaiOutFlag;
  std::map<std::string, DnnConfiguration> m_DnnConfigurations;

  unsigned m_DnnConfigurationsFlag;
  shared_ptr<unsigned> m_DnnConfigurationsOutFlag;
  std::vector<std::string> m_InternalGroupIds;

  unsigned m_InternalGroupIdsFlag;
  shared_ptr<unsigned> m_InternalGroupIdsOutFlag;
  std::string m_SharedDnnConfigurationsId;

  unsigned m_SharedDnnConfigurationsIdFlag;
  shared_ptr<unsigned> m_SharedDnnConfigurationsIdOutFlag;
  OdbPacketServices m_OdbPacketServices;

  unsigned m_OdbPacketServicesFlag;
  shared_ptr<unsigned> m_OdbPacketServicesOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SessionManagementSubscriptionData_H_ */
