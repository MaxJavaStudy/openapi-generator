/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Tai.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef Tai_H_
#define Tai_H_

#include "CSB_JsonParser.h"
#include "PlmnId.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class Tai : public jsonParser::jsonParser<Tai> {
public:
  explicit Tai() {
    // constructor

    m_PlmnIdFlag = staticjson::Flags::Default;
    m_PlmnIdOutFlag.reset(new unsigned);
    *m_PlmnIdOutFlag.get() = 0;
    m_Tac = "";

    m_TacFlag = staticjson::Flags::Default;
    m_TacOutFlag.reset(new unsigned);
    *m_TacOutFlag.get() = 0;
    m_Nid = "";

    m_NidFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_NidOutFlag.reset(new unsigned);
    *m_NidOutFlag.get() = 0;
  };
  virtual ~Tai(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : PlmnId Tac Nid
    h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);
    h->add_property("tac", &this->m_Tac, m_TacFlag);
    h->add_optional_property("nid", &this->m_Nid, m_NidFlag, m_NidOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const Tai &obj) {

    o << "PlmnId : " << obj.m_PlmnId << std::endl;

    o << "Tac : " << obj.m_Tac << std::endl;

    o << "Nid, optional flag is : " << *m_NidOutFlag
      << ", content is : " << obj.m_Nid << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// Tai members vars : PlmnId Tac Nid

  PlmnId getPlmnId() const { return m_PlmnId; }
  void setPlmnId(PlmnId const &value) { m_PlmnId = value; }

  std::string getTac() const { return m_Tac; }
  void setTac(std::string const &value) { m_Tac = value; }

  std::string getNid() const { return m_Nid; }
  void setNid(std::string const &value) { m_Nid = value; }

public:
  PlmnId m_PlmnId;

  unsigned m_PlmnIdFlag;
  shared_ptr<unsigned> m_PlmnIdOutFlag;
  std::string m_Tac;

  unsigned m_TacFlag;
  shared_ptr<unsigned> m_TacOutFlag;
  std::string m_Nid;

  unsigned m_NidFlag;
  shared_ptr<unsigned> m_NidOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Tai_H_ */
