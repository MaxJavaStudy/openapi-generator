/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeContextInSmfData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef UeContextInSmfData_H_
#define UeContextInSmfData_H_

#include "CSB_JsonParser.h"
#include "EmergencyInfo.h"
#include "PduSession.h"
#include "PgwInfo.h"
#include <map>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UeContextInSmfData : public jsonParser::jsonParser<UeContextInSmfData> {
public:
  explicit UeContextInSmfData() {
    // constructor

    m_PduSessionsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PduSessionsOutFlag.reset(new unsigned);
    *m_PduSessionsOutFlag.get() = 0;

    m_PgwInfoFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PgwInfoOutFlag.reset(new unsigned);
    *m_PgwInfoOutFlag.get() = 0;

    m_EmergencyInfoFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_EmergencyInfoOutFlag.reset(new unsigned);
    *m_EmergencyInfoOutFlag.get() = 0;
  };
  virtual ~UeContextInSmfData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : PduSessions PgwInfo EmergencyInfo
    h->add_optional_property("pduSessions", &this->m_PduSessions,
                             m_PduSessionsFlag, m_PduSessionsOutFlag);
    h->add_optional_property("pgwInfo", &this->m_PgwInfo, m_PgwInfoFlag,
                             m_PgwInfoOutFlag);
    h->add_optional_property("emergencyInfo", &this->m_EmergencyInfo,
                             m_EmergencyInfoFlag, m_EmergencyInfoOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const UeContextInSmfData &obj) {
    o << "PduSessions, optional flag is : " << *m_PduSessionsOutFlag
      << std::endl;
    o << convert2string(std::string("PduSessions"), obj.m_PduSessions)
      << std::endl;
    o << "PgwInfo, optional flag is : " << *m_PgwInfoOutFlag << std::endl;
    o << convert2string(std::string("PgwInfo"), obj.m_PgwInfo) << std::endl;

    o << "EmergencyInfo, optional flag is : " << *m_EmergencyInfoOutFlag
      << ", content is : " << obj.m_EmergencyInfo << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UeContextInSmfData members vars : PduSessions PgwInfo EmergencyInfo

  std::map<std::string, PduSession> &getPduSessions() { return m_PduSessions; }
  void setPduSessions(std::map<std::string, PduSession> const &value) {
    m_PduSessions = value;
  }

  std::vector<PgwInfo> &getPgwInfo() { return m_PgwInfo; }
  void setPgwInfo(std::vector<PgwInfo> const &value) { m_PgwInfo = value; }

  EmergencyInfo getEmergencyInfo() const { return m_EmergencyInfo; }
  void setEmergencyInfo(EmergencyInfo const &value) { m_EmergencyInfo = value; }

public:
  std::map<std::string, PduSession> m_PduSessions;

  unsigned m_PduSessionsFlag;
  shared_ptr<unsigned> m_PduSessionsOutFlag;
  std::vector<PgwInfo> m_PgwInfo;

  unsigned m_PgwInfoFlag;
  shared_ptr<unsigned> m_PgwInfoOutFlag;
  EmergencyInfo m_EmergencyInfo;

  unsigned m_EmergencyInfoFlag;
  shared_ptr<unsigned> m_EmergencyInfoOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeContextInSmfData_H_ */
