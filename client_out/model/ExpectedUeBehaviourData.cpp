/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExpectedUeBehaviourData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ExpectedUeBehaviourData::ExpectedUeBehaviourData()
{
    m_StationaryIndicationIsSet = false;
    m_CommunicationDurationTime = 0;
    m_CommunicationDurationTimeIsSet = false;
    m_PeriodicTime = 0;
    m_PeriodicTimeIsSet = false;
    m_ScheduledCommunicationTimeIsSet = false;
    m_ScheduledCommunicationTypeIsSet = false;
    m_ExpectedUmtsIsSet = false;
    m_TrafficProfileIsSet = false;
    m_BatteryIndicationIsSet = false;
    m_ValidityTime = utility::datetime();
    m_ValidityTimeIsSet = false;
}

ExpectedUeBehaviourData::~ExpectedUeBehaviourData()
{
}

void ExpectedUeBehaviourData::validate()
{
    // TODO: implement validation
}

web::json::value ExpectedUeBehaviourData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StationaryIndicationIsSet)
    {
        val[utility::conversions::to_string_t("stationaryIndication")] = ModelBase::toJson(m_StationaryIndication);
    }
    if(m_CommunicationDurationTimeIsSet)
    {
        val[utility::conversions::to_string_t("communicationDurationTime")] = ModelBase::toJson(m_CommunicationDurationTime);
    }
    if(m_PeriodicTimeIsSet)
    {
        val[utility::conversions::to_string_t("periodicTime")] = ModelBase::toJson(m_PeriodicTime);
    }
    if(m_ScheduledCommunicationTimeIsSet)
    {
        val[utility::conversions::to_string_t("scheduledCommunicationTime")] = ModelBase::toJson(m_ScheduledCommunicationTime);
    }
    if(m_ScheduledCommunicationTypeIsSet)
    {
        val[utility::conversions::to_string_t("scheduledCommunicationType")] = ModelBase::toJson(m_ScheduledCommunicationType);
    }
    if(m_ExpectedUmtsIsSet)
    {
        val[utility::conversions::to_string_t("expectedUmts")] = ModelBase::toJson(m_ExpectedUmts);
    }
    if(m_TrafficProfileIsSet)
    {
        val[utility::conversions::to_string_t("trafficProfile")] = ModelBase::toJson(m_TrafficProfile);
    }
    if(m_BatteryIndicationIsSet)
    {
        val[utility::conversions::to_string_t("batteryIndication")] = ModelBase::toJson(m_BatteryIndication);
    }
    if(m_ValidityTimeIsSet)
    {
        val[utility::conversions::to_string_t("validityTime")] = ModelBase::toJson(m_ValidityTime);
    }

    return val;
}

bool ExpectedUeBehaviourData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("stationaryIndication")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stationaryIndication"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StationaryIndication> refVal_stationaryIndication;
            ok &= ModelBase::fromJson(fieldValue, refVal_stationaryIndication);
            setStationaryIndication(refVal_stationaryIndication);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("communicationDurationTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("communicationDurationTime"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_communicationDurationTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_communicationDurationTime);
            setCommunicationDurationTime(refVal_communicationDurationTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("periodicTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("periodicTime"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_periodicTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_periodicTime);
            setPeriodicTime(refVal_periodicTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledCommunicationTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("scheduledCommunicationTime"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScheduledCommunicationTime> refVal_scheduledCommunicationTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_scheduledCommunicationTime);
            setScheduledCommunicationTime(refVal_scheduledCommunicationTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scheduledCommunicationType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("scheduledCommunicationType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScheduledCommunicationType> refVal_scheduledCommunicationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_scheduledCommunicationType);
            setScheduledCommunicationType(refVal_scheduledCommunicationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expectedUmts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expectedUmts"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LocationArea>> refVal_expectedUmts;
            ok &= ModelBase::fromJson(fieldValue, refVal_expectedUmts);
            setExpectedUmts(refVal_expectedUmts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trafficProfile")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trafficProfile"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrafficProfile> refVal_trafficProfile;
            ok &= ModelBase::fromJson(fieldValue, refVal_trafficProfile);
            setTrafficProfile(refVal_trafficProfile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("batteryIndication")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("batteryIndication"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BatteryIndication> refVal_batteryIndication;
            ok &= ModelBase::fromJson(fieldValue, refVal_batteryIndication);
            setBatteryIndication(refVal_batteryIndication);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("validityTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("validityTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_validityTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_validityTime);
            setValidityTime(refVal_validityTime);
        }
    }
    return ok;
}

void ExpectedUeBehaviourData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StationaryIndicationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stationaryIndication"), m_StationaryIndication));
    }
    if(m_CommunicationDurationTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("communicationDurationTime"), m_CommunicationDurationTime));
    }
    if(m_PeriodicTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("periodicTime"), m_PeriodicTime));
    }
    if(m_ScheduledCommunicationTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("scheduledCommunicationTime"), m_ScheduledCommunicationTime));
    }
    if(m_ScheduledCommunicationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("scheduledCommunicationType"), m_ScheduledCommunicationType));
    }
    if(m_ExpectedUmtsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expectedUmts"), m_ExpectedUmts));
    }
    if(m_TrafficProfileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trafficProfile"), m_TrafficProfile));
    }
    if(m_BatteryIndicationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("batteryIndication"), m_BatteryIndication));
    }
    if(m_ValidityTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("validityTime"), m_ValidityTime));
    }
}

bool ExpectedUeBehaviourData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("stationaryIndication")))
    {
        std::shared_ptr<StationaryIndication> refVal_stationaryIndication;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stationaryIndication")), refVal_stationaryIndication );
        setStationaryIndication(refVal_stationaryIndication);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("communicationDurationTime")))
    {
        int32_t refVal_communicationDurationTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("communicationDurationTime")), refVal_communicationDurationTime );
        setCommunicationDurationTime(refVal_communicationDurationTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("periodicTime")))
    {
        int32_t refVal_periodicTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("periodicTime")), refVal_periodicTime );
        setPeriodicTime(refVal_periodicTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledCommunicationTime")))
    {
        std::shared_ptr<ScheduledCommunicationTime> refVal_scheduledCommunicationTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("scheduledCommunicationTime")), refVal_scheduledCommunicationTime );
        setScheduledCommunicationTime(refVal_scheduledCommunicationTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scheduledCommunicationType")))
    {
        std::shared_ptr<ScheduledCommunicationType> refVal_scheduledCommunicationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("scheduledCommunicationType")), refVal_scheduledCommunicationType );
        setScheduledCommunicationType(refVal_scheduledCommunicationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expectedUmts")))
    {
        std::vector<std::shared_ptr<LocationArea>> refVal_expectedUmts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expectedUmts")), refVal_expectedUmts );
        setExpectedUmts(refVal_expectedUmts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trafficProfile")))
    {
        std::shared_ptr<TrafficProfile> refVal_trafficProfile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trafficProfile")), refVal_trafficProfile );
        setTrafficProfile(refVal_trafficProfile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("batteryIndication")))
    {
        std::shared_ptr<BatteryIndication> refVal_batteryIndication;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("batteryIndication")), refVal_batteryIndication );
        setBatteryIndication(refVal_batteryIndication);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("validityTime")))
    {
        utility::datetime refVal_validityTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("validityTime")), refVal_validityTime );
        setValidityTime(refVal_validityTime);
    }
    return ok;
}

std::shared_ptr<StationaryIndication> ExpectedUeBehaviourData::getStationaryIndication() const
{
    return m_StationaryIndication;
}

void ExpectedUeBehaviourData::setStationaryIndication(const std::shared_ptr<StationaryIndication>& value)
{
    m_StationaryIndication = value;
    m_StationaryIndicationIsSet = true;
}

bool ExpectedUeBehaviourData::stationaryIndicationIsSet() const
{
    return m_StationaryIndicationIsSet;
}

void ExpectedUeBehaviourData::unsetStationaryIndication()
{
    m_StationaryIndicationIsSet = false;
}
int32_t ExpectedUeBehaviourData::getCommunicationDurationTime() const
{
    return m_CommunicationDurationTime;
}

void ExpectedUeBehaviourData::setCommunicationDurationTime(int32_t value)
{
    m_CommunicationDurationTime = value;
    m_CommunicationDurationTimeIsSet = true;
}

bool ExpectedUeBehaviourData::communicationDurationTimeIsSet() const
{
    return m_CommunicationDurationTimeIsSet;
}

void ExpectedUeBehaviourData::unsetCommunicationDurationTime()
{
    m_CommunicationDurationTimeIsSet = false;
}
int32_t ExpectedUeBehaviourData::getPeriodicTime() const
{
    return m_PeriodicTime;
}

void ExpectedUeBehaviourData::setPeriodicTime(int32_t value)
{
    m_PeriodicTime = value;
    m_PeriodicTimeIsSet = true;
}

bool ExpectedUeBehaviourData::periodicTimeIsSet() const
{
    return m_PeriodicTimeIsSet;
}

void ExpectedUeBehaviourData::unsetPeriodicTime()
{
    m_PeriodicTimeIsSet = false;
}
std::shared_ptr<ScheduledCommunicationTime> ExpectedUeBehaviourData::getScheduledCommunicationTime() const
{
    return m_ScheduledCommunicationTime;
}

void ExpectedUeBehaviourData::setScheduledCommunicationTime(const std::shared_ptr<ScheduledCommunicationTime>& value)
{
    m_ScheduledCommunicationTime = value;
    m_ScheduledCommunicationTimeIsSet = true;
}

bool ExpectedUeBehaviourData::scheduledCommunicationTimeIsSet() const
{
    return m_ScheduledCommunicationTimeIsSet;
}

void ExpectedUeBehaviourData::unsetScheduledCommunicationTime()
{
    m_ScheduledCommunicationTimeIsSet = false;
}
std::shared_ptr<ScheduledCommunicationType> ExpectedUeBehaviourData::getScheduledCommunicationType() const
{
    return m_ScheduledCommunicationType;
}

void ExpectedUeBehaviourData::setScheduledCommunicationType(const std::shared_ptr<ScheduledCommunicationType>& value)
{
    m_ScheduledCommunicationType = value;
    m_ScheduledCommunicationTypeIsSet = true;
}

bool ExpectedUeBehaviourData::scheduledCommunicationTypeIsSet() const
{
    return m_ScheduledCommunicationTypeIsSet;
}

void ExpectedUeBehaviourData::unsetScheduledCommunicationType()
{
    m_ScheduledCommunicationTypeIsSet = false;
}
std::vector<std::shared_ptr<LocationArea>>& ExpectedUeBehaviourData::getExpectedUmts()
{
    return m_ExpectedUmts;
}

void ExpectedUeBehaviourData::setExpectedUmts(const std::vector<std::shared_ptr<LocationArea>>& value)
{
    m_ExpectedUmts = value;
    m_ExpectedUmtsIsSet = true;
}

bool ExpectedUeBehaviourData::expectedUmtsIsSet() const
{
    return m_ExpectedUmtsIsSet;
}

void ExpectedUeBehaviourData::unsetExpectedUmts()
{
    m_ExpectedUmtsIsSet = false;
}
std::shared_ptr<TrafficProfile> ExpectedUeBehaviourData::getTrafficProfile() const
{
    return m_TrafficProfile;
}

void ExpectedUeBehaviourData::setTrafficProfile(const std::shared_ptr<TrafficProfile>& value)
{
    m_TrafficProfile = value;
    m_TrafficProfileIsSet = true;
}

bool ExpectedUeBehaviourData::trafficProfileIsSet() const
{
    return m_TrafficProfileIsSet;
}

void ExpectedUeBehaviourData::unsetTrafficProfile()
{
    m_TrafficProfileIsSet = false;
}
std::shared_ptr<BatteryIndication> ExpectedUeBehaviourData::getBatteryIndication() const
{
    return m_BatteryIndication;
}

void ExpectedUeBehaviourData::setBatteryIndication(const std::shared_ptr<BatteryIndication>& value)
{
    m_BatteryIndication = value;
    m_BatteryIndicationIsSet = true;
}

bool ExpectedUeBehaviourData::batteryIndicationIsSet() const
{
    return m_BatteryIndicationIsSet;
}

void ExpectedUeBehaviourData::unsetBatteryIndication()
{
    m_BatteryIndicationIsSet = false;
}
utility::datetime ExpectedUeBehaviourData::getValidityTime() const
{
    return m_ValidityTime;
}

void ExpectedUeBehaviourData::setValidityTime(const utility::datetime& value)
{
    m_ValidityTime = value;
    m_ValidityTimeIsSet = true;
}

bool ExpectedUeBehaviourData::validityTimeIsSet() const
{
    return m_ValidityTimeIsSet;
}

void ExpectedUeBehaviourData::unsetValidityTime()
{
    m_ValidityTimeIsSet = false;
}
}
}
}
}


