/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LcsMoServiceClass.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LcsMoServiceClass::LcsMoServiceClass()
{
}

LcsMoServiceClass::~LcsMoServiceClass()
{
}

void LcsMoServiceClass::validate()
{
    // TODO: implement validation
}

web::json::value LcsMoServiceClass::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eLcsMoServiceClass::LcsMoServiceClass_BASIC_SELF_LOCATION) val = web::json::value::string(U(BASIC_SELF_LOCATION));
    if (m_value == eLcsMoServiceClass::LcsMoServiceClass_AUTONOMOUS_SELF_LOCATION) val = web::json::value::string(U(AUTONOMOUS_SELF_LOCATION));
    if (m_value == eLcsMoServiceClass::LcsMoServiceClass_TRANSFER_TO_THIRD_PARTY) val = web::json::value::string(U(TRANSFER_TO_THIRD_PARTY));

    return val;
}

bool LcsMoServiceClass::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(BASIC_SELF_LOCATION)) m_value = eLcsMoServiceClass::LcsMoServiceClass_BASIC_SELF_LOCATION;
    if (s == utility::conversions::to_string_t(AUTONOMOUS_SELF_LOCATION)) m_value = eLcsMoServiceClass::LcsMoServiceClass_AUTONOMOUS_SELF_LOCATION;
    if (s == utility::conversions::to_string_t(TRANSFER_TO_THIRD_PARTY)) m_value = eLcsMoServiceClass::LcsMoServiceClass_TRANSFER_TO_THIRD_PARTY;
    return true;
}

void LcsMoServiceClass::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eLcsMoServiceClass::LcsMoServiceClass_BASIC_SELF_LOCATION) s = utility::conversions::to_string_t(BASIC_SELF_LOCATION);
    if (m_value == eLcsMoServiceClass::LcsMoServiceClass_AUTONOMOUS_SELF_LOCATION) s = utility::conversions::to_string_t(AUTONOMOUS_SELF_LOCATION);
    if (m_value == eLcsMoServiceClass::LcsMoServiceClass_TRANSFER_TO_THIRD_PARTY) s = utility::conversions::to_string_t(TRANSFER_TO_THIRD_PARTY);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool LcsMoServiceClass::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eLcsMoServiceClass v;

        
        if (s == utility::conversions::to_string_t(BASIC_SELF_LOCATION)) v = eLcsMoServiceClass::LcsMoServiceClass_BASIC_SELF_LOCATION;
        if (s == utility::conversions::to_string_t(AUTONOMOUS_SELF_LOCATION)) v = eLcsMoServiceClass::LcsMoServiceClass_AUTONOMOUS_SELF_LOCATION;
        if (s == utility::conversions::to_string_t(TRANSFER_TO_THIRD_PARTY)) v = eLcsMoServiceClass::LcsMoServiceClass_TRANSFER_TO_THIRD_PARTY;

        setValue(v);
    }
    return ok;
}

LcsMoServiceClass::eLcsMoServiceClass LcsMoServiceClass::getValue() const
{
   return m_value;
}

void LcsMoServiceClass::setValue(LcsMoServiceClass::eLcsMoServiceClass const value)
{
   m_value = value;
}


}
}
}
}


