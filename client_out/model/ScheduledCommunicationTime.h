/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ScheduledCommunicationTime.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ScheduledCommunicationTime_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ScheduledCommunicationTime_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ScheduledCommunicationTime
    : public ModelBase
{
public:
    ScheduledCommunicationTime();
    virtual ~ScheduledCommunicationTime();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ScheduledCommunicationTime members

    /// <summary>
    /// Identifies the day(s) of the week. If absent, it indicates every day of the week.
    /// </summary>
    std::vector<int32_t>& getDaysOfWeek();
    bool daysOfWeekIsSet() const;
    void unsetDaysOfWeek();

    void setDaysOfWeek(std::vector<int32_t> value);

    /// <summary>
    /// String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
    /// </summary>
    utility::string_t getTimeOfDayStart() const;
    bool timeOfDayStartIsSet() const;
    void unsetTimeOfDayStart();

    void setTimeOfDayStart(const utility::string_t& value);

    /// <summary>
    /// String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
    /// </summary>
    utility::string_t getTimeOfDayEnd() const;
    bool timeOfDayEndIsSet() const;
    void unsetTimeOfDayEnd();

    void setTimeOfDayEnd(const utility::string_t& value);


protected:
    std::vector<int32_t> m_DaysOfWeek;
    bool m_DaysOfWeekIsSet;
    utility::string_t m_TimeOfDayStart;
    bool m_TimeOfDayStartIsSet;
    utility::string_t m_TimeOfDayEnd;
    bool m_TimeOfDayEndIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ScheduledCommunicationTime_H_ */
