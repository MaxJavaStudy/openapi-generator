/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DnnInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_DnnInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_DnnInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  DnnInfo
    : public ModelBase
{
public:
    DnnInfo();
    virtual ~DnnInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DnnInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDnn() const;
    bool dnnIsSet() const;
    void unsetDnn();

    void setDnn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isDefaultDnnIndicator() const;
    bool defaultDnnIndicatorIsSet() const;
    void unsetDefaultDnnIndicator();

    void setDefaultDnnIndicator(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isLboRoamingAllowed() const;
    bool lboRoamingAllowedIsSet() const;
    void unsetLboRoamingAllowed();

    void setLboRoamingAllowed(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIwkEpsInd() const;
    bool iwkEpsIndIsSet() const;
    void unsetIwkEpsInd();

    void setIwkEpsInd(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isDnnBarred() const;
    bool dnnBarredIsSet() const;
    void unsetDnnBarred();

    void setDnnBarred(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isInvokeNefInd() const;
    bool invokeNefIndIsSet() const;
    void unsetInvokeNefInd();

    void setInvokeNefInd(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getSmfList();
    bool smfListIsSet() const;
    void unsetSmfList();

    void setSmfList(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSameSmfInd() const;
    bool sameSmfIndIsSet() const;
    void unsetSameSmfInd();

    void setSameSmfInd(bool value);


protected:
    utility::string_t m_Dnn;
    bool m_DnnIsSet;
    bool m_DefaultDnnIndicator;
    bool m_DefaultDnnIndicatorIsSet;
    bool m_LboRoamingAllowed;
    bool m_LboRoamingAllowedIsSet;
    bool m_IwkEpsInd;
    bool m_IwkEpsIndIsSet;
    bool m_DnnBarred;
    bool m_DnnBarredIsSet;
    bool m_InvokeNefInd;
    bool m_InvokeNefIndIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_SmfList;
    bool m_SmfListIsSet;
    bool m_SameSmfInd;
    bool m_SameSmfIndIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_DnnInfo_H_ */
