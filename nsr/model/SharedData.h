/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SharedData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SharedData_H_
#define SharedData_H_

#include "AccessAndMobilitySubscriptionData.h"
#include "CSB_JsonParser.h"
#include "DnnConfiguration.h"
#include "SmsManagementSubscriptionData.h"
#include "SmsSubscriptionData.h"
#include "SnssaiInfo.h"
#include "TraceData.h"
#include "VnGroupData.h"
#include <map>
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SharedData : public jsonParser::jsonParser<SharedData> {
public:
  explicit SharedData() {
    // constructor
    m_SharedDataId = "";

    m_SharedDataIdFlag = staticjson::Flags::Default;
    m_SharedDataIdOutFlag.reset(new unsigned);
    *m_SharedDataIdOutFlag.get() = 0;

    m_SharedAmDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedAmDataOutFlag.reset(new unsigned);
    *m_SharedAmDataOutFlag.get() = 0;

    m_SharedSmsSubsDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedSmsSubsDataOutFlag.reset(new unsigned);
    *m_SharedSmsSubsDataOutFlag.get() = 0;

    m_SharedSmsMngSubsDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedSmsMngSubsDataOutFlag.reset(new unsigned);
    *m_SharedSmsMngSubsDataOutFlag.get() = 0;

    m_SharedDnnConfigurationsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedDnnConfigurationsOutFlag.reset(new unsigned);
    *m_SharedDnnConfigurationsOutFlag.get() = 0;

    m_SharedTraceDataFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedTraceDataOutFlag.reset(new unsigned);
    *m_SharedTraceDataOutFlag.get() = 0;

    m_SharedSnssaiInfosFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedSnssaiInfosOutFlag.reset(new unsigned);
    *m_SharedSnssaiInfosOutFlag.get() = 0;

    m_SharedVnGroupDatasFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SharedVnGroupDatasOutFlag.reset(new unsigned);
    *m_SharedVnGroupDatasOutFlag.get() = 0;
  };
  virtual ~SharedData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SharedDataId SharedAmData
    // SharedSmsSubsData SharedSmsMngSubsData SharedDnnConfigurations
    // SharedTraceData SharedSnssaiInfos SharedVnGroupDatas
    h->add_property("sharedDataId", &this->m_SharedDataId, m_SharedDataIdFlag);
    h->add_optional_property("sharedAmData", &this->m_SharedAmData,
                             m_SharedAmDataFlag, m_SharedAmDataOutFlag);
    h->add_optional_property("sharedSmsSubsData", &this->m_SharedSmsSubsData,
                             m_SharedSmsSubsDataFlag,
                             m_SharedSmsSubsDataOutFlag);
    h->add_optional_property(
        "sharedSmsMngSubsData", &this->m_SharedSmsMngSubsData,
        m_SharedSmsMngSubsDataFlag, m_SharedSmsMngSubsDataOutFlag);
    h->add_optional_property(
        "sharedDnnConfigurations", &this->m_SharedDnnConfigurations,
        m_SharedDnnConfigurationsFlag, m_SharedDnnConfigurationsOutFlag);
    h->add_optional_property("sharedTraceData", &this->m_SharedTraceData,
                             m_SharedTraceDataFlag, m_SharedTraceDataOutFlag);
    h->add_optional_property("sharedSnssaiInfos", &this->m_SharedSnssaiInfos,
                             m_SharedSnssaiInfosFlag,
                             m_SharedSnssaiInfosOutFlag);
    h->add_optional_property("sharedVnGroupDatas", &this->m_SharedVnGroupDatas,
                             m_SharedVnGroupDatasFlag,
                             m_SharedVnGroupDatasOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const SharedData &obj) {

    o << "SharedDataId : " << obj.m_SharedDataId << std::endl;

    o << "SharedAmData, optional flag is : " << *m_SharedAmDataOutFlag
      << ", content is : " << obj.m_SharedAmData << std::endl;

    o << "SharedSmsSubsData, optional flag is : " << *m_SharedSmsSubsDataOutFlag
      << ", content is : " << obj.m_SharedSmsSubsData << std::endl;

    o << "SharedSmsMngSubsData, optional flag is : "
      << *m_SharedSmsMngSubsDataOutFlag
      << ", content is : " << obj.m_SharedSmsMngSubsData << std::endl;
    o << "SharedDnnConfigurations, optional flag is : "
      << *m_SharedDnnConfigurationsOutFlag << std::endl;
    o << convert2string(std::string("SharedDnnConfigurations"),
                        obj.m_SharedDnnConfigurations)
      << std::endl;

    o << "SharedTraceData, optional flag is : " << *m_SharedTraceDataOutFlag
      << ", content is : " << obj.m_SharedTraceData << std::endl;
    o << "SharedSnssaiInfos, optional flag is : " << *m_SharedSnssaiInfosOutFlag
      << std::endl;
    o << convert2string(std::string("SharedSnssaiInfos"),
                        obj.m_SharedSnssaiInfos)
      << std::endl;
    o << "SharedVnGroupDatas, optional flag is : "
      << *m_SharedVnGroupDatasOutFlag << std::endl;
    o << convert2string(std::string("SharedVnGroupDatas"),
                        obj.m_SharedVnGroupDatas)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SharedData members vars : SharedDataId SharedAmData SharedSmsSubsData
  /// SharedSmsMngSubsData SharedDnnConfigurations SharedTraceData
  /// SharedSnssaiInfos SharedVnGroupDatas

  std::string getSharedDataId() const { return m_SharedDataId; }
  void setSharedDataId(std::string const &value) { m_SharedDataId = value; }

  AccessAndMobilitySubscriptionData getSharedAmData() const {
    return m_SharedAmData;
  }
  void setSharedAmData(AccessAndMobilitySubscriptionData const &value) {
    m_SharedAmData = value;
  }

  SmsSubscriptionData getSharedSmsSubsData() const {
    return m_SharedSmsSubsData;
  }
  void setSharedSmsSubsData(SmsSubscriptionData const &value) {
    m_SharedSmsSubsData = value;
  }

  SmsManagementSubscriptionData getSharedSmsMngSubsData() const {
    return m_SharedSmsMngSubsData;
  }
  void setSharedSmsMngSubsData(SmsManagementSubscriptionData const &value) {
    m_SharedSmsMngSubsData = value;
  }

  std::map<std::string, DnnConfiguration> &getSharedDnnConfigurations() {
    return m_SharedDnnConfigurations;
  }
  void setSharedDnnConfigurations(
      std::map<std::string, DnnConfiguration> const &value) {
    m_SharedDnnConfigurations = value;
  }

  TraceData getSharedTraceData() const { return m_SharedTraceData; }
  void setSharedTraceData(TraceData const &value) { m_SharedTraceData = value; }

  std::map<std::string, SnssaiInfo> &getSharedSnssaiInfos() {
    return m_SharedSnssaiInfos;
  }
  void setSharedSnssaiInfos(std::map<std::string, SnssaiInfo> const &value) {
    m_SharedSnssaiInfos = value;
  }

  std::map<std::string, VnGroupData> &getSharedVnGroupDatas() {
    return m_SharedVnGroupDatas;
  }
  void setSharedVnGroupDatas(std::map<std::string, VnGroupData> const &value) {
    m_SharedVnGroupDatas = value;
  }

public:
  std::string m_SharedDataId;

  unsigned m_SharedDataIdFlag;
  shared_ptr<unsigned> m_SharedDataIdOutFlag;
  AccessAndMobilitySubscriptionData m_SharedAmData;

  unsigned m_SharedAmDataFlag;
  shared_ptr<unsigned> m_SharedAmDataOutFlag;
  SmsSubscriptionData m_SharedSmsSubsData;

  unsigned m_SharedSmsSubsDataFlag;
  shared_ptr<unsigned> m_SharedSmsSubsDataOutFlag;
  SmsManagementSubscriptionData m_SharedSmsMngSubsData;

  unsigned m_SharedSmsMngSubsDataFlag;
  shared_ptr<unsigned> m_SharedSmsMngSubsDataOutFlag;
  std::map<std::string, DnnConfiguration> m_SharedDnnConfigurations;

  unsigned m_SharedDnnConfigurationsFlag;
  shared_ptr<unsigned> m_SharedDnnConfigurationsOutFlag;
  TraceData m_SharedTraceData;

  unsigned m_SharedTraceDataFlag;
  shared_ptr<unsigned> m_SharedTraceDataOutFlag;
  std::map<std::string, SnssaiInfo> m_SharedSnssaiInfos;

  unsigned m_SharedSnssaiInfosFlag;
  shared_ptr<unsigned> m_SharedSnssaiInfosOutFlag;
  std::map<std::string, VnGroupData> m_SharedVnGroupDatas;

  unsigned m_SharedVnGroupDatasFlag;
  shared_ptr<unsigned> m_SharedVnGroupDatasOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SharedData_H_ */
