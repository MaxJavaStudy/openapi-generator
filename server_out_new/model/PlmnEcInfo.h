/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PlmnEcInfo.h
 *
 * 
 */

#ifndef PlmnEcInfo_H_
#define PlmnEcInfo_H_


#include "EcRestrictionDataWb.h"
#include "PlmnId.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  PlmnEcInfo: public jsonParser::jsonParser<PlmnEcInfo>
{
public:
    explicit PlmnEcInfo(){
        // constructor
        
            m_PlmnIdFlag = staticjson::Flags::Default;

            m_EcRestrictionDataWbFlag = (staticjson::Flags::Optional);
m_EcRestrictionDataNb = false;
        
            m_EcRestrictionDataNbFlag = (staticjson::Flags::Optional);
    };
    virtual ~PlmnEcInfo(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : PlmnId EcRestrictionDataWb EcRestrictionDataNb 
        h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);
        h->add_property("ecRestrictionDataWb", &this->m_EcRestrictionDataWb, m_EcRestrictionDataWbFlag);
        h->add_property("ecRestrictionDataNb", &this->m_EcRestrictionDataNb, m_EcRestrictionDataNbFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const PlmnEcInfo& obj)
    {
        
        o << "PlmnId : " << obj.m_PlmnId << std::endl;

        o << "EcRestrictionDataWb : " << obj.m_EcRestrictionDataWb << std::endl;

        o << "EcRestrictionDataNb : " << obj.m_EcRestrictionDataNb << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// PlmnEcInfo members vars : PlmnId EcRestrictionDataWb EcRestrictionDataNb 

    PlmnId  getPlmnId() const
    {
        return m_PlmnId;
    }
    void  setPlmnId(PlmnId const& value)
    {
        m_PlmnId = value;
    }

EcRestrictionDataWb  getEcRestrictionDataWb() const
    {
        return m_EcRestrictionDataWb;
    }
    void  setEcRestrictionDataWb(EcRestrictionDataWb const& value)
    {
        m_EcRestrictionDataWb = value;
    }

bool  isEcRestrictionDataNb() const
    {
        return m_EcRestrictionDataNb;
    }
    void  setEcRestrictionDataNb(bool const value)
    {
        m_EcRestrictionDataNb = value;
    }



    
public:
    PlmnId m_PlmnId;
    
    unsigned m_PlmnIdFlag;
    EcRestrictionDataWb m_EcRestrictionDataWb;
    
    unsigned m_EcRestrictionDataWbFlag;
    bool m_EcRestrictionDataNb;
    
    unsigned m_EcRestrictionDataNbFlag;
  
};
}
}
}
}

#endif /* PlmnEcInfo_H_ */
