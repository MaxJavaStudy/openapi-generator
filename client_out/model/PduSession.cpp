/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PduSession.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PduSession::PduSession()
{
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_SmfInstanceId = utility::conversions::to_string_t("");
    m_SmfInstanceIdIsSet = false;
    m_PlmnIdIsSet = false;
    m_SingleNssaiIsSet = false;
}

PduSession::~PduSession()
{
}

void PduSession::validate()
{
    // TODO: implement validation
}

web::json::value PduSession::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t("dnn")] = ModelBase::toJson(m_Dnn);
    }
    if(m_SmfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t("smfInstanceId")] = ModelBase::toJson(m_SmfInstanceId);
    }
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t("plmnId")] = ModelBase::toJson(m_PlmnId);
    }
    if(m_SingleNssaiIsSet)
    {
        val[utility::conversions::to_string_t("singleNssai")] = ModelBase::toJson(m_SingleNssai);
    }

    return val;
}

bool PduSession::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("dnn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnn);
            setDnn(refVal_dnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smfInstanceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smfInstanceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_smfInstanceId);
            setSmfInstanceId(refVal_smfInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plmnId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plmnId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_plmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_plmnId);
            setPlmnId(refVal_plmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("singleNssai")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("singleNssai"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_singleNssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_singleNssai);
            setSingleNssai(refVal_singleNssai);
        }
    }
    return ok;
}

void PduSession::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnn"), m_Dnn));
    }
    if(m_SmfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smfInstanceId"), m_SmfInstanceId));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plmnId"), m_PlmnId));
    }
    if(m_SingleNssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("singleNssai"), m_SingleNssai));
    }
}

bool PduSession::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dnn")))
    {
        utility::string_t refVal_dnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnn")), refVal_dnn );
        setDnn(refVal_dnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smfInstanceId")))
    {
        utility::string_t refVal_smfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smfInstanceId")), refVal_smfInstanceId );
        setSmfInstanceId(refVal_smfInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plmnId")))
    {
        std::shared_ptr<PlmnId> refVal_plmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plmnId")), refVal_plmnId );
        setPlmnId(refVal_plmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("singleNssai")))
    {
        std::shared_ptr<Snssai> refVal_singleNssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("singleNssai")), refVal_singleNssai );
        setSingleNssai(refVal_singleNssai);
    }
    return ok;
}

utility::string_t PduSession::getDnn() const
{
    return m_Dnn;
}

void PduSession::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool PduSession::dnnIsSet() const
{
    return m_DnnIsSet;
}

void PduSession::unsetDnn()
{
    m_DnnIsSet = false;
}
utility::string_t PduSession::getSmfInstanceId() const
{
    return m_SmfInstanceId;
}

void PduSession::setSmfInstanceId(const utility::string_t& value)
{
    m_SmfInstanceId = value;
    m_SmfInstanceIdIsSet = true;
}

bool PduSession::smfInstanceIdIsSet() const
{
    return m_SmfInstanceIdIsSet;
}

void PduSession::unsetSmfInstanceId()
{
    m_SmfInstanceIdIsSet = false;
}
std::shared_ptr<PlmnId> PduSession::getPlmnId() const
{
    return m_PlmnId;
}

void PduSession::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool PduSession::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void PduSession::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
std::shared_ptr<Snssai> PduSession::getSingleNssai() const
{
    return m_SingleNssai;
}

void PduSession::setSingleNssai(const std::shared_ptr<Snssai>& value)
{
    m_SingleNssai = value;
    m_SingleNssaiIsSet = true;
}

bool PduSession::singleNssaiIsSet() const
{
    return m_SingleNssaiIsSet;
}

void PduSession::unsetSingleNssai()
{
    m_SingleNssaiIsSet = false;
}
}
}
}
}


