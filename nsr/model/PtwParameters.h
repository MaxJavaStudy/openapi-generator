/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PtwParameters.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef PtwParameters_H_
#define PtwParameters_H_

#include "CSB_JsonParser.h"
#include "OperationMode.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PtwParameters : public jsonParser::jsonParser<PtwParameters> {
public:
  explicit PtwParameters() {
    // constructor

    m_OperationModeFlag = staticjson::Flags::Default;
    m_OperationModeOutFlag.reset(new unsigned);
    *m_OperationModeOutFlag.get() = 0;
    m_PtwValue = "";

    m_PtwValueFlag = staticjson::Flags::Default;
    m_PtwValueOutFlag.reset(new unsigned);
    *m_PtwValueOutFlag.get() = 0;
  };
  virtual ~PtwParameters(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : OperationMode PtwValue
    h->add_property("operationMode", &this->m_OperationMode,
                    m_OperationModeFlag);
    h->add_property("ptwValue", &this->m_PtwValue, m_PtwValueFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const PtwParameters &obj) {

    o << "OperationMode : " << obj.m_OperationMode << std::endl;

    o << "PtwValue : " << obj.m_PtwValue << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// PtwParameters members vars : OperationMode PtwValue

  OperationMode getOperationMode() const { return m_OperationMode; }
  void setOperationMode(OperationMode const &value) { m_OperationMode = value; }

  std::string getPtwValue() const { return m_PtwValue; }
  void setPtwValue(std::string const &value) { m_PtwValue = value; }

public:
  OperationMode m_OperationMode;

  unsigned m_OperationModeFlag;
  shared_ptr<unsigned> m_OperationModeOutFlag;
  std::string m_PtwValue;

  unsigned m_PtwValueFlag;
  shared_ptr<unsigned> m_PtwValueOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PtwParameters_H_ */
