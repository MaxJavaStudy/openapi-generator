/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExpectedUeBehaviourData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ExpectedUeBehaviourData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ExpectedUeBehaviourData_H_


#include "../ModelBase.h"

#include "BatteryIndication.h"
#include "LocationArea.h"
#include "ScheduledCommunicationType.h"
#include "TrafficProfile.h"
#include "ScheduledCommunicationTime.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "StationaryIndication.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ExpectedUeBehaviourData
    : public ModelBase
{
public:
    ExpectedUeBehaviourData();
    virtual ~ExpectedUeBehaviourData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ExpectedUeBehaviourData members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StationaryIndication> getStationaryIndication() const;
    bool stationaryIndicationIsSet() const;
    void unsetStationaryIndication();

    void setStationaryIndication(const std::shared_ptr<StationaryIndication>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCommunicationDurationTime() const;
    bool communicationDurationTimeIsSet() const;
    void unsetCommunicationDurationTime();

    void setCommunicationDurationTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPeriodicTime() const;
    bool periodicTimeIsSet() const;
    void unsetPeriodicTime();

    void setPeriodicTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ScheduledCommunicationTime> getScheduledCommunicationTime() const;
    bool scheduledCommunicationTimeIsSet() const;
    void unsetScheduledCommunicationTime();

    void setScheduledCommunicationTime(const std::shared_ptr<ScheduledCommunicationTime>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ScheduledCommunicationType> getScheduledCommunicationType() const;
    bool scheduledCommunicationTypeIsSet() const;
    void unsetScheduledCommunicationType();

    void setScheduledCommunicationType(const std::shared_ptr<ScheduledCommunicationType>& value);

    /// <summary>
    /// Identifies the UE&#39;s expected geographical movement. The attribute is only applicable in 5G.
    /// </summary>
    std::vector<std::shared_ptr<LocationArea>>& getExpectedUmts();
    bool expectedUmtsIsSet() const;
    void unsetExpectedUmts();

    void setExpectedUmts(const std::vector<std::shared_ptr<LocationArea>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrafficProfile> getTrafficProfile() const;
    bool trafficProfileIsSet() const;
    void unsetTrafficProfile();

    void setTrafficProfile(const std::shared_ptr<TrafficProfile>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BatteryIndication> getBatteryIndication() const;
    bool batteryIndicationIsSet() const;
    void unsetBatteryIndication();

    void setBatteryIndication(const std::shared_ptr<BatteryIndication>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getValidityTime() const;
    bool validityTimeIsSet() const;
    void unsetValidityTime();

    void setValidityTime(const utility::datetime& value);


protected:
    std::shared_ptr<StationaryIndication> m_StationaryIndication;
    bool m_StationaryIndicationIsSet;
    int32_t m_CommunicationDurationTime;
    bool m_CommunicationDurationTimeIsSet;
    int32_t m_PeriodicTime;
    bool m_PeriodicTimeIsSet;
    std::shared_ptr<ScheduledCommunicationTime> m_ScheduledCommunicationTime;
    bool m_ScheduledCommunicationTimeIsSet;
    std::shared_ptr<ScheduledCommunicationType> m_ScheduledCommunicationType;
    bool m_ScheduledCommunicationTypeIsSet;
    std::vector<std::shared_ptr<LocationArea>> m_ExpectedUmts;
    bool m_ExpectedUmtsIsSet;
    std::shared_ptr<TrafficProfile> m_TrafficProfile;
    bool m_TrafficProfileIsSet;
    std::shared_ptr<BatteryIndication> m_BatteryIndication;
    bool m_BatteryIndicationIsSet;
    utility::datetime m_ValidityTime;
    bool m_ValidityTimeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ExpectedUeBehaviourData_H_ */
