/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NiddInformation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NiddInformation::NiddInformation()
{
    m_AfId = utility::conversions::to_string_t("");
    m_AfIdIsSet = false;
    m_Gpsi = utility::conversions::to_string_t("");
    m_GpsiIsSet = false;
    m_ExtGroupId = utility::conversions::to_string_t("");
    m_ExtGroupIdIsSet = false;
}

NiddInformation::~NiddInformation()
{
}

void NiddInformation::validate()
{
    // TODO: implement validation
}

web::json::value NiddInformation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AfIdIsSet)
    {
        val[utility::conversions::to_string_t("afId")] = ModelBase::toJson(m_AfId);
    }
    if(m_GpsiIsSet)
    {
        val[utility::conversions::to_string_t("gpsi")] = ModelBase::toJson(m_Gpsi);
    }
    if(m_ExtGroupIdIsSet)
    {
        val[utility::conversions::to_string_t("extGroupId")] = ModelBase::toJson(m_ExtGroupId);
    }

    return val;
}

bool NiddInformation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("afId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("afId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_afId;
            ok &= ModelBase::fromJson(fieldValue, refVal_afId);
            setAfId(refVal_afId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gpsi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gpsi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_gpsi;
            ok &= ModelBase::fromJson(fieldValue, refVal_gpsi);
            setGpsi(refVal_gpsi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("extGroupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("extGroupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_extGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_extGroupId);
            setExtGroupId(refVal_extGroupId);
        }
    }
    return ok;
}

void NiddInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("afId"), m_AfId));
    }
    if(m_GpsiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gpsi"), m_Gpsi));
    }
    if(m_ExtGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("extGroupId"), m_ExtGroupId));
    }
}

bool NiddInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("afId")))
    {
        utility::string_t refVal_afId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("afId")), refVal_afId );
        setAfId(refVal_afId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gpsi")))
    {
        utility::string_t refVal_gpsi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gpsi")), refVal_gpsi );
        setGpsi(refVal_gpsi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("extGroupId")))
    {
        utility::string_t refVal_extGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("extGroupId")), refVal_extGroupId );
        setExtGroupId(refVal_extGroupId);
    }
    return ok;
}

utility::string_t NiddInformation::getAfId() const
{
    return m_AfId;
}

void NiddInformation::setAfId(const utility::string_t& value)
{
    m_AfId = value;
    m_AfIdIsSet = true;
}

bool NiddInformation::afIdIsSet() const
{
    return m_AfIdIsSet;
}

void NiddInformation::unsetAfId()
{
    m_AfIdIsSet = false;
}
utility::string_t NiddInformation::getGpsi() const
{
    return m_Gpsi;
}

void NiddInformation::setGpsi(const utility::string_t& value)
{
    m_Gpsi = value;
    m_GpsiIsSet = true;
}

bool NiddInformation::gpsiIsSet() const
{
    return m_GpsiIsSet;
}

void NiddInformation::unsetGpsi()
{
    m_GpsiIsSet = false;
}
utility::string_t NiddInformation::getExtGroupId() const
{
    return m_ExtGroupId;
}

void NiddInformation::setExtGroupId(const utility::string_t& value)
{
    m_ExtGroupId = value;
    m_ExtGroupIdIsSet = true;
}

bool NiddInformation::extGroupIdIsSet() const
{
    return m_ExtGroupIdIsSet;
}

void NiddInformation::unsetExtGroupId()
{
    m_ExtGroupIdIsSet = false;
}
}
}
}
}


