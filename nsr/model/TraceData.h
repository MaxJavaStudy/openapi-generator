/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TraceData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef TraceData_H_
#define TraceData_H_

#include "CSB_JsonParser.h"
#include "TraceDepth.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class TraceData : public jsonParser::jsonParser<TraceData> {
public:
  explicit TraceData() {
    // constructor
    m_TraceRef = "";

    m_TraceRefFlag = staticjson::Flags::Default;
    m_TraceRefOutFlag.reset(new unsigned);
    *m_TraceRefOutFlag.get() = 0;

    m_TraceDepthFlag = staticjson::Flags::Default;
    m_TraceDepthOutFlag.reset(new unsigned);
    *m_TraceDepthOutFlag.get() = 0;
    m_NeTypeList = "";

    m_NeTypeListFlag = staticjson::Flags::Default;
    m_NeTypeListOutFlag.reset(new unsigned);
    *m_NeTypeListOutFlag.get() = 0;
    m_EventList = "";

    m_EventListFlag = staticjson::Flags::Default;
    m_EventListOutFlag.reset(new unsigned);
    *m_EventListOutFlag.get() = 0;
    m_CollectionEntityIpv4Addr = "";

    m_CollectionEntityIpv4AddrFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CollectionEntityIpv4AddrOutFlag.reset(new unsigned);
    *m_CollectionEntityIpv4AddrOutFlag.get() = 0;
    m_CollectionEntityIpv6Addr = "";

    m_CollectionEntityIpv6AddrFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CollectionEntityIpv6AddrOutFlag.reset(new unsigned);
    *m_CollectionEntityIpv6AddrOutFlag.get() = 0;
    m_InterfaceList = "";

    m_InterfaceListFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_InterfaceListOutFlag.reset(new unsigned);
    *m_InterfaceListOutFlag.get() = 0;
  };
  virtual ~TraceData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : TraceRef TraceDepth NeTypeList
    // EventList CollectionEntityIpv4Addr CollectionEntityIpv6Addr InterfaceList
    h->add_property("traceRef", &this->m_TraceRef, m_TraceRefFlag);
    h->add_property("traceDepth", &this->m_TraceDepth, m_TraceDepthFlag);
    h->add_property("neTypeList", &this->m_NeTypeList, m_NeTypeListFlag);
    h->add_property("eventList", &this->m_EventList, m_EventListFlag);
    h->add_optional_property(
        "collectionEntityIpv4Addr", &this->m_CollectionEntityIpv4Addr,
        m_CollectionEntityIpv4AddrFlag, m_CollectionEntityIpv4AddrOutFlag);
    h->add_optional_property(
        "collectionEntityIpv6Addr", &this->m_CollectionEntityIpv6Addr,
        m_CollectionEntityIpv6AddrFlag, m_CollectionEntityIpv6AddrOutFlag);
    h->add_optional_property("interfaceList", &this->m_InterfaceList,
                             m_InterfaceListFlag, m_InterfaceListOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const TraceData &obj) {

    o << "TraceRef : " << obj.m_TraceRef << std::endl;

    o << "TraceDepth : " << obj.m_TraceDepth << std::endl;

    o << "NeTypeList : " << obj.m_NeTypeList << std::endl;

    o << "EventList : " << obj.m_EventList << std::endl;

    o << "CollectionEntityIpv4Addr, optional flag is : "
      << *m_CollectionEntityIpv4AddrOutFlag
      << ", content is : " << obj.m_CollectionEntityIpv4Addr << std::endl;

    o << "CollectionEntityIpv6Addr, optional flag is : "
      << *m_CollectionEntityIpv6AddrOutFlag
      << ", content is : " << obj.m_CollectionEntityIpv6Addr << std::endl;

    o << "InterfaceList, optional flag is : " << *m_InterfaceListOutFlag
      << ", content is : " << obj.m_InterfaceList << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// TraceData members vars : TraceRef TraceDepth NeTypeList EventList
  /// CollectionEntityIpv4Addr CollectionEntityIpv6Addr InterfaceList

  std::string getTraceRef() const { return m_TraceRef; }
  void setTraceRef(std::string const &value) { m_TraceRef = value; }

  TraceDepth getTraceDepth() const { return m_TraceDepth; }
  void setTraceDepth(TraceDepth const &value) { m_TraceDepth = value; }

  std::string getNeTypeList() const { return m_NeTypeList; }
  void setNeTypeList(std::string const &value) { m_NeTypeList = value; }

  std::string getEventList() const { return m_EventList; }
  void setEventList(std::string const &value) { m_EventList = value; }

  std::string getCollectionEntityIpv4Addr() const {
    return m_CollectionEntityIpv4Addr;
  }
  void setCollectionEntityIpv4Addr(std::string const &value) {
    m_CollectionEntityIpv4Addr = value;
  }

  std::string getCollectionEntityIpv6Addr() const {
    return m_CollectionEntityIpv6Addr;
  }
  void setCollectionEntityIpv6Addr(std::string const &value) {
    m_CollectionEntityIpv6Addr = value;
  }

  std::string getInterfaceList() const { return m_InterfaceList; }
  void setInterfaceList(std::string const &value) { m_InterfaceList = value; }

public:
  std::string m_TraceRef;

  unsigned m_TraceRefFlag;
  shared_ptr<unsigned> m_TraceRefOutFlag;
  TraceDepth m_TraceDepth;

  unsigned m_TraceDepthFlag;
  shared_ptr<unsigned> m_TraceDepthOutFlag;
  std::string m_NeTypeList;

  unsigned m_NeTypeListFlag;
  shared_ptr<unsigned> m_NeTypeListOutFlag;
  std::string m_EventList;

  unsigned m_EventListFlag;
  shared_ptr<unsigned> m_EventListOutFlag;
  std::string m_CollectionEntityIpv4Addr;

  unsigned m_CollectionEntityIpv4AddrFlag;
  shared_ptr<unsigned> m_CollectionEntityIpv4AddrOutFlag;
  std::string m_CollectionEntityIpv6Addr;

  unsigned m_CollectionEntityIpv6AddrFlag;
  shared_ptr<unsigned> m_CollectionEntityIpv6AddrOutFlag;
  std::string m_InterfaceList;

  unsigned m_InterfaceListFlag;
  shared_ptr<unsigned> m_InterfaceListOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TraceData_H_ */
