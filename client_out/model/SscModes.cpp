/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SscModes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SscModes::SscModes()
{
    m_DefaultSscModeIsSet = false;
    m_AllowedSscModesIsSet = false;
}

SscModes::~SscModes()
{
}

void SscModes::validate()
{
    // TODO: implement validation
}

web::json::value SscModes::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DefaultSscModeIsSet)
    {
        val[utility::conversions::to_string_t("defaultSscMode")] = ModelBase::toJson(m_DefaultSscMode);
    }
    if(m_AllowedSscModesIsSet)
    {
        val[utility::conversions::to_string_t("allowedSscModes")] = ModelBase::toJson(m_AllowedSscModes);
    }

    return val;
}

bool SscModes::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("defaultSscMode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("defaultSscMode"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SscMode> refVal_defaultSscMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_defaultSscMode);
            setDefaultSscMode(refVal_defaultSscMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("allowedSscModes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("allowedSscModes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SscMode>> refVal_allowedSscModes;
            ok &= ModelBase::fromJson(fieldValue, refVal_allowedSscModes);
            setAllowedSscModes(refVal_allowedSscModes);
        }
    }
    return ok;
}

void SscModes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DefaultSscModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultSscMode"), m_DefaultSscMode));
    }
    if(m_AllowedSscModesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("allowedSscModes"), m_AllowedSscModes));
    }
}

bool SscModes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("defaultSscMode")))
    {
        std::shared_ptr<SscMode> refVal_defaultSscMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultSscMode")), refVal_defaultSscMode );
        setDefaultSscMode(refVal_defaultSscMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("allowedSscModes")))
    {
        std::vector<std::shared_ptr<SscMode>> refVal_allowedSscModes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("allowedSscModes")), refVal_allowedSscModes );
        setAllowedSscModes(refVal_allowedSscModes);
    }
    return ok;
}

std::shared_ptr<SscMode> SscModes::getDefaultSscMode() const
{
    return m_DefaultSscMode;
}

void SscModes::setDefaultSscMode(const std::shared_ptr<SscMode>& value)
{
    m_DefaultSscMode = value;
    m_DefaultSscModeIsSet = true;
}

bool SscModes::defaultSscModeIsSet() const
{
    return m_DefaultSscModeIsSet;
}

void SscModes::unsetDefaultSscMode()
{
    m_DefaultSscModeIsSet = false;
}
std::vector<std::shared_ptr<SscMode>>& SscModes::getAllowedSscModes()
{
    return m_AllowedSscModes;
}

void SscModes::setAllowedSscModes(const std::vector<std::shared_ptr<SscMode>>& value)
{
    m_AllowedSscModes = value;
    m_AllowedSscModesIsSet = true;
}

bool SscModes::allowedSscModesIsSet() const
{
    return m_AllowedSscModesIsSet;
}

void SscModes::unsetAllowedSscModes()
{
    m_AllowedSscModesIsSet = false;
}
}
}
}
}


