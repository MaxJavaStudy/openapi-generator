/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SessionManagementSubscriptionData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SessionManagementSubscriptionData::SessionManagementSubscriptionData()
{
    m_SingleNssaiIsSet = false;
    m_DnnConfigurationsIsSet = false;
    m_InternalGroupIdsIsSet = false;
    m_SharedVnGroupDataIdsIsSet = false;
    m_SharedDnnConfigurationsId = utility::conversions::to_string_t("");
    m_SharedDnnConfigurationsIdIsSet = false;
    m_OdbPacketServicesIsSet = false;
    m_TraceDataIsSet = false;
    m_SharedTraceDataId = utility::conversions::to_string_t("");
    m_SharedTraceDataIdIsSet = false;
    m_ExpectedUeBehavioursListIsSet = false;
    m_SuggestedPacketNumDlListIsSet = false;
    m_r_3gppChargingCharacteristics = utility::conversions::to_string_t("");
    m_r_3gppChargingCharacteristicsIsSet = false;
}

SessionManagementSubscriptionData::~SessionManagementSubscriptionData()
{
}

void SessionManagementSubscriptionData::validate()
{
    // TODO: implement validation
}

web::json::value SessionManagementSubscriptionData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SingleNssaiIsSet)
    {
        val[utility::conversions::to_string_t("singleNssai")] = ModelBase::toJson(m_SingleNssai);
    }
    if(m_DnnConfigurationsIsSet)
    {
        val[utility::conversions::to_string_t("dnnConfigurations")] = ModelBase::toJson(m_DnnConfigurations);
    }
    if(m_InternalGroupIdsIsSet)
    {
        val[utility::conversions::to_string_t("internalGroupIds")] = ModelBase::toJson(m_InternalGroupIds);
    }
    if(m_SharedVnGroupDataIdsIsSet)
    {
        val[utility::conversions::to_string_t("sharedVnGroupDataIds")] = ModelBase::toJson(m_SharedVnGroupDataIds);
    }
    if(m_SharedDnnConfigurationsIdIsSet)
    {
        val[utility::conversions::to_string_t("sharedDnnConfigurationsId")] = ModelBase::toJson(m_SharedDnnConfigurationsId);
    }
    if(m_OdbPacketServicesIsSet)
    {
        val[utility::conversions::to_string_t("odbPacketServices")] = ModelBase::toJson(m_OdbPacketServices);
    }
    if(m_TraceDataIsSet)
    {
        val[utility::conversions::to_string_t("traceData")] = ModelBase::toJson(m_TraceData);
    }
    if(m_SharedTraceDataIdIsSet)
    {
        val[utility::conversions::to_string_t("sharedTraceDataId")] = ModelBase::toJson(m_SharedTraceDataId);
    }
    if(m_ExpectedUeBehavioursListIsSet)
    {
        val[utility::conversions::to_string_t("expectedUeBehavioursList")] = ModelBase::toJson(m_ExpectedUeBehavioursList);
    }
    if(m_SuggestedPacketNumDlListIsSet)
    {
        val[utility::conversions::to_string_t("suggestedPacketNumDlList")] = ModelBase::toJson(m_SuggestedPacketNumDlList);
    }
    if(m_r_3gppChargingCharacteristicsIsSet)
    {
        val[utility::conversions::to_string_t("3gppChargingCharacteristics")] = ModelBase::toJson(m_r_3gppChargingCharacteristics);
    }

    return val;
}

bool SessionManagementSubscriptionData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("singleNssai")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("singleNssai"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_singleNssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_singleNssai);
            setSingleNssai(refVal_singleNssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dnnConfigurations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnnConfigurations"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<DnnConfiguration>> refVal_dnnConfigurations;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnnConfigurations);
            setDnnConfigurations(refVal_dnnConfigurations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalGroupIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalGroupIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_internalGroupIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalGroupIds);
            setInternalGroupIds(refVal_internalGroupIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedVnGroupDataIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedVnGroupDataIds"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<utility::string_t>> refVal_sharedVnGroupDataIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedVnGroupDataIds);
            setSharedVnGroupDataIds(refVal_sharedVnGroupDataIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedDnnConfigurationsId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedDnnConfigurationsId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sharedDnnConfigurationsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedDnnConfigurationsId);
            setSharedDnnConfigurationsId(refVal_sharedDnnConfigurationsId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("odbPacketServices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("odbPacketServices"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OdbPacketServices> refVal_odbPacketServices;
            ok &= ModelBase::fromJson(fieldValue, refVal_odbPacketServices);
            setOdbPacketServices(refVal_odbPacketServices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("traceData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traceData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TraceData> refVal_traceData;
            ok &= ModelBase::fromJson(fieldValue, refVal_traceData);
            setTraceData(refVal_traceData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedTraceDataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedTraceDataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sharedTraceDataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedTraceDataId);
            setSharedTraceDataId(refVal_sharedTraceDataId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expectedUeBehavioursList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expectedUeBehavioursList"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<ExpectedUeBehaviourData>> refVal_expectedUeBehavioursList;
            ok &= ModelBase::fromJson(fieldValue, refVal_expectedUeBehavioursList);
            setExpectedUeBehavioursList(refVal_expectedUeBehavioursList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suggestedPacketNumDlList")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suggestedPacketNumDlList"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<SuggestedPacketNumDl>> refVal_suggestedPacketNumDlList;
            ok &= ModelBase::fromJson(fieldValue, refVal_suggestedPacketNumDlList);
            setSuggestedPacketNumDlList(refVal_suggestedPacketNumDlList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("3gppChargingCharacteristics")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("3gppChargingCharacteristics"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_3gppChargingCharacteristics;
            ok &= ModelBase::fromJson(fieldValue, refVal_3gppChargingCharacteristics);
            setR3gppChargingCharacteristics(refVal_3gppChargingCharacteristics);
        }
    }
    return ok;
}

void SessionManagementSubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SingleNssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("singleNssai"), m_SingleNssai));
    }
    if(m_DnnConfigurationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnnConfigurations"), m_DnnConfigurations));
    }
    if(m_InternalGroupIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalGroupIds"), m_InternalGroupIds));
    }
    if(m_SharedVnGroupDataIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedVnGroupDataIds"), m_SharedVnGroupDataIds));
    }
    if(m_SharedDnnConfigurationsIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedDnnConfigurationsId"), m_SharedDnnConfigurationsId));
    }
    if(m_OdbPacketServicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("odbPacketServices"), m_OdbPacketServices));
    }
    if(m_TraceDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceData"), m_TraceData));
    }
    if(m_SharedTraceDataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedTraceDataId"), m_SharedTraceDataId));
    }
    if(m_ExpectedUeBehavioursListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expectedUeBehavioursList"), m_ExpectedUeBehavioursList));
    }
    if(m_SuggestedPacketNumDlListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suggestedPacketNumDlList"), m_SuggestedPacketNumDlList));
    }
    if(m_r_3gppChargingCharacteristicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("3gppChargingCharacteristics"), m_r_3gppChargingCharacteristics));
    }
}

bool SessionManagementSubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("singleNssai")))
    {
        std::shared_ptr<Snssai> refVal_singleNssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("singleNssai")), refVal_singleNssai );
        setSingleNssai(refVal_singleNssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dnnConfigurations")))
    {
        std::map<utility::string_t, std::shared_ptr<DnnConfiguration>> refVal_dnnConfigurations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnnConfigurations")), refVal_dnnConfigurations );
        setDnnConfigurations(refVal_dnnConfigurations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalGroupIds")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_internalGroupIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalGroupIds")), refVal_internalGroupIds );
        setInternalGroupIds(refVal_internalGroupIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedVnGroupDataIds")))
    {
        std::map<utility::string_t, std::shared_ptr<utility::string_t>> refVal_sharedVnGroupDataIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedVnGroupDataIds")), refVal_sharedVnGroupDataIds );
        setSharedVnGroupDataIds(refVal_sharedVnGroupDataIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedDnnConfigurationsId")))
    {
        utility::string_t refVal_sharedDnnConfigurationsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedDnnConfigurationsId")), refVal_sharedDnnConfigurationsId );
        setSharedDnnConfigurationsId(refVal_sharedDnnConfigurationsId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("odbPacketServices")))
    {
        std::shared_ptr<OdbPacketServices> refVal_odbPacketServices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("odbPacketServices")), refVal_odbPacketServices );
        setOdbPacketServices(refVal_odbPacketServices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("traceData")))
    {
        std::shared_ptr<TraceData> refVal_traceData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceData")), refVal_traceData );
        setTraceData(refVal_traceData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedTraceDataId")))
    {
        utility::string_t refVal_sharedTraceDataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedTraceDataId")), refVal_sharedTraceDataId );
        setSharedTraceDataId(refVal_sharedTraceDataId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expectedUeBehavioursList")))
    {
        std::map<utility::string_t, std::shared_ptr<ExpectedUeBehaviourData>> refVal_expectedUeBehavioursList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expectedUeBehavioursList")), refVal_expectedUeBehavioursList );
        setExpectedUeBehavioursList(refVal_expectedUeBehavioursList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suggestedPacketNumDlList")))
    {
        std::map<utility::string_t, std::shared_ptr<SuggestedPacketNumDl>> refVal_suggestedPacketNumDlList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suggestedPacketNumDlList")), refVal_suggestedPacketNumDlList );
        setSuggestedPacketNumDlList(refVal_suggestedPacketNumDlList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("3gppChargingCharacteristics")))
    {
        utility::string_t refVal_3gppChargingCharacteristics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("3gppChargingCharacteristics")), refVal_3gppChargingCharacteristics );
        setR3gppChargingCharacteristics(refVal_3gppChargingCharacteristics);
    }
    return ok;
}

std::shared_ptr<Snssai> SessionManagementSubscriptionData::getSingleNssai() const
{
    return m_SingleNssai;
}

void SessionManagementSubscriptionData::setSingleNssai(const std::shared_ptr<Snssai>& value)
{
    m_SingleNssai = value;
    m_SingleNssaiIsSet = true;
}

bool SessionManagementSubscriptionData::singleNssaiIsSet() const
{
    return m_SingleNssaiIsSet;
}

void SessionManagementSubscriptionData::unsetSingleNssai()
{
    m_SingleNssaiIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<DnnConfiguration>>& SessionManagementSubscriptionData::getDnnConfigurations()
{
    return m_DnnConfigurations;
}

void SessionManagementSubscriptionData::setDnnConfigurations(const std::map<utility::string_t, std::shared_ptr<DnnConfiguration>>& value)
{
    m_DnnConfigurations = value;
    m_DnnConfigurationsIsSet = true;
}

bool SessionManagementSubscriptionData::dnnConfigurationsIsSet() const
{
    return m_DnnConfigurationsIsSet;
}

void SessionManagementSubscriptionData::unsetDnnConfigurations()
{
    m_DnnConfigurationsIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& SessionManagementSubscriptionData::getInternalGroupIds()
{
    return m_InternalGroupIds;
}

void SessionManagementSubscriptionData::setInternalGroupIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_InternalGroupIds = value;
    m_InternalGroupIdsIsSet = true;
}

bool SessionManagementSubscriptionData::internalGroupIdsIsSet() const
{
    return m_InternalGroupIdsIsSet;
}

void SessionManagementSubscriptionData::unsetInternalGroupIds()
{
    m_InternalGroupIdsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<utility::string_t>>& SessionManagementSubscriptionData::getSharedVnGroupDataIds()
{
    return m_SharedVnGroupDataIds;
}

void SessionManagementSubscriptionData::setSharedVnGroupDataIds(const std::map<utility::string_t, std::shared_ptr<utility::string_t>>& value)
{
    m_SharedVnGroupDataIds = value;
    m_SharedVnGroupDataIdsIsSet = true;
}

bool SessionManagementSubscriptionData::sharedVnGroupDataIdsIsSet() const
{
    return m_SharedVnGroupDataIdsIsSet;
}

void SessionManagementSubscriptionData::unsetSharedVnGroupDataIds()
{
    m_SharedVnGroupDataIdsIsSet = false;
}
utility::string_t SessionManagementSubscriptionData::getSharedDnnConfigurationsId() const
{
    return m_SharedDnnConfigurationsId;
}

void SessionManagementSubscriptionData::setSharedDnnConfigurationsId(const utility::string_t& value)
{
    m_SharedDnnConfigurationsId = value;
    m_SharedDnnConfigurationsIdIsSet = true;
}

bool SessionManagementSubscriptionData::sharedDnnConfigurationsIdIsSet() const
{
    return m_SharedDnnConfigurationsIdIsSet;
}

void SessionManagementSubscriptionData::unsetSharedDnnConfigurationsId()
{
    m_SharedDnnConfigurationsIdIsSet = false;
}
std::shared_ptr<OdbPacketServices> SessionManagementSubscriptionData::getOdbPacketServices() const
{
    return m_OdbPacketServices;
}

void SessionManagementSubscriptionData::setOdbPacketServices(const std::shared_ptr<OdbPacketServices>& value)
{
    m_OdbPacketServices = value;
    m_OdbPacketServicesIsSet = true;
}

bool SessionManagementSubscriptionData::odbPacketServicesIsSet() const
{
    return m_OdbPacketServicesIsSet;
}

void SessionManagementSubscriptionData::unsetOdbPacketServices()
{
    m_OdbPacketServicesIsSet = false;
}
std::shared_ptr<TraceData> SessionManagementSubscriptionData::getTraceData() const
{
    return m_TraceData;
}

void SessionManagementSubscriptionData::setTraceData(const std::shared_ptr<TraceData>& value)
{
    m_TraceData = value;
    m_TraceDataIsSet = true;
}

bool SessionManagementSubscriptionData::traceDataIsSet() const
{
    return m_TraceDataIsSet;
}

void SessionManagementSubscriptionData::unsetTraceData()
{
    m_TraceDataIsSet = false;
}
utility::string_t SessionManagementSubscriptionData::getSharedTraceDataId() const
{
    return m_SharedTraceDataId;
}

void SessionManagementSubscriptionData::setSharedTraceDataId(const utility::string_t& value)
{
    m_SharedTraceDataId = value;
    m_SharedTraceDataIdIsSet = true;
}

bool SessionManagementSubscriptionData::sharedTraceDataIdIsSet() const
{
    return m_SharedTraceDataIdIsSet;
}

void SessionManagementSubscriptionData::unsetSharedTraceDataId()
{
    m_SharedTraceDataIdIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<ExpectedUeBehaviourData>>& SessionManagementSubscriptionData::getExpectedUeBehavioursList()
{
    return m_ExpectedUeBehavioursList;
}

void SessionManagementSubscriptionData::setExpectedUeBehavioursList(const std::map<utility::string_t, std::shared_ptr<ExpectedUeBehaviourData>>& value)
{
    m_ExpectedUeBehavioursList = value;
    m_ExpectedUeBehavioursListIsSet = true;
}

bool SessionManagementSubscriptionData::expectedUeBehavioursListIsSet() const
{
    return m_ExpectedUeBehavioursListIsSet;
}

void SessionManagementSubscriptionData::unsetExpectedUeBehavioursList()
{
    m_ExpectedUeBehavioursListIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<SuggestedPacketNumDl>>& SessionManagementSubscriptionData::getSuggestedPacketNumDlList()
{
    return m_SuggestedPacketNumDlList;
}

void SessionManagementSubscriptionData::setSuggestedPacketNumDlList(const std::map<utility::string_t, std::shared_ptr<SuggestedPacketNumDl>>& value)
{
    m_SuggestedPacketNumDlList = value;
    m_SuggestedPacketNumDlListIsSet = true;
}

bool SessionManagementSubscriptionData::suggestedPacketNumDlListIsSet() const
{
    return m_SuggestedPacketNumDlListIsSet;
}

void SessionManagementSubscriptionData::unsetSuggestedPacketNumDlList()
{
    m_SuggestedPacketNumDlListIsSet = false;
}
utility::string_t SessionManagementSubscriptionData::getR3gppChargingCharacteristics() const
{
    return m_r_3gppChargingCharacteristics;
}

void SessionManagementSubscriptionData::setR3gppChargingCharacteristics(const utility::string_t& value)
{
    m_r_3gppChargingCharacteristics = value;
    m_r_3gppChargingCharacteristicsIsSet = true;
}

bool SessionManagementSubscriptionData::r3gppChargingCharacteristicsIsSet() const
{
    return m_r_3gppChargingCharacteristicsIsSet;
}

void SessionManagementSubscriptionData::unsetr_3gppChargingCharacteristics()
{
    m_r_3gppChargingCharacteristicsIsSet = false;
}
}
}
}
}


