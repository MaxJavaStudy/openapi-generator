/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsManagementSubscriptionData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SmsManagementSubscriptionData::SmsManagementSubscriptionData()
{
    m_SupportedFeatures = utility::conversions::to_string_t("");
    m_SupportedFeaturesIsSet = false;
    m_MtSmsSubscribed = false;
    m_MtSmsSubscribedIsSet = false;
    m_MtSmsBarringAll = false;
    m_MtSmsBarringAllIsSet = false;
    m_MtSmsBarringRoaming = false;
    m_MtSmsBarringRoamingIsSet = false;
    m_MoSmsSubscribed = false;
    m_MoSmsSubscribedIsSet = false;
    m_MoSmsBarringAll = false;
    m_MoSmsBarringAllIsSet = false;
    m_MoSmsBarringRoaming = false;
    m_MoSmsBarringRoamingIsSet = false;
    m_SharedSmsMngDataIdsIsSet = false;
    m_TraceDataIsSet = false;
}

SmsManagementSubscriptionData::~SmsManagementSubscriptionData()
{
}

void SmsManagementSubscriptionData::validate()
{
    // TODO: implement validation
}

web::json::value SmsManagementSubscriptionData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SupportedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("supportedFeatures")] = ModelBase::toJson(m_SupportedFeatures);
    }
    if(m_MtSmsSubscribedIsSet)
    {
        val[utility::conversions::to_string_t("mtSmsSubscribed")] = ModelBase::toJson(m_MtSmsSubscribed);
    }
    if(m_MtSmsBarringAllIsSet)
    {
        val[utility::conversions::to_string_t("mtSmsBarringAll")] = ModelBase::toJson(m_MtSmsBarringAll);
    }
    if(m_MtSmsBarringRoamingIsSet)
    {
        val[utility::conversions::to_string_t("mtSmsBarringRoaming")] = ModelBase::toJson(m_MtSmsBarringRoaming);
    }
    if(m_MoSmsSubscribedIsSet)
    {
        val[utility::conversions::to_string_t("moSmsSubscribed")] = ModelBase::toJson(m_MoSmsSubscribed);
    }
    if(m_MoSmsBarringAllIsSet)
    {
        val[utility::conversions::to_string_t("moSmsBarringAll")] = ModelBase::toJson(m_MoSmsBarringAll);
    }
    if(m_MoSmsBarringRoamingIsSet)
    {
        val[utility::conversions::to_string_t("moSmsBarringRoaming")] = ModelBase::toJson(m_MoSmsBarringRoaming);
    }
    if(m_SharedSmsMngDataIdsIsSet)
    {
        val[utility::conversions::to_string_t("sharedSmsMngDataIds")] = ModelBase::toJson(m_SharedSmsMngDataIds);
    }
    if(m_TraceDataIsSet)
    {
        val[utility::conversions::to_string_t("traceData")] = ModelBase::toJson(m_TraceData);
    }

    return val;
}

bool SmsManagementSubscriptionData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("supportedFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supportedFeatures"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedFeatures);
            setSupportedFeatures(refVal_supportedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mtSmsSubscribed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mtSmsSubscribed"));
        if(!fieldValue.is_null())
        {
            bool refVal_mtSmsSubscribed;
            ok &= ModelBase::fromJson(fieldValue, refVal_mtSmsSubscribed);
            setMtSmsSubscribed(refVal_mtSmsSubscribed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mtSmsBarringAll")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mtSmsBarringAll"));
        if(!fieldValue.is_null())
        {
            bool refVal_mtSmsBarringAll;
            ok &= ModelBase::fromJson(fieldValue, refVal_mtSmsBarringAll);
            setMtSmsBarringAll(refVal_mtSmsBarringAll);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mtSmsBarringRoaming")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mtSmsBarringRoaming"));
        if(!fieldValue.is_null())
        {
            bool refVal_mtSmsBarringRoaming;
            ok &= ModelBase::fromJson(fieldValue, refVal_mtSmsBarringRoaming);
            setMtSmsBarringRoaming(refVal_mtSmsBarringRoaming);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moSmsSubscribed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moSmsSubscribed"));
        if(!fieldValue.is_null())
        {
            bool refVal_moSmsSubscribed;
            ok &= ModelBase::fromJson(fieldValue, refVal_moSmsSubscribed);
            setMoSmsSubscribed(refVal_moSmsSubscribed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moSmsBarringAll")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moSmsBarringAll"));
        if(!fieldValue.is_null())
        {
            bool refVal_moSmsBarringAll;
            ok &= ModelBase::fromJson(fieldValue, refVal_moSmsBarringAll);
            setMoSmsBarringAll(refVal_moSmsBarringAll);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moSmsBarringRoaming")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moSmsBarringRoaming"));
        if(!fieldValue.is_null())
        {
            bool refVal_moSmsBarringRoaming;
            ok &= ModelBase::fromJson(fieldValue, refVal_moSmsBarringRoaming);
            setMoSmsBarringRoaming(refVal_moSmsBarringRoaming);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedSmsMngDataIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedSmsMngDataIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_sharedSmsMngDataIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedSmsMngDataIds);
            setSharedSmsMngDataIds(refVal_sharedSmsMngDataIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("traceData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traceData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TraceData> refVal_traceData;
            ok &= ModelBase::fromJson(fieldValue, refVal_traceData);
            setTraceData(refVal_traceData);
        }
    }
    return ok;
}

void SmsManagementSubscriptionData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SupportedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportedFeatures"), m_SupportedFeatures));
    }
    if(m_MtSmsSubscribedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mtSmsSubscribed"), m_MtSmsSubscribed));
    }
    if(m_MtSmsBarringAllIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mtSmsBarringAll"), m_MtSmsBarringAll));
    }
    if(m_MtSmsBarringRoamingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mtSmsBarringRoaming"), m_MtSmsBarringRoaming));
    }
    if(m_MoSmsSubscribedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moSmsSubscribed"), m_MoSmsSubscribed));
    }
    if(m_MoSmsBarringAllIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moSmsBarringAll"), m_MoSmsBarringAll));
    }
    if(m_MoSmsBarringRoamingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moSmsBarringRoaming"), m_MoSmsBarringRoaming));
    }
    if(m_SharedSmsMngDataIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedSmsMngDataIds"), m_SharedSmsMngDataIds));
    }
    if(m_TraceDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceData"), m_TraceData));
    }
}

bool SmsManagementSubscriptionData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("supportedFeatures")))
    {
        utility::string_t refVal_supportedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportedFeatures")), refVal_supportedFeatures );
        setSupportedFeatures(refVal_supportedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mtSmsSubscribed")))
    {
        bool refVal_mtSmsSubscribed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mtSmsSubscribed")), refVal_mtSmsSubscribed );
        setMtSmsSubscribed(refVal_mtSmsSubscribed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mtSmsBarringAll")))
    {
        bool refVal_mtSmsBarringAll;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mtSmsBarringAll")), refVal_mtSmsBarringAll );
        setMtSmsBarringAll(refVal_mtSmsBarringAll);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mtSmsBarringRoaming")))
    {
        bool refVal_mtSmsBarringRoaming;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mtSmsBarringRoaming")), refVal_mtSmsBarringRoaming );
        setMtSmsBarringRoaming(refVal_mtSmsBarringRoaming);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moSmsSubscribed")))
    {
        bool refVal_moSmsSubscribed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moSmsSubscribed")), refVal_moSmsSubscribed );
        setMoSmsSubscribed(refVal_moSmsSubscribed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moSmsBarringAll")))
    {
        bool refVal_moSmsBarringAll;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moSmsBarringAll")), refVal_moSmsBarringAll );
        setMoSmsBarringAll(refVal_moSmsBarringAll);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moSmsBarringRoaming")))
    {
        bool refVal_moSmsBarringRoaming;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moSmsBarringRoaming")), refVal_moSmsBarringRoaming );
        setMoSmsBarringRoaming(refVal_moSmsBarringRoaming);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedSmsMngDataIds")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_sharedSmsMngDataIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedSmsMngDataIds")), refVal_sharedSmsMngDataIds );
        setSharedSmsMngDataIds(refVal_sharedSmsMngDataIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("traceData")))
    {
        std::shared_ptr<TraceData> refVal_traceData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceData")), refVal_traceData );
        setTraceData(refVal_traceData);
    }
    return ok;
}

utility::string_t SmsManagementSubscriptionData::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void SmsManagementSubscriptionData::setSupportedFeatures(const utility::string_t& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}

bool SmsManagementSubscriptionData::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}

void SmsManagementSubscriptionData::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}
bool SmsManagementSubscriptionData::isMtSmsSubscribed() const
{
    return m_MtSmsSubscribed;
}

void SmsManagementSubscriptionData::setMtSmsSubscribed(bool value)
{
    m_MtSmsSubscribed = value;
    m_MtSmsSubscribedIsSet = true;
}

bool SmsManagementSubscriptionData::mtSmsSubscribedIsSet() const
{
    return m_MtSmsSubscribedIsSet;
}

void SmsManagementSubscriptionData::unsetMtSmsSubscribed()
{
    m_MtSmsSubscribedIsSet = false;
}
bool SmsManagementSubscriptionData::isMtSmsBarringAll() const
{
    return m_MtSmsBarringAll;
}

void SmsManagementSubscriptionData::setMtSmsBarringAll(bool value)
{
    m_MtSmsBarringAll = value;
    m_MtSmsBarringAllIsSet = true;
}

bool SmsManagementSubscriptionData::mtSmsBarringAllIsSet() const
{
    return m_MtSmsBarringAllIsSet;
}

void SmsManagementSubscriptionData::unsetMtSmsBarringAll()
{
    m_MtSmsBarringAllIsSet = false;
}
bool SmsManagementSubscriptionData::isMtSmsBarringRoaming() const
{
    return m_MtSmsBarringRoaming;
}

void SmsManagementSubscriptionData::setMtSmsBarringRoaming(bool value)
{
    m_MtSmsBarringRoaming = value;
    m_MtSmsBarringRoamingIsSet = true;
}

bool SmsManagementSubscriptionData::mtSmsBarringRoamingIsSet() const
{
    return m_MtSmsBarringRoamingIsSet;
}

void SmsManagementSubscriptionData::unsetMtSmsBarringRoaming()
{
    m_MtSmsBarringRoamingIsSet = false;
}
bool SmsManagementSubscriptionData::isMoSmsSubscribed() const
{
    return m_MoSmsSubscribed;
}

void SmsManagementSubscriptionData::setMoSmsSubscribed(bool value)
{
    m_MoSmsSubscribed = value;
    m_MoSmsSubscribedIsSet = true;
}

bool SmsManagementSubscriptionData::moSmsSubscribedIsSet() const
{
    return m_MoSmsSubscribedIsSet;
}

void SmsManagementSubscriptionData::unsetMoSmsSubscribed()
{
    m_MoSmsSubscribedIsSet = false;
}
bool SmsManagementSubscriptionData::isMoSmsBarringAll() const
{
    return m_MoSmsBarringAll;
}

void SmsManagementSubscriptionData::setMoSmsBarringAll(bool value)
{
    m_MoSmsBarringAll = value;
    m_MoSmsBarringAllIsSet = true;
}

bool SmsManagementSubscriptionData::moSmsBarringAllIsSet() const
{
    return m_MoSmsBarringAllIsSet;
}

void SmsManagementSubscriptionData::unsetMoSmsBarringAll()
{
    m_MoSmsBarringAllIsSet = false;
}
bool SmsManagementSubscriptionData::isMoSmsBarringRoaming() const
{
    return m_MoSmsBarringRoaming;
}

void SmsManagementSubscriptionData::setMoSmsBarringRoaming(bool value)
{
    m_MoSmsBarringRoaming = value;
    m_MoSmsBarringRoamingIsSet = true;
}

bool SmsManagementSubscriptionData::moSmsBarringRoamingIsSet() const
{
    return m_MoSmsBarringRoamingIsSet;
}

void SmsManagementSubscriptionData::unsetMoSmsBarringRoaming()
{
    m_MoSmsBarringRoamingIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& SmsManagementSubscriptionData::getSharedSmsMngDataIds()
{
    return m_SharedSmsMngDataIds;
}

void SmsManagementSubscriptionData::setSharedSmsMngDataIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_SharedSmsMngDataIds = value;
    m_SharedSmsMngDataIdsIsSet = true;
}

bool SmsManagementSubscriptionData::sharedSmsMngDataIdsIsSet() const
{
    return m_SharedSmsMngDataIdsIsSet;
}

void SmsManagementSubscriptionData::unsetSharedSmsMngDataIds()
{
    m_SharedSmsMngDataIdsIsSet = false;
}
std::shared_ptr<TraceData> SmsManagementSubscriptionData::getTraceData() const
{
    return m_TraceData;
}

void SmsManagementSubscriptionData::setTraceData(const std::shared_ptr<TraceData>& value)
{
    m_TraceData = value;
    m_TraceDataIsSet = true;
}

bool SmsManagementSubscriptionData::traceDataIsSet() const
{
    return m_TraceDataIsSet;
}

void SmsManagementSubscriptionData::unsetTraceData()
{
    m_TraceDataIsSet = false;
}
}
}
}
}


