/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ProblemDetails.h
 *
 *
 */

#ifndef ProblemDetails_H_
#define ProblemDetails_H_

#include "InvalidParam.h"
#include "jsonParser/jsonParser.hpp"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ProblemDetails : public jsonParser::jsonParser<ProblemDetails> {
public:
  explicit ProblemDetails() {
    // constructor
    m_Type = "";

    m_TypeFlag = (staticjson::Flags::Optional);
    m_Title = "";

    m_TitleFlag = (staticjson::Flags::Optional);
    m_Status = 0;

    m_StatusFlag = (staticjson::Flags::Optional);
    m_Detail = "";

    m_DetailFlag = (staticjson::Flags::Optional);
    m_Instance = "";

    m_InstanceFlag = (staticjson::Flags::Optional);
    m_Cause = "";

    m_CauseFlag = (staticjson::Flags::Optional);

    m_InvalidParamsFlag = (staticjson::Flags::Optional);
  };
  virtual ~ProblemDetails(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Type Title Status Detail Instance
    // Cause InvalidParams
    h->add_property("type", &this->m_Type, m_TypeFlag);
    h->add_property("title", &this->m_Title, m_TitleFlag);
    h->add_property("status", &this->m_Status, m_StatusFlag);
    h->add_property("detail", &this->m_Detail, m_DetailFlag);
    h->add_property("instance", &this->m_Instance, m_InstanceFlag);
    h->add_property("cause", &this->m_Cause, m_CauseFlag);
    h->add_property("invalidParams", &this->m_InvalidParams,
                    m_InvalidParamsFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const ProblemDetails &obj) {

    o << "Type : " << obj.m_Type << std::endl;

    o << "Title : " << obj.m_Title << std::endl;

    o << "Status : " << obj.m_Status << std::endl;

    o << "Detail : " << obj.m_Detail << std::endl;

    o << "Instance : " << obj.m_Instance << std::endl;

    o << "Cause : " << obj.m_Cause << std::endl;
    o << convert2string(std::string("InvalidParams"), obj.m_InvalidParams)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// ProblemDetails members vars : Type Title Status Detail Instance Cause
  /// InvalidParams

  std::string getType() const { return m_Type; }
  void setType(std::string const &value) { m_Type = value; }

  std::string getTitle() const { return m_Title; }
  void setTitle(std::string const &value) { m_Title = value; }

  int32_t getStatus() const { return m_Status; }
  void setStatus(int32_t const value) { m_Status = value; }

  std::string getDetail() const { return m_Detail; }
  void setDetail(std::string const &value) { m_Detail = value; }

  std::string getInstance() const { return m_Instance; }
  void setInstance(std::string const &value) { m_Instance = value; }

  std::string getCause() const { return m_Cause; }
  void setCause(std::string const &value) { m_Cause = value; }

  std::vector<InvalidParam> &getInvalidParams() { return m_InvalidParams; }
  void setInvalidParams(std::vector<InvalidParam> const &value) {
    m_InvalidParams = value;
  }

public:
  std::string m_Type;

  unsigned m_TypeFlag;
  std::string m_Title;

  unsigned m_TitleFlag;
  int32_t m_Status;

  unsigned m_StatusFlag;
  std::string m_Detail;

  unsigned m_DetailFlag;
  std::string m_Instance;

  unsigned m_InstanceFlag;
  std::string m_Cause;

  unsigned m_CauseFlag;
  std::vector<InvalidParam> m_InvalidParams;

  unsigned m_InvalidParamsFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ProblemDetails_H_ */
