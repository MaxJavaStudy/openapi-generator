/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NotifyItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




NotifyItem::NotifyItem()
{
    m_ResourceId = utility::conversions::to_string_t("");
    m_ResourceIdIsSet = false;
    m_ChangesIsSet = false;
}

NotifyItem::~NotifyItem()
{
}

void NotifyItem::validate()
{
    // TODO: implement validation
}

web::json::value NotifyItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ResourceIdIsSet)
    {
        val[utility::conversions::to_string_t("resourceId")] = ModelBase::toJson(m_ResourceId);
    }
    if(m_ChangesIsSet)
    {
        val[utility::conversions::to_string_t("changes")] = ModelBase::toJson(m_Changes);
    }

    return val;
}

bool NotifyItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("resourceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resourceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_resourceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_resourceId);
            setResourceId(refVal_resourceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("changes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("changes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ChangeItem>> refVal_changes;
            ok &= ModelBase::fromJson(fieldValue, refVal_changes);
            setChanges(refVal_changes);
        }
    }
    return ok;
}

void NotifyItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ResourceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resourceId"), m_ResourceId));
    }
    if(m_ChangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("changes"), m_Changes));
    }
}

bool NotifyItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("resourceId")))
    {
        utility::string_t refVal_resourceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resourceId")), refVal_resourceId );
        setResourceId(refVal_resourceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("changes")))
    {
        std::vector<std::shared_ptr<ChangeItem>> refVal_changes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("changes")), refVal_changes );
        setChanges(refVal_changes);
    }
    return ok;
}

utility::string_t NotifyItem::getResourceId() const
{
    return m_ResourceId;
}

void NotifyItem::setResourceId(const utility::string_t& value)
{
    m_ResourceId = value;
    m_ResourceIdIsSet = true;
}

bool NotifyItem::resourceIdIsSet() const
{
    return m_ResourceIdIsSet;
}

void NotifyItem::unsetResourceId()
{
    m_ResourceIdIsSet = false;
}
std::vector<std::shared_ptr<ChangeItem>>& NotifyItem::getChanges()
{
    return m_Changes;
}

void NotifyItem::setChanges(const std::vector<std::shared_ptr<ChangeItem>>& value)
{
    m_Changes = value;
    m_ChangesIsSet = true;
}

bool NotifyItem::changesIsSet() const
{
    return m_ChangesIsSet;
}

void NotifyItem::unsetChanges()
{
    m_ChangesIsSet = false;
}
}
}
}
}


