/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AppPortId.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef AppPortId_H_
#define AppPortId_H_

#include "CSB_JsonParser.h"
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AppPortId : public jsonParser::jsonParser<AppPortId> {
public:
  explicit AppPortId() {
    // constructor
    m_DestinationPort = 0;

    m_DestinationPortFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DestinationPortOutFlag.reset(new unsigned);
    *m_DestinationPortOutFlag.get() = 0;
    m_OriginatorPort = 0;

    m_OriginatorPortFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_OriginatorPortOutFlag.reset(new unsigned);
    *m_OriginatorPortOutFlag.get() = 0;
  };
  virtual ~AppPortId(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DestinationPort OriginatorPort
    h->add_optional_property("destinationPort", &this->m_DestinationPort,
                             m_DestinationPortFlag, m_DestinationPortOutFlag);
    h->add_optional_property("originatorPort", &this->m_OriginatorPort,
                             m_OriginatorPortFlag, m_OriginatorPortOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const AppPortId &obj) {

    o << "DestinationPort, optional flag is : " << *m_DestinationPortOutFlag
      << ", content is : " << obj.m_DestinationPort << std::endl;

    o << "OriginatorPort, optional flag is : " << *m_OriginatorPortOutFlag
      << ", content is : " << obj.m_OriginatorPort << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// AppPortId members vars : DestinationPort OriginatorPort

  int32_t getDestinationPort() const { return m_DestinationPort; }
  void setDestinationPort(int32_t const value) { m_DestinationPort = value; }

  int32_t getOriginatorPort() const { return m_OriginatorPort; }
  void setOriginatorPort(int32_t const value) { m_OriginatorPort = value; }

public:
  int32_t m_DestinationPort;

  unsigned m_DestinationPortFlag;
  shared_ptr<unsigned> m_DestinationPortOutFlag;
  int32_t m_OriginatorPort;

  unsigned m_OriginatorPortFlag;
  shared_ptr<unsigned> m_OriginatorPortOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AppPortId_H_ */
