/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DicEntryIdDocumentApi.c
 *
 *
 */

#include "jsonParser.hpp"

#include <nghttp2/asio_http2_server.h>

#include "DicEntryIdDocumentApi.h"
#include "DicEntryIdDocumentApiImpl.h"

using namespace nghttp2::asio_http2::server;
using namespace nghttp2::asio_http2;

#include "DicEntryData.h"
#include "ProblemDetails.h"
#include "RacFormat.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

void DicEntryIdDocumentApi::get_dic_entry_handler(request &requestIn,
                                                  response &responseIn) {
  // Getting the path params
  //  //<param name="dicEntryId">the ID of a dictionary entry in the UCMF
  //  parameter type int32_t </param>
  // openAPI type:   int
  int32_t dicEntryId;

  if (requestIn.param().count("dicEntryId")) {

    // to do : more rainy day consider?
    // it is integer
    dicEntryId = std::stoi(requestIn.param()["dicEntryId"]);
  }

  // Getting the query params
  std::map<std::string, std::string> queryMap;
  if (!requestIn.uri().raw_query.empty()) {
    queryMap = getQueryMap::get(requestIn.uri().raw_query);
  }

  std::string racFormatQuery;

  if (queryMap.count("rac-format")) {
    racFormatQuery = (queryMap).at("rac-format");
  }
  std::optional<RacFormat> racFormat;

  //<param name="racFormat">Encoding format of of RAC Info parameter type
  //RacFormat   (optional, default to RacFormat())</param>

  if (!racFormatQuery.empty()) {
    staticjson::ParseStatus result;
    auto ret = (*racFormat).decode(racFormatQuery, result);
    std::cout << "validation report is :" << ret.second << std::endl;
    std::cout << "parse result: " << (int)ret.first << std::endl;
    // std::move(racFormatQuery)
  }

  std::string supportedFeaturesQuery;

  if (queryMap.count("supported-features")) {
    supportedFeaturesQuery = (queryMap).at("supported-features");
  }
  std::optional<std::string> supportedFeatures;

  //<param name="supportedFeatures">supported features of the NF consumer
  //parameter type std::string   (optional, default to &quot;&quot;)</param>

  // PrimitiveType
  if (!supportedFeaturesQuery.empty()) {
    supportedFeatures.emplace(supportedFeaturesQuery);
  }

  try {
    /// <param name="dicEntryId">the ID of a dictionary entry in the
    /// UCMF</param> <param name="racFormat">Encoding format of of RAC Info
    /// (optional, default to RacFormat())</param> <param
    /// name="supportedFeatures">supported features of the NF consumer
    /// (optional, default to &quot;&quot;)</param>
    DicEntryIdDocumentApiImpl::get_dic_entry(
        dicEntryId, racFormat, supportedFeatures, requestIn, responseIn);

  } catch (std::exception &e) {
    responseIn.write_head(500);
    responseIn.end(e.what());
    // send a 500 error
    return;
  }
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
