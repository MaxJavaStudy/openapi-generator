/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetworkAreaInfo.h
 *
 * Describes a network area information in which the NF service consumer
 * requests the number of UEs. if you need to add new attribure, please contact
 * max.cong@nokia-sbell.com to generate new code.
 */

#ifndef NetworkAreaInfo_H_
#define NetworkAreaInfo_H_

#include "CSB_JsonParser.h"
#include "Ecgi.h"
#include "GlobalRanNodeId.h"
#include "Ncgi.h"
#include "Tai.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes a network area information in which the NF service consumer
/// requests the number of UEs.
/// </summary>
class NetworkAreaInfo : public jsonParser::jsonParser<NetworkAreaInfo> {
public:
  explicit NetworkAreaInfo() {
    // constructor

    m_EcgisFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_EcgisOutFlag.reset(new unsigned);
    *m_EcgisOutFlag.get() = 0;

    m_NcgisFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_NcgisOutFlag.reset(new unsigned);
    *m_NcgisOutFlag.get() = 0;

    m_GRanNodeIdsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_GRanNodeIdsOutFlag.reset(new unsigned);
    *m_GRanNodeIdsOutFlag.get() = 0;

    m_TaisFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_TaisOutFlag.reset(new unsigned);
    *m_TaisOutFlag.get() = 0;
  };
  virtual ~NetworkAreaInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Ecgis Ncgis GRanNodeIds Tais
    h->add_optional_property("ecgis", &this->m_Ecgis, m_EcgisFlag,
                             m_EcgisOutFlag);
    h->add_optional_property("ncgis", &this->m_Ncgis, m_NcgisFlag,
                             m_NcgisOutFlag);
    h->add_optional_property("gRanNodeIds", &this->m_GRanNodeIds,
                             m_GRanNodeIdsFlag, m_GRanNodeIdsOutFlag);
    h->add_optional_property("tais", &this->m_Tais, m_TaisFlag, m_TaisOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const NetworkAreaInfo &obj) {
    o << "Ecgis, optional flag is : " << *m_EcgisOutFlag << std::endl;
    o << convert2string(std::string("Ecgis"), obj.m_Ecgis) << std::endl;
    o << "Ncgis, optional flag is : " << *m_NcgisOutFlag << std::endl;
    o << convert2string(std::string("Ncgis"), obj.m_Ncgis) << std::endl;
    o << "GRanNodeIds, optional flag is : " << *m_GRanNodeIdsOutFlag
      << std::endl;
    o << convert2string(std::string("GRanNodeIds"), obj.m_GRanNodeIds)
      << std::endl;
    o << "Tais, optional flag is : " << *m_TaisOutFlag << std::endl;
    o << convert2string(std::string("Tais"), obj.m_Tais) << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// NetworkAreaInfo members vars : Ecgis Ncgis GRanNodeIds Tais

  std::vector<Ecgi> &getEcgis() { return m_Ecgis; }
  void setEcgis(std::vector<Ecgi> const &value) { m_Ecgis = value; }

  std::vector<Ncgi> &getNcgis() { return m_Ncgis; }
  void setNcgis(std::vector<Ncgi> const &value) { m_Ncgis = value; }

  std::vector<GlobalRanNodeId> &getGRanNodeIds() { return m_GRanNodeIds; }
  void setGRanNodeIds(std::vector<GlobalRanNodeId> const &value) {
    m_GRanNodeIds = value;
  }

  std::vector<Tai> &getTais() { return m_Tais; }
  void setTais(std::vector<Tai> const &value) { m_Tais = value; }

public:
  std::vector<Ecgi> m_Ecgis;

  unsigned m_EcgisFlag;
  shared_ptr<unsigned> m_EcgisOutFlag;
  std::vector<Ncgi> m_Ncgis;

  unsigned m_NcgisFlag;
  shared_ptr<unsigned> m_NcgisOutFlag;
  std::vector<GlobalRanNodeId> m_GRanNodeIds;

  unsigned m_GRanNodeIdsFlag;
  shared_ptr<unsigned> m_GRanNodeIdsOutFlag;
  std::vector<Tai> m_Tais;

  unsigned m_TaisFlag;
  shared_ptr<unsigned> m_TaisOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NetworkAreaInfo_H_ */
