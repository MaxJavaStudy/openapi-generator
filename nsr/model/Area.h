/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Area.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef Area_H_
#define Area_H_

#include "CSB_JsonParser.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class Area : public jsonParser::jsonParser<Area> {
public:
  explicit Area() {
    // constructor

    m_TacsFlag = (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_TacsOutFlag.reset(new unsigned);
    *m_TacsOutFlag.get() = 0;
    m_AreaCode = "";

    m_AreaCodeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AreaCodeOutFlag.reset(new unsigned);
    *m_AreaCodeOutFlag.get() = 0;
    m_AreaCodes = "";

    m_AreaCodesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AreaCodesOutFlag.reset(new unsigned);
    *m_AreaCodesOutFlag.get() = 0;
  };
  virtual ~Area(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : Tacs AreaCode AreaCodes
    h->add_optional_property("tacs", &this->m_Tacs, m_TacsFlag, m_TacsOutFlag);
    h->add_optional_property("areaCode", &this->m_AreaCode, m_AreaCodeFlag,
                             m_AreaCodeOutFlag);
    h->add_optional_property("areaCodes", &this->m_AreaCodes, m_AreaCodesFlag,
                             m_AreaCodesOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const Area &obj) {
    o << "Tacs, optional flag is : " << *m_TacsOutFlag << std::endl;
    o << convert2string(std::string("Tacs"), obj.m_Tacs) << std::endl;

    o << "AreaCode, optional flag is : " << *m_AreaCodeOutFlag
      << ", content is : " << obj.m_AreaCode << std::endl;

    o << "AreaCodes, optional flag is : " << *m_AreaCodesOutFlag
      << ", content is : " << obj.m_AreaCodes << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// Area members vars : Tacs AreaCode AreaCodes

  std::vector<std::string> &getTacs() { return m_Tacs; }
  void setTacs(std::vector<std::string> const &value) { m_Tacs = value; }

  std::string getAreaCode() const { return m_AreaCode; }
  void setAreaCode(std::string const &value) { m_AreaCode = value; }

  std::string getAreaCodes() const { return m_AreaCodes; }
  void setAreaCodes(std::string const &value) { m_AreaCodes = value; }

public:
  std::vector<std::string> m_Tacs;

  unsigned m_TacsFlag;
  shared_ptr<unsigned> m_TacsOutFlag;
  std::string m_AreaCode;

  unsigned m_AreaCodeFlag;
  shared_ptr<unsigned> m_AreaCodeOutFlag;
  std::string m_AreaCodes;

  unsigned m_AreaCodesFlag;
  shared_ptr<unsigned> m_AreaCodesOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Area_H_ */
