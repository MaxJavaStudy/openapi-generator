/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExternalUnrelatedClass.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ExternalUnrelatedClass::ExternalUnrelatedClass()
{
    m_LcsClientExternalsIsSet = false;
    m_AfExternalsIsSet = false;
    m_LcsClientGroupExternalsIsSet = false;
}

ExternalUnrelatedClass::~ExternalUnrelatedClass()
{
}

void ExternalUnrelatedClass::validate()
{
    // TODO: implement validation
}

web::json::value ExternalUnrelatedClass::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LcsClientExternalsIsSet)
    {
        val[utility::conversions::to_string_t("lcsClientExternals")] = ModelBase::toJson(m_LcsClientExternals);
    }
    if(m_AfExternalsIsSet)
    {
        val[utility::conversions::to_string_t("afExternals")] = ModelBase::toJson(m_AfExternals);
    }
    if(m_LcsClientGroupExternalsIsSet)
    {
        val[utility::conversions::to_string_t("lcsClientGroupExternals")] = ModelBase::toJson(m_LcsClientGroupExternals);
    }

    return val;
}

bool ExternalUnrelatedClass::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("lcsClientExternals")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lcsClientExternals"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LcsClientExternal>> refVal_lcsClientExternals;
            ok &= ModelBase::fromJson(fieldValue, refVal_lcsClientExternals);
            setLcsClientExternals(refVal_lcsClientExternals);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("afExternals")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("afExternals"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AfExternal>> refVal_afExternals;
            ok &= ModelBase::fromJson(fieldValue, refVal_afExternals);
            setAfExternals(refVal_afExternals);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lcsClientGroupExternals")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lcsClientGroupExternals"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LcsClientGroupExternal>> refVal_lcsClientGroupExternals;
            ok &= ModelBase::fromJson(fieldValue, refVal_lcsClientGroupExternals);
            setLcsClientGroupExternals(refVal_lcsClientGroupExternals);
        }
    }
    return ok;
}

void ExternalUnrelatedClass::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LcsClientExternalsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lcsClientExternals"), m_LcsClientExternals));
    }
    if(m_AfExternalsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("afExternals"), m_AfExternals));
    }
    if(m_LcsClientGroupExternalsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lcsClientGroupExternals"), m_LcsClientGroupExternals));
    }
}

bool ExternalUnrelatedClass::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("lcsClientExternals")))
    {
        std::vector<std::shared_ptr<LcsClientExternal>> refVal_lcsClientExternals;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lcsClientExternals")), refVal_lcsClientExternals );
        setLcsClientExternals(refVal_lcsClientExternals);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("afExternals")))
    {
        std::vector<std::shared_ptr<AfExternal>> refVal_afExternals;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("afExternals")), refVal_afExternals );
        setAfExternals(refVal_afExternals);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lcsClientGroupExternals")))
    {
        std::vector<std::shared_ptr<LcsClientGroupExternal>> refVal_lcsClientGroupExternals;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lcsClientGroupExternals")), refVal_lcsClientGroupExternals );
        setLcsClientGroupExternals(refVal_lcsClientGroupExternals);
    }
    return ok;
}

std::vector<std::shared_ptr<LcsClientExternal>>& ExternalUnrelatedClass::getLcsClientExternals()
{
    return m_LcsClientExternals;
}

void ExternalUnrelatedClass::setLcsClientExternals(const std::vector<std::shared_ptr<LcsClientExternal>>& value)
{
    m_LcsClientExternals = value;
    m_LcsClientExternalsIsSet = true;
}

bool ExternalUnrelatedClass::lcsClientExternalsIsSet() const
{
    return m_LcsClientExternalsIsSet;
}

void ExternalUnrelatedClass::unsetLcsClientExternals()
{
    m_LcsClientExternalsIsSet = false;
}
std::vector<std::shared_ptr<AfExternal>>& ExternalUnrelatedClass::getAfExternals()
{
    return m_AfExternals;
}

void ExternalUnrelatedClass::setAfExternals(const std::vector<std::shared_ptr<AfExternal>>& value)
{
    m_AfExternals = value;
    m_AfExternalsIsSet = true;
}

bool ExternalUnrelatedClass::afExternalsIsSet() const
{
    return m_AfExternalsIsSet;
}

void ExternalUnrelatedClass::unsetAfExternals()
{
    m_AfExternalsIsSet = false;
}
std::vector<std::shared_ptr<LcsClientGroupExternal>>& ExternalUnrelatedClass::getLcsClientGroupExternals()
{
    return m_LcsClientGroupExternals;
}

void ExternalUnrelatedClass::setLcsClientGroupExternals(const std::vector<std::shared_ptr<LcsClientGroupExternal>>& value)
{
    m_LcsClientGroupExternals = value;
    m_LcsClientGroupExternalsIsSet = true;
}

bool ExternalUnrelatedClass::lcsClientGroupExternalsIsSet() const
{
    return m_LcsClientGroupExternalsIsSet;
}

void ExternalUnrelatedClass::unsetLcsClientGroupExternals()
{
    m_LcsClientGroupExternalsIsSet = false;
}
}
}
}
}


