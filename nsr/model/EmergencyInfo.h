/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EmergencyInfo.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef EmergencyInfo_H_
#define EmergencyInfo_H_

#include "CSB_JsonParser.h"
#include "IpAddress.h"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class EmergencyInfo : public jsonParser::jsonParser<EmergencyInfo> {
public:
  explicit EmergencyInfo() {
    // constructor
    m_PgwFqdn = "";

    m_PgwFqdnFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PgwFqdnOutFlag.reset(new unsigned);
    *m_PgwFqdnOutFlag.get() = 0;

    m_PgwIpAddressFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PgwIpAddressOutFlag.reset(new unsigned);
    *m_PgwIpAddressOutFlag.get() = 0;
    m_SmfInstanceId = "";

    m_SmfInstanceIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SmfInstanceIdOutFlag.reset(new unsigned);
    *m_SmfInstanceIdOutFlag.get() = 0;
    m_EpdgInd = false;

    m_EpdgIndFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_EpdgIndOutFlag.reset(new unsigned);
    *m_EpdgIndOutFlag.get() = 0;
  };
  virtual ~EmergencyInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : PgwFqdn PgwIpAddress SmfInstanceId
    // EpdgInd
    h->add_optional_property("pgwFqdn", &this->m_PgwFqdn, m_PgwFqdnFlag,
                             m_PgwFqdnOutFlag);
    h->add_optional_property("pgwIpAddress", &this->m_PgwIpAddress,
                             m_PgwIpAddressFlag, m_PgwIpAddressOutFlag);
    h->add_optional_property("smfInstanceId", &this->m_SmfInstanceId,
                             m_SmfInstanceIdFlag, m_SmfInstanceIdOutFlag);
    h->add_optional_property("epdgInd", &this->m_EpdgInd, m_EpdgIndFlag,
                             m_EpdgIndOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const EmergencyInfo &obj) {

    o << "PgwFqdn, optional flag is : " << *m_PgwFqdnOutFlag
      << ", content is : " << obj.m_PgwFqdn << std::endl;

    o << "PgwIpAddress, optional flag is : " << *m_PgwIpAddressOutFlag
      << ", content is : " << obj.m_PgwIpAddress << std::endl;

    o << "SmfInstanceId, optional flag is : " << *m_SmfInstanceIdOutFlag
      << ", content is : " << obj.m_SmfInstanceId << std::endl;

    o << "EpdgInd, optional flag is : " << *m_EpdgIndOutFlag
      << ", content is : " << obj.m_EpdgInd << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// EmergencyInfo members vars : PgwFqdn PgwIpAddress SmfInstanceId EpdgInd

  std::string getPgwFqdn() const { return m_PgwFqdn; }
  void setPgwFqdn(std::string const &value) { m_PgwFqdn = value; }

  IpAddress getPgwIpAddress() const { return m_PgwIpAddress; }
  void setPgwIpAddress(IpAddress const &value) { m_PgwIpAddress = value; }

  std::string getSmfInstanceId() const { return m_SmfInstanceId; }
  void setSmfInstanceId(std::string const &value) { m_SmfInstanceId = value; }

  bool isEpdgInd() const { return m_EpdgInd; }
  void setEpdgInd(bool const value) { m_EpdgInd = value; }

public:
  std::string m_PgwFqdn;

  unsigned m_PgwFqdnFlag;
  shared_ptr<unsigned> m_PgwFqdnOutFlag;
  IpAddress m_PgwIpAddress;

  unsigned m_PgwIpAddressFlag;
  shared_ptr<unsigned> m_PgwIpAddressOutFlag;
  std::string m_SmfInstanceId;

  unsigned m_SmfInstanceIdFlag;
  shared_ptr<unsigned> m_SmfInstanceIdOutFlag;
  bool m_EpdgInd;

  unsigned m_EpdgIndFlag;
  shared_ptr<unsigned> m_EpdgIndOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EmergencyInfo_H_ */
