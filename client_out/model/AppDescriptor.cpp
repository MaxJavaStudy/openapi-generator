/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AppDescriptor.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AppDescriptor::AppDescriptor()
{
    m_OsId = utility::conversions::to_string_t("");
    m_OsIdIsSet = false;
    m_AppId = utility::conversions::to_string_t("");
    m_AppIdIsSet = false;
}

AppDescriptor::~AppDescriptor()
{
}

void AppDescriptor::validate()
{
    // TODO: implement validation
}

web::json::value AppDescriptor::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OsIdIsSet)
    {
        val[utility::conversions::to_string_t("osId")] = ModelBase::toJson(m_OsId);
    }
    if(m_AppIdIsSet)
    {
        val[utility::conversions::to_string_t("appId")] = ModelBase::toJson(m_AppId);
    }

    return val;
}

bool AppDescriptor::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("osId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("osId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_osId;
            ok &= ModelBase::fromJson(fieldValue, refVal_osId);
            setOsId(refVal_osId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("appId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_appId;
            ok &= ModelBase::fromJson(fieldValue, refVal_appId);
            setAppId(refVal_appId);
        }
    }
    return ok;
}

void AppDescriptor::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_OsIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("osId"), m_OsId));
    }
    if(m_AppIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appId"), m_AppId));
    }
}

bool AppDescriptor::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("osId")))
    {
        utility::string_t refVal_osId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("osId")), refVal_osId );
        setOsId(refVal_osId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appId")))
    {
        utility::string_t refVal_appId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("appId")), refVal_appId );
        setAppId(refVal_appId);
    }
    return ok;
}

utility::string_t AppDescriptor::getOsId() const
{
    return m_OsId;
}

void AppDescriptor::setOsId(const utility::string_t& value)
{
    m_OsId = value;
    m_OsIdIsSet = true;
}

bool AppDescriptor::osIdIsSet() const
{
    return m_OsIdIsSet;
}

void AppDescriptor::unsetOsId()
{
    m_OsIdIsSet = false;
}
utility::string_t AppDescriptor::getAppId() const
{
    return m_AppId;
}

void AppDescriptor::setAppId(const utility::string_t& value)
{
    m_AppId = value;
    m_AppIdIsSet = true;
}

bool AppDescriptor::appIdIsSet() const
{
    return m_AppIdIsSet;
}

void AppDescriptor::unsetAppId()
{
    m_AppIdIsSet = false;
}
}
}
}
}


