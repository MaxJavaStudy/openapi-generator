/**
* Nudm_UECM
* Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DeregistrationData.h"


namespace org {
namespace openapitools {
namespace server {
namespace model {

DeregistrationData::DeregistrationData()
{
    m_AccessTypeIsSet = false;
    m_PduSessionId = 0;
    m_PduSessionIdIsSet = false;
    m_NewSmfInstanceId = "";
    m_NewSmfInstanceIdIsSet = false;
    
}

DeregistrationData::~DeregistrationData()
{
}

void DeregistrationData::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const DeregistrationData& o)
{
    j = nlohmann::json();
    j["deregReason"] = o.m_DeregReason;
    if(o.accessTypeIsSet())
        j["accessType"] = o.m_AccessType;
    if(o.pduSessionIdIsSet())
        j["pduSessionId"] = o.m_PduSessionId;
    if(o.newSmfInstanceIdIsSet())
        j["newSmfInstanceId"] = o.m_NewSmfInstanceId;
    
}

void from_json(const nlohmann::json& j, DeregistrationData& o)
{
    j.at("deregReason").get_to(o.m_DeregReason);
    if(j.find("accessType") != j.end())
    {
        j.at("accessType").get_to(o.m_AccessType);
        o.m_AccessTypeIsSet = true;
    } 
    if(j.find("pduSessionId") != j.end())
    {
        j.at("pduSessionId").get_to(o.m_PduSessionId);
        o.m_PduSessionIdIsSet = true;
    } 
    if(j.find("newSmfInstanceId") != j.end())
    {
        j.at("newSmfInstanceId").get_to(o.m_NewSmfInstanceId);
        o.m_NewSmfInstanceIdIsSet = true;
    } 
    
}

DeregistrationReason DeregistrationData::getDeregReason() const
{
    return m_DeregReason;
}
void DeregistrationData::setDeregReason(DeregistrationReason const& value)
{
    m_DeregReason = value;
}
AccessType DeregistrationData::getAccessType() const
{
    return m_AccessType;
}
void DeregistrationData::setAccessType(AccessType const& value)
{
    m_AccessType = value;
    m_AccessTypeIsSet = true;
}
bool DeregistrationData::accessTypeIsSet() const
{
    return m_AccessTypeIsSet;
}
void DeregistrationData::unsetAccessType()
{
    m_AccessTypeIsSet = false;
}
int32_t DeregistrationData::getPduSessionId() const
{
    return m_PduSessionId;
}
void DeregistrationData::setPduSessionId(int32_t const value)
{
    m_PduSessionId = value;
    m_PduSessionIdIsSet = true;
}
bool DeregistrationData::pduSessionIdIsSet() const
{
    return m_PduSessionIdIsSet;
}
void DeregistrationData::unsetPduSessionId()
{
    m_PduSessionIdIsSet = false;
}
std::string DeregistrationData::getNewSmfInstanceId() const
{
    return m_NewSmfInstanceId;
}
void DeregistrationData::setNewSmfInstanceId(std::string const& value)
{
    m_NewSmfInstanceId = value;
    m_NewSmfInstanceIdIsSet = true;
}
bool DeregistrationData::newSmfInstanceIdIsSet() const
{
    return m_NewSmfInstanceIdIsSet;
}
void DeregistrationData::unsetNewSmfInstanceId()
{
    m_NewSmfInstanceIdIsSet = false;
}


}
}
}
}

