/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SharedData.h
 *
 * 
 */

#ifndef SharedData_H_
#define SharedData_H_


#include "VnGroupData.h"
#include "DnnConfiguration.h"
#include <string>
#include "SnssaiInfo.h"
#include "SmsSubscriptionData.h"
#include "SmsManagementSubscriptionData.h"
#include "AccessAndMobilitySubscriptionData.h"
#include <map>
#include "TraceData.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SharedData: public jsonParser::jsonParser<SharedData>
{
public:
    explicit SharedData(){
        // constructor
        m_SharedDataId = "";
        
            m_SharedDataIdFlag = staticjson::Flags::Default;

            m_SharedAmDataFlag = (staticjson::Flags::Optional);

            m_SharedSmsSubsDataFlag = (staticjson::Flags::Optional);

            m_SharedSmsMngSubsDataFlag = (staticjson::Flags::Optional);

            m_SharedDnnConfigurationsFlag = (staticjson::Flags::Optional);

            m_SharedTraceDataFlag = (staticjson::Flags::Optional);

            m_SharedSnssaiInfosFlag = (staticjson::Flags::Optional);

            m_SharedVnGroupDatasFlag = (staticjson::Flags::Optional);
    };
    virtual ~SharedData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : SharedDataId SharedAmData SharedSmsSubsData SharedSmsMngSubsData SharedDnnConfigurations SharedTraceData SharedSnssaiInfos SharedVnGroupDatas 
        h->add_property("sharedDataId", &this->m_SharedDataId, m_SharedDataIdFlag);
        h->add_property("sharedAmData", &this->m_SharedAmData, m_SharedAmDataFlag);
        h->add_property("sharedSmsSubsData", &this->m_SharedSmsSubsData, m_SharedSmsSubsDataFlag);
        h->add_property("sharedSmsMngSubsData", &this->m_SharedSmsMngSubsData, m_SharedSmsMngSubsDataFlag);
        h->add_property("sharedDnnConfigurations", &this->m_SharedDnnConfigurations, m_SharedDnnConfigurationsFlag);
        h->add_property("sharedTraceData", &this->m_SharedTraceData, m_SharedTraceDataFlag);
        h->add_property("sharedSnssaiInfos", &this->m_SharedSnssaiInfos, m_SharedSnssaiInfosFlag);
        h->add_property("sharedVnGroupDatas", &this->m_SharedVnGroupDatas, m_SharedVnGroupDatasFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SharedData& obj)
    {
        
        o << "SharedDataId : " << obj.m_SharedDataId << std::endl;

        o << "SharedAmData : " << obj.m_SharedAmData << std::endl;

        o << "SharedSmsSubsData : " << obj.m_SharedSmsSubsData << std::endl;

        o << "SharedSmsMngSubsData : " << obj.m_SharedSmsMngSubsData << std::endl;
        o<< convert2string(std::string("SharedDnnConfigurations"), obj.m_SharedDnnConfigurations) <<std::endl;
       
        o << "SharedTraceData : " << obj.m_SharedTraceData << std::endl;
        o<< convert2string(std::string("SharedSnssaiInfos"), obj.m_SharedSnssaiInfos) <<std::endl;
               o<< convert2string(std::string("SharedVnGroupDatas"), obj.m_SharedVnGroupDatas) <<std::endl;
       
     
        return o;
    }

    /////////////////////////////////////////////
    /// SharedData members vars : SharedDataId SharedAmData SharedSmsSubsData SharedSmsMngSubsData SharedDnnConfigurations SharedTraceData SharedSnssaiInfos SharedVnGroupDatas 

    std::string  getSharedDataId() const
    {
        return m_SharedDataId;
    }
    void  setSharedDataId(std::string const& value)
    {
        m_SharedDataId = value;
    }

AccessAndMobilitySubscriptionData  getSharedAmData() const
    {
        return m_SharedAmData;
    }
    void  setSharedAmData(AccessAndMobilitySubscriptionData const& value)
    {
        m_SharedAmData = value;
    }

SmsSubscriptionData  getSharedSmsSubsData() const
    {
        return m_SharedSmsSubsData;
    }
    void  setSharedSmsSubsData(SmsSubscriptionData const& value)
    {
        m_SharedSmsSubsData = value;
    }

SmsManagementSubscriptionData  getSharedSmsMngSubsData() const
    {
        return m_SharedSmsMngSubsData;
    }
    void  setSharedSmsMngSubsData(SmsManagementSubscriptionData const& value)
    {
        m_SharedSmsMngSubsData = value;
    }

std::map<std::string, DnnConfiguration>&  getSharedDnnConfigurations()
    {
        return m_SharedDnnConfigurations;
    }
    void  setSharedDnnConfigurations(std::map<std::string, DnnConfiguration> const& value)
    {
        m_SharedDnnConfigurations = value;
    }

TraceData  getSharedTraceData() const
    {
        return m_SharedTraceData;
    }
    void  setSharedTraceData(TraceData const& value)
    {
        m_SharedTraceData = value;
    }

std::map<std::string, SnssaiInfo>&  getSharedSnssaiInfos()
    {
        return m_SharedSnssaiInfos;
    }
    void  setSharedSnssaiInfos(std::map<std::string, SnssaiInfo> const& value)
    {
        m_SharedSnssaiInfos = value;
    }

std::map<std::string, VnGroupData>&  getSharedVnGroupDatas()
    {
        return m_SharedVnGroupDatas;
    }
    void  setSharedVnGroupDatas(std::map<std::string, VnGroupData> const& value)
    {
        m_SharedVnGroupDatas = value;
    }



    
public:
    std::string m_SharedDataId;
    
    unsigned m_SharedDataIdFlag;
    AccessAndMobilitySubscriptionData m_SharedAmData;
    
    unsigned m_SharedAmDataFlag;
    SmsSubscriptionData m_SharedSmsSubsData;
    
    unsigned m_SharedSmsSubsDataFlag;
    SmsManagementSubscriptionData m_SharedSmsMngSubsData;
    
    unsigned m_SharedSmsMngSubsDataFlag;
    std::map<std::string, DnnConfiguration> m_SharedDnnConfigurations;
    
    unsigned m_SharedDnnConfigurationsFlag;
    TraceData m_SharedTraceData;
    
    unsigned m_SharedTraceDataFlag;
    std::map<std::string, SnssaiInfo> m_SharedSnssaiInfos;
    
    unsigned m_SharedSnssaiInfosFlag;
    std::map<std::string, VnGroupData> m_SharedVnGroupDatas;
    
    unsigned m_SharedVnGroupDatasFlag;
  
};
}
}
}
}

#endif /* SharedData_H_ */
