/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SubscriptionDataSets.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SubscriptionDataSets_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SubscriptionDataSets_H_


#include "../ModelBase.h"

#include "SmsSubscriptionData.h"
#include "LcsMoData.h"
#include "AccessAndMobilitySubscriptionData.h"
#include "UeContextInAmfData.h"
#include "V2xSubscriptionData.h"
#include "TraceData.h"
#include "UeContextInSmsfData.h"
#include <vector>
#include "LcsBroadcastAssistanceTypesData.h"
#include "SessionManagementSubscriptionData.h"
#include "LcsPrivacyData.h"
#include "SmsManagementSubscriptionData.h"
#include "SmfSelectionSubscriptionData.h"
#include "UeContextInSmfData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SubscriptionDataSets
    : public ModelBase
{
public:
    SubscriptionDataSets();
    virtual ~SubscriptionDataSets();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SubscriptionDataSets members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AccessAndMobilitySubscriptionData> getAmData() const;
    bool amDataIsSet() const;
    void unsetAmData();

    void setAmData(const std::shared_ptr<AccessAndMobilitySubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SmfSelectionSubscriptionData> getSmfSelData() const;
    bool smfSelDataIsSet() const;
    void unsetSmfSelData();

    void setSmfSelData(const std::shared_ptr<SmfSelectionSubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UeContextInAmfData> getUecAmfData() const;
    bool uecAmfDataIsSet() const;
    void unsetUecAmfData();

    void setUecAmfData(const std::shared_ptr<UeContextInAmfData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UeContextInSmfData> getUecSmfData() const;
    bool uecSmfDataIsSet() const;
    void unsetUecSmfData();

    void setUecSmfData(const std::shared_ptr<UeContextInSmfData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UeContextInSmsfData> getUecSmsfData() const;
    bool uecSmsfDataIsSet() const;
    void unsetUecSmsfData();

    void setUecSmsfData(const std::shared_ptr<UeContextInSmsfData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SmsSubscriptionData> getSmsSubsData() const;
    bool smsSubsDataIsSet() const;
    void unsetSmsSubsData();

    void setSmsSubsData(const std::shared_ptr<SmsSubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SessionManagementSubscriptionData>>& getSmData();
    bool smDataIsSet() const;
    void unsetSmData();

    void setSmData(const std::vector<std::shared_ptr<SessionManagementSubscriptionData>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TraceData> getTraceData() const;
    bool traceDataIsSet() const;
    void unsetTraceData();

    void setTraceData(const std::shared_ptr<TraceData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SmsManagementSubscriptionData> getSmsMngData() const;
    bool smsMngDataIsSet() const;
    void unsetSmsMngData();

    void setSmsMngData(const std::shared_ptr<SmsManagementSubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LcsPrivacyData> getLcsPrivacyData() const;
    bool lcsPrivacyDataIsSet() const;
    void unsetLcsPrivacyData();

    void setLcsPrivacyData(const std::shared_ptr<LcsPrivacyData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LcsMoData> getLcsMoData() const;
    bool lcsMoDataIsSet() const;
    void unsetLcsMoData();

    void setLcsMoData(const std::shared_ptr<LcsMoData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V2xSubscriptionData> getV2xData() const;
    bool v2xDataIsSet() const;
    void unsetV2xData();

    void setV2xData(const std::shared_ptr<V2xSubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LcsBroadcastAssistanceTypesData> getLcsBroadcastAssistanceTypesData() const;
    bool lcsBroadcastAssistanceTypesDataIsSet() const;
    void unsetLcsBroadcastAssistanceTypesData();

    void setLcsBroadcastAssistanceTypesData(const std::shared_ptr<LcsBroadcastAssistanceTypesData>& value);


protected:
    std::shared_ptr<AccessAndMobilitySubscriptionData> m_AmData;
    bool m_AmDataIsSet;
    std::shared_ptr<SmfSelectionSubscriptionData> m_SmfSelData;
    bool m_SmfSelDataIsSet;
    std::shared_ptr<UeContextInAmfData> m_UecAmfData;
    bool m_UecAmfDataIsSet;
    std::shared_ptr<UeContextInSmfData> m_UecSmfData;
    bool m_UecSmfDataIsSet;
    std::shared_ptr<UeContextInSmsfData> m_UecSmsfData;
    bool m_UecSmsfDataIsSet;
    std::shared_ptr<SmsSubscriptionData> m_SmsSubsData;
    bool m_SmsSubsDataIsSet;
    std::vector<std::shared_ptr<SessionManagementSubscriptionData>> m_SmData;
    bool m_SmDataIsSet;
    std::shared_ptr<TraceData> m_TraceData;
    bool m_TraceDataIsSet;
    std::shared_ptr<SmsManagementSubscriptionData> m_SmsMngData;
    bool m_SmsMngDataIsSet;
    std::shared_ptr<LcsPrivacyData> m_LcsPrivacyData;
    bool m_LcsPrivacyDataIsSet;
    std::shared_ptr<LcsMoData> m_LcsMoData;
    bool m_LcsMoDataIsSet;
    std::shared_ptr<V2xSubscriptionData> m_V2xData;
    bool m_V2xDataIsSet;
    std::shared_ptr<LcsBroadcastAssistanceTypesData> m_LcsBroadcastAssistanceTypesData;
    bool m_LcsBroadcastAssistanceTypesDataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SubscriptionDataSets_H_ */
