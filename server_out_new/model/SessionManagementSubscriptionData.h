/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SessionManagementSubscriptionData.h
 *
 * 
 */

#ifndef SessionManagementSubscriptionData_H_
#define SessionManagementSubscriptionData_H_


#include "SuggestedPacketNumDl.h"
#include "ExpectedUeBehaviourData.h"
#include "OdbPacketServices.h"
#include "DnnConfiguration.h"
#include <string>
#include <map>
#include "Snssai.h"
#include "TraceData.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SessionManagementSubscriptionData: public jsonParser::jsonParser<SessionManagementSubscriptionData>
{
public:
    explicit SessionManagementSubscriptionData(){
        // constructor
        
            m_SingleNssaiFlag = staticjson::Flags::Default;

            m_DnnConfigurationsFlag = (staticjson::Flags::Optional);

            m_InternalGroupIdsFlag = (staticjson::Flags::Optional);

            m_SharedVnGroupDataIdsFlag = (staticjson::Flags::Optional);
m_SharedDnnConfigurationsId = "";
        
            m_SharedDnnConfigurationsIdFlag = (staticjson::Flags::Optional);

            m_OdbPacketServicesFlag = (staticjson::Flags::Optional);

            m_TraceDataFlag = (staticjson::Flags::Optional);
m_SharedTraceDataId = "";
        
            m_SharedTraceDataIdFlag = (staticjson::Flags::Optional);

            m_ExpectedUeBehavioursListFlag = (staticjson::Flags::Optional);

            m_SuggestedPacketNumDlListFlag = (staticjson::Flags::Optional);
m_r_3gppChargingCharacteristics = "";
        
            m_r_3gppChargingCharacteristicsFlag = (staticjson::Flags::Optional);
    };
    virtual ~SessionManagementSubscriptionData(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : SingleNssai DnnConfigurations InternalGroupIds SharedVnGroupDataIds SharedDnnConfigurationsId OdbPacketServices TraceData SharedTraceDataId ExpectedUeBehavioursList SuggestedPacketNumDlList r_3gppChargingCharacteristics 
        h->add_property("singleNssai", &this->m_SingleNssai, m_SingleNssaiFlag);
        h->add_property("dnnConfigurations", &this->m_DnnConfigurations, m_DnnConfigurationsFlag);
        h->add_property("internalGroupIds", &this->m_InternalGroupIds, m_InternalGroupIdsFlag);
        h->add_property("sharedVnGroupDataIds", &this->m_SharedVnGroupDataIds, m_SharedVnGroupDataIdsFlag);
        h->add_property("sharedDnnConfigurationsId", &this->m_SharedDnnConfigurationsId, m_SharedDnnConfigurationsIdFlag);
        h->add_property("odbPacketServices", &this->m_OdbPacketServices, m_OdbPacketServicesFlag);
        h->add_property("traceData", &this->m_TraceData, m_TraceDataFlag);
        h->add_property("sharedTraceDataId", &this->m_SharedTraceDataId, m_SharedTraceDataIdFlag);
        h->add_property("expectedUeBehavioursList", &this->m_ExpectedUeBehavioursList, m_ExpectedUeBehavioursListFlag);
        h->add_property("suggestedPacketNumDlList", &this->m_SuggestedPacketNumDlList, m_SuggestedPacketNumDlListFlag);
        h->add_property("r3gppChargingCharacteristics", &this->m_r_3gppChargingCharacteristics, m_r_3gppChargingCharacteristicsFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SessionManagementSubscriptionData& obj)
    {
        
        o << "SingleNssai : " << obj.m_SingleNssai << std::endl;
        o<< convert2string(std::string("DnnConfigurations"), obj.m_DnnConfigurations) <<std::endl;
               o<< convert2string(std::string("InternalGroupIds"), obj.m_InternalGroupIds) <<std::endl;
               o<< convert2string(std::string("SharedVnGroupDataIds"), obj.m_SharedVnGroupDataIds) <<std::endl;
       
        o << "SharedDnnConfigurationsId : " << obj.m_SharedDnnConfigurationsId << std::endl;

        o << "OdbPacketServices : " << obj.m_OdbPacketServices << std::endl;

        o << "TraceData : " << obj.m_TraceData << std::endl;

        o << "SharedTraceDataId : " << obj.m_SharedTraceDataId << std::endl;
        o<< convert2string(std::string("ExpectedUeBehavioursList"), obj.m_ExpectedUeBehavioursList) <<std::endl;
               o<< convert2string(std::string("SuggestedPacketNumDlList"), obj.m_SuggestedPacketNumDlList) <<std::endl;
       
        o << "r_3gppChargingCharacteristics : " << obj.m_r_3gppChargingCharacteristics << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// SessionManagementSubscriptionData members vars : SingleNssai DnnConfigurations InternalGroupIds SharedVnGroupDataIds SharedDnnConfigurationsId OdbPacketServices TraceData SharedTraceDataId ExpectedUeBehavioursList SuggestedPacketNumDlList r_3gppChargingCharacteristics 

    Snssai  getSingleNssai() const
    {
        return m_SingleNssai;
    }
    void  setSingleNssai(Snssai const& value)
    {
        m_SingleNssai = value;
    }

std::map<std::string, DnnConfiguration>&  getDnnConfigurations()
    {
        return m_DnnConfigurations;
    }
    void  setDnnConfigurations(std::map<std::string, DnnConfiguration> const& value)
    {
        m_DnnConfigurations = value;
    }

std::vector<std::string>&  getInternalGroupIds()
    {
        return m_InternalGroupIds;
    }
    void  setInternalGroupIds(std::vector<std::string> const& value)
    {
        m_InternalGroupIds = value;
    }

std::map<std::string, std::string>&  getSharedVnGroupDataIds()
    {
        return m_SharedVnGroupDataIds;
    }
    void  setSharedVnGroupDataIds(std::map<std::string, std::string> const& value)
    {
        m_SharedVnGroupDataIds = value;
    }

std::string  getSharedDnnConfigurationsId() const
    {
        return m_SharedDnnConfigurationsId;
    }
    void  setSharedDnnConfigurationsId(std::string const& value)
    {
        m_SharedDnnConfigurationsId = value;
    }

OdbPacketServices  getOdbPacketServices() const
    {
        return m_OdbPacketServices;
    }
    void  setOdbPacketServices(OdbPacketServices const& value)
    {
        m_OdbPacketServices = value;
    }

TraceData  getTraceData() const
    {
        return m_TraceData;
    }
    void  setTraceData(TraceData const& value)
    {
        m_TraceData = value;
    }

std::string  getSharedTraceDataId() const
    {
        return m_SharedTraceDataId;
    }
    void  setSharedTraceDataId(std::string const& value)
    {
        m_SharedTraceDataId = value;
    }

std::map<std::string, ExpectedUeBehaviourData>&  getExpectedUeBehavioursList()
    {
        return m_ExpectedUeBehavioursList;
    }
    void  setExpectedUeBehavioursList(std::map<std::string, ExpectedUeBehaviourData> const& value)
    {
        m_ExpectedUeBehavioursList = value;
    }

std::map<std::string, SuggestedPacketNumDl>&  getSuggestedPacketNumDlList()
    {
        return m_SuggestedPacketNumDlList;
    }
    void  setSuggestedPacketNumDlList(std::map<std::string, SuggestedPacketNumDl> const& value)
    {
        m_SuggestedPacketNumDlList = value;
    }

std::string  getR3gppChargingCharacteristics() const
    {
        return m_r_3gppChargingCharacteristics;
    }
    void  setR3gppChargingCharacteristics(std::string const& value)
    {
        m_r_3gppChargingCharacteristics = value;
    }



    
public:
    Snssai m_SingleNssai;
    
    unsigned m_SingleNssaiFlag;
    std::map<std::string, DnnConfiguration> m_DnnConfigurations;
    
    unsigned m_DnnConfigurationsFlag;
    std::vector<std::string> m_InternalGroupIds;
    
    unsigned m_InternalGroupIdsFlag;
    std::map<std::string, std::string> m_SharedVnGroupDataIds;
    
    unsigned m_SharedVnGroupDataIdsFlag;
    std::string m_SharedDnnConfigurationsId;
    
    unsigned m_SharedDnnConfigurationsIdFlag;
    OdbPacketServices m_OdbPacketServices;
    
    unsigned m_OdbPacketServicesFlag;
    TraceData m_TraceData;
    
    unsigned m_TraceDataFlag;
    std::string m_SharedTraceDataId;
    
    unsigned m_SharedTraceDataIdFlag;
    std::map<std::string, ExpectedUeBehaviourData> m_ExpectedUeBehavioursList;
    
    unsigned m_ExpectedUeBehavioursListFlag;
    std::map<std::string, SuggestedPacketNumDl> m_SuggestedPacketNumDlList;
    
    unsigned m_SuggestedPacketNumDlListFlag;
    std::string m_r_3gppChargingCharacteristics;
    
    unsigned m_r_3gppChargingCharacteristicsFlag;
  
};
}
}
}
}

#endif /* SessionManagementSubscriptionData_H_ */
