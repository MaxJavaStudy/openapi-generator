/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SteeringInfo.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SteeringInfo_H_
#define SteeringInfo_H_

#include "AccessTech.h"
#include "CSB_JsonParser.h"
#include "PlmnId.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SteeringInfo : public jsonParser::jsonParser<SteeringInfo> {
public:
  explicit SteeringInfo() {
    // constructor

    m_PlmnIdFlag = staticjson::Flags::Default;
    m_PlmnIdOutFlag.reset(new unsigned);
    *m_PlmnIdOutFlag.get() = 0;

    m_AccessTechListFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_AccessTechListOutFlag.reset(new unsigned);
    *m_AccessTechListOutFlag.get() = 0;
  };
  virtual ~SteeringInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : PlmnId AccessTechList
    h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);
    h->add_optional_property("accessTechList", &this->m_AccessTechList,
                             m_AccessTechListFlag, m_AccessTechListOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const SteeringInfo &obj) {

    o << "PlmnId : " << obj.m_PlmnId << std::endl;
    o << "AccessTechList, optional flag is : " << *m_AccessTechListOutFlag
      << std::endl;
    o << convert2string(std::string("AccessTechList"), obj.m_AccessTechList)
      << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SteeringInfo members vars : PlmnId AccessTechList

  PlmnId getPlmnId() const { return m_PlmnId; }
  void setPlmnId(PlmnId const &value) { m_PlmnId = value; }

  std::vector<AccessTech> &getAccessTechList() { return m_AccessTechList; }
  void setAccessTechList(std::vector<AccessTech> const &value) {
    m_AccessTechList = value;
  }

public:
  PlmnId m_PlmnId;

  unsigned m_PlmnIdFlag;
  shared_ptr<unsigned> m_PlmnIdOutFlag;
  std::vector<AccessTech> m_AccessTechList;

  unsigned m_AccessTechListFlag;
  shared_ptr<unsigned> m_AccessTechListOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SteeringInfo_H_ */
