/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SnssaiInfo.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef SnssaiInfo_H_
#define SnssaiInfo_H_

#include "CSB_JsonParser.h"
#include "DnnInfo.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SnssaiInfo : public jsonParser::jsonParser<SnssaiInfo> {
public:
  explicit SnssaiInfo() {
    // constructor

    m_DnnInfosFlag = staticjson::Flags::Default;
    m_DnnInfosOutFlag.reset(new unsigned);
    *m_DnnInfosOutFlag.get() = 0;
  };
  virtual ~SnssaiInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DnnInfos
    h->add_property("dnnInfos", &this->m_DnnInfos, m_DnnInfosFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const SnssaiInfo &obj) {
    o << convert2string(std::string("DnnInfos"), obj.m_DnnInfos) << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// SnssaiInfo members vars : DnnInfos

  std::vector<DnnInfo> &getDnnInfos() { return m_DnnInfos; }
  void setDnnInfos(std::vector<DnnInfo> const &value) { m_DnnInfos = value; }

public:
  std::vector<DnnInfo> m_DnnInfos;

  unsigned m_DnnInfosFlag;
  shared_ptr<unsigned> m_DnnInfosOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SnssaiInfo_H_ */
