/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DicEntryCreateData.h
 *
 *
 */

#ifndef DicEntryCreateData_H_
#define DicEntryCreateData_H_

#include "RefToBinaryData.h"
#include "jsonParser.hpp"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class DicEntryCreateData : public jsonParser::jsonParser<DicEntryCreateData> {
public:
  explicit DicEntryCreateData() {
    // constructor
    m_TypeAllocationCode = "";

    m_TypeAllocationCodeFlag = staticjson::Flags::Default;

    m_UeRadioCapability5GSFlag = (staticjson::Flags::Optional);

    m_UeRadioCapabilityEPSFlag = (staticjson::Flags::Optional);
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag = (staticjson::Flags::Optional);
  };
  virtual ~DicEntryCreateData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : TypeAllocationCode
    // UeRadioCapability5GS UeRadioCapabilityEPS SupportedFeatures
    h->add_property("typeAllocationCode", &this->m_TypeAllocationCode,
                    m_TypeAllocationCodeFlag);
    h->add_property("ueRadioCapability5GS", &this->m_UeRadioCapability5GS,
                    m_UeRadioCapability5GSFlag);
    h->add_property("ueRadioCapabilityEPS", &this->m_UeRadioCapabilityEPS,
                    m_UeRadioCapabilityEPSFlag);
    h->add_property("supportedFeatures", &this->m_SupportedFeatures,
                    m_SupportedFeaturesFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const DicEntryCreateData &obj) {

    o << "TypeAllocationCode : " << obj.m_TypeAllocationCode << std::endl;

    o << "UeRadioCapability5GS : " << obj.m_UeRadioCapability5GS << std::endl;

    o << "UeRadioCapabilityEPS : " << obj.m_UeRadioCapabilityEPS << std::endl;

    o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// DicEntryCreateData members vars : TypeAllocationCode UeRadioCapability5GS
  /// UeRadioCapabilityEPS SupportedFeatures

  std::string getTypeAllocationCode() const { return m_TypeAllocationCode; }
  void setTypeAllocationCode(std::string const &value) {
    m_TypeAllocationCode = value;
  }

  RefToBinaryData getUeRadioCapability5GS() const {
    return m_UeRadioCapability5GS;
  }
  void setUeRadioCapability5GS(RefToBinaryData const &value) {
    m_UeRadioCapability5GS = value;
  }

  RefToBinaryData getUeRadioCapabilityEPS() const {
    return m_UeRadioCapabilityEPS;
  }
  void setUeRadioCapabilityEPS(RefToBinaryData const &value) {
    m_UeRadioCapabilityEPS = value;
  }

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

public:
  std::string m_TypeAllocationCode;

  unsigned m_TypeAllocationCodeFlag;
  RefToBinaryData m_UeRadioCapability5GS;

  unsigned m_UeRadioCapability5GSFlag;
  RefToBinaryData m_UeRadioCapabilityEPS;

  unsigned m_UeRadioCapabilityEPSFlag;
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DicEntryCreateData_H_ */
