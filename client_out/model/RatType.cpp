/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RatType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RatType::RatType()
{
}

RatType::~RatType()
{
}

void RatType::validate()
{
    // TODO: implement validation
}

web::json::value RatType::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eRatType::RatType_NR) val = web::json::value::string(U(NR));
    if (m_value == eRatType::RatType_EUTRA) val = web::json::value::string(U(EUTRA));
    if (m_value == eRatType::RatType_WLAN) val = web::json::value::string(U(WLAN));
    if (m_value == eRatType::RatType_VIRTUAL) val = web::json::value::string(U(VIRTUAL));
    if (m_value == eRatType::RatType_NBIOT) val = web::json::value::string(U(NBIOT));
    if (m_value == eRatType::RatType_WIRELINE) val = web::json::value::string(U(WIRELINE));
    if (m_value == eRatType::RatType_WIRELINE_CABLE) val = web::json::value::string(U(WIRELINE_CABLE));
    if (m_value == eRatType::RatType_WIRELINE_BBF) val = web::json::value::string(U(WIRELINE_BBF));
    if (m_value == eRatType::RatType_LTE_M) val = web::json::value::string(U(LTE-M));
    if (m_value == eRatType::RatType_NR_U) val = web::json::value::string(U(NR_U));
    if (m_value == eRatType::RatType_EUTRA_U) val = web::json::value::string(U(EUTRA_U));
    if (m_value == eRatType::RatType_TRUSTED_N3GA) val = web::json::value::string(U(TRUSTED_N3GA));
    if (m_value == eRatType::RatType_TRUSTED_WLAN) val = web::json::value::string(U(TRUSTED_WLAN));
    if (m_value == eRatType::RatType_UTRA) val = web::json::value::string(U(UTRA));
    if (m_value == eRatType::RatType_GERA) val = web::json::value::string(U(GERA));

    return val;
}

bool RatType::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(NR)) m_value = eRatType::RatType_NR;
    if (s == utility::conversions::to_string_t(EUTRA)) m_value = eRatType::RatType_EUTRA;
    if (s == utility::conversions::to_string_t(WLAN)) m_value = eRatType::RatType_WLAN;
    if (s == utility::conversions::to_string_t(VIRTUAL)) m_value = eRatType::RatType_VIRTUAL;
    if (s == utility::conversions::to_string_t(NBIOT)) m_value = eRatType::RatType_NBIOT;
    if (s == utility::conversions::to_string_t(WIRELINE)) m_value = eRatType::RatType_WIRELINE;
    if (s == utility::conversions::to_string_t(WIRELINE_CABLE)) m_value = eRatType::RatType_WIRELINE_CABLE;
    if (s == utility::conversions::to_string_t(WIRELINE_BBF)) m_value = eRatType::RatType_WIRELINE_BBF;
    if (s == utility::conversions::to_string_t(LTE-M)) m_value = eRatType::RatType_LTE_M;
    if (s == utility::conversions::to_string_t(NR_U)) m_value = eRatType::RatType_NR_U;
    if (s == utility::conversions::to_string_t(EUTRA_U)) m_value = eRatType::RatType_EUTRA_U;
    if (s == utility::conversions::to_string_t(TRUSTED_N3GA)) m_value = eRatType::RatType_TRUSTED_N3GA;
    if (s == utility::conversions::to_string_t(TRUSTED_WLAN)) m_value = eRatType::RatType_TRUSTED_WLAN;
    if (s == utility::conversions::to_string_t(UTRA)) m_value = eRatType::RatType_UTRA;
    if (s == utility::conversions::to_string_t(GERA)) m_value = eRatType::RatType_GERA;
    return true;
}

void RatType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eRatType::RatType_NR) s = utility::conversions::to_string_t(NR);
    if (m_value == eRatType::RatType_EUTRA) s = utility::conversions::to_string_t(EUTRA);
    if (m_value == eRatType::RatType_WLAN) s = utility::conversions::to_string_t(WLAN);
    if (m_value == eRatType::RatType_VIRTUAL) s = utility::conversions::to_string_t(VIRTUAL);
    if (m_value == eRatType::RatType_NBIOT) s = utility::conversions::to_string_t(NBIOT);
    if (m_value == eRatType::RatType_WIRELINE) s = utility::conversions::to_string_t(WIRELINE);
    if (m_value == eRatType::RatType_WIRELINE_CABLE) s = utility::conversions::to_string_t(WIRELINE_CABLE);
    if (m_value == eRatType::RatType_WIRELINE_BBF) s = utility::conversions::to_string_t(WIRELINE_BBF);
    if (m_value == eRatType::RatType_LTE_M) s = utility::conversions::to_string_t(LTE-M);
    if (m_value == eRatType::RatType_NR_U) s = utility::conversions::to_string_t(NR_U);
    if (m_value == eRatType::RatType_EUTRA_U) s = utility::conversions::to_string_t(EUTRA_U);
    if (m_value == eRatType::RatType_TRUSTED_N3GA) s = utility::conversions::to_string_t(TRUSTED_N3GA);
    if (m_value == eRatType::RatType_TRUSTED_WLAN) s = utility::conversions::to_string_t(TRUSTED_WLAN);
    if (m_value == eRatType::RatType_UTRA) s = utility::conversions::to_string_t(UTRA);
    if (m_value == eRatType::RatType_GERA) s = utility::conversions::to_string_t(GERA);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool RatType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eRatType v;

        
        if (s == utility::conversions::to_string_t(NR)) v = eRatType::RatType_NR;
        if (s == utility::conversions::to_string_t(EUTRA)) v = eRatType::RatType_EUTRA;
        if (s == utility::conversions::to_string_t(WLAN)) v = eRatType::RatType_WLAN;
        if (s == utility::conversions::to_string_t(VIRTUAL)) v = eRatType::RatType_VIRTUAL;
        if (s == utility::conversions::to_string_t(NBIOT)) v = eRatType::RatType_NBIOT;
        if (s == utility::conversions::to_string_t(WIRELINE)) v = eRatType::RatType_WIRELINE;
        if (s == utility::conversions::to_string_t(WIRELINE_CABLE)) v = eRatType::RatType_WIRELINE_CABLE;
        if (s == utility::conversions::to_string_t(WIRELINE_BBF)) v = eRatType::RatType_WIRELINE_BBF;
        if (s == utility::conversions::to_string_t(LTE-M)) v = eRatType::RatType_LTE_M;
        if (s == utility::conversions::to_string_t(NR_U)) v = eRatType::RatType_NR_U;
        if (s == utility::conversions::to_string_t(EUTRA_U)) v = eRatType::RatType_EUTRA_U;
        if (s == utility::conversions::to_string_t(TRUSTED_N3GA)) v = eRatType::RatType_TRUSTED_N3GA;
        if (s == utility::conversions::to_string_t(TRUSTED_WLAN)) v = eRatType::RatType_TRUSTED_WLAN;
        if (s == utility::conversions::to_string_t(UTRA)) v = eRatType::RatType_UTRA;
        if (s == utility::conversions::to_string_t(GERA)) v = eRatType::RatType_GERA;

        setValue(v);
    }
    return ok;
}

RatType::eRatType RatType::getValue() const
{
   return m_value;
}

void RatType::setValue(RatType::eRatType const value)
{
   m_value = value;
}


}
}
}
}


