/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EdrxParameters.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EdrxParameters::EdrxParameters()
{
    m_RatTypeIsSet = false;
    m_EdrxValue = utility::conversions::to_string_t("");
    m_EdrxValueIsSet = false;
}

EdrxParameters::~EdrxParameters()
{
}

void EdrxParameters::validate()
{
    // TODO: implement validation
}

web::json::value EdrxParameters::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RatTypeIsSet)
    {
        val[utility::conversions::to_string_t("ratType")] = ModelBase::toJson(m_RatType);
    }
    if(m_EdrxValueIsSet)
    {
        val[utility::conversions::to_string_t("edrxValue")] = ModelBase::toJson(m_EdrxValue);
    }

    return val;
}

bool EdrxParameters::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("ratType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ratType"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RatType> refVal_ratType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ratType);
            setRatType(refVal_ratType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("edrxValue")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("edrxValue"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_edrxValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_edrxValue);
            setEdrxValue(refVal_edrxValue);
        }
    }
    return ok;
}

void EdrxParameters::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_RatTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ratType"), m_RatType));
    }
    if(m_EdrxValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("edrxValue"), m_EdrxValue));
    }
}

bool EdrxParameters::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("ratType")))
    {
        std::shared_ptr<RatType> refVal_ratType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ratType")), refVal_ratType );
        setRatType(refVal_ratType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("edrxValue")))
    {
        utility::string_t refVal_edrxValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("edrxValue")), refVal_edrxValue );
        setEdrxValue(refVal_edrxValue);
    }
    return ok;
}

std::shared_ptr<RatType> EdrxParameters::getRatType() const
{
    return m_RatType;
}

void EdrxParameters::setRatType(const std::shared_ptr<RatType>& value)
{
    m_RatType = value;
    m_RatTypeIsSet = true;
}

bool EdrxParameters::ratTypeIsSet() const
{
    return m_RatTypeIsSet;
}

void EdrxParameters::unsetRatType()
{
    m_RatTypeIsSet = false;
}
utility::string_t EdrxParameters::getEdrxValue() const
{
    return m_EdrxValue;
}

void EdrxParameters::setEdrxValue(const utility::string_t& value)
{
    m_EdrxValue = value;
    m_EdrxValueIsSet = true;
}

bool EdrxParameters::edrxValueIsSet() const
{
    return m_EdrxValueIsSet;
}

void EdrxParameters::unsetEdrxValue()
{
    m_EdrxValueIsSet = false;
}
}
}
}
}


