/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CreateSubscription.h
 *
 *
 */

#ifndef CreateSubscription_H_
#define CreateSubscription_H_

#include "jsonParser.hpp"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class CreateSubscription : public jsonParser::jsonParser<CreateSubscription> {
public:
  explicit CreateSubscription() {
    // constructor
    m_NfId = "";

    m_NfIdFlag = (staticjson::Flags::Optional);
    m_UcmfNotificationUri = "";

    m_UcmfNotificationUriFlag = staticjson::Flags::Default;
    m_SuggestedExpires = "";

    m_SuggestedExpiresFlag = (staticjson::Flags::Optional);
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag = (staticjson::Flags::Optional);
  };
  virtual ~CreateSubscription(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : NfId UcmfNotificationUri
    // SuggestedExpires SupportedFeatures
    h->add_property("nfId", &this->m_NfId, m_NfIdFlag);
    h->add_property("ucmfNotificationUri", &this->m_UcmfNotificationUri,
                    m_UcmfNotificationUriFlag);
    h->add_property("suggestedExpires", &this->m_SuggestedExpires,
                    m_SuggestedExpiresFlag);
    h->add_property("supportedFeatures", &this->m_SupportedFeatures,
                    m_SupportedFeaturesFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const CreateSubscription &obj) {

    o << "NfId : " << obj.m_NfId << std::endl;

    o << "UcmfNotificationUri : " << obj.m_UcmfNotificationUri << std::endl;

    o << "SuggestedExpires : " << obj.m_SuggestedExpires << std::endl;

    o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// CreateSubscription members vars : NfId UcmfNotificationUri
  /// SuggestedExpires SupportedFeatures

  std::string getNfId() const { return m_NfId; }
  void setNfId(std::string const &value) { m_NfId = value; }

  std::string getUcmfNotificationUri() const { return m_UcmfNotificationUri; }
  void setUcmfNotificationUri(std::string const &value) {
    m_UcmfNotificationUri = value;
  }

  std::string getSuggestedExpires() const { return m_SuggestedExpires; }
  void setSuggestedExpires(std::string const &value) {
    m_SuggestedExpires = value;
  }

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

public:
  std::string m_NfId;

  unsigned m_NfIdFlag;
  std::string m_UcmfNotificationUri;

  unsigned m_UcmfNotificationUriFlag;
  std::string m_SuggestedExpires;

  unsigned m_SuggestedExpiresFlag;
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CreateSubscription_H_ */
