/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExpectedUeBehaviourData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef ExpectedUeBehaviourData_H_
#define ExpectedUeBehaviourData_H_

#include "BatteryIndication.h"
#include "CSB_JsonParser.h"
#include "LocationArea.h"
#include "ScheduledCommunicationTime.h"
#include "ScheduledCommunicationType.h"
#include "StationaryIndication.h"
#include "TrafficProfile.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ExpectedUeBehaviourData
    : public jsonParser::jsonParser<ExpectedUeBehaviourData> {
public:
  explicit ExpectedUeBehaviourData() {
    // constructor

    m_StationaryIndicationFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_StationaryIndicationOutFlag.reset(new unsigned);
    *m_StationaryIndicationOutFlag.get() = 0;
    m_CommunicationDurationTime = 0;

    m_CommunicationDurationTimeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CommunicationDurationTimeOutFlag.reset(new unsigned);
    *m_CommunicationDurationTimeOutFlag.get() = 0;
    m_PeriodicTime = 0;

    m_PeriodicTimeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_PeriodicTimeOutFlag.reset(new unsigned);
    *m_PeriodicTimeOutFlag.get() = 0;

    m_ScheduledCommunicationTimeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ScheduledCommunicationTimeOutFlag.reset(new unsigned);
    *m_ScheduledCommunicationTimeOutFlag.get() = 0;

    m_ScheduledCommunicationTypeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ScheduledCommunicationTypeOutFlag.reset(new unsigned);
    *m_ScheduledCommunicationTypeOutFlag.get() = 0;

    m_ExpectedUmtsFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ExpectedUmtsOutFlag.reset(new unsigned);
    *m_ExpectedUmtsOutFlag.get() = 0;

    m_TrafficProfileFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_TrafficProfileOutFlag.reset(new unsigned);
    *m_TrafficProfileOutFlag.get() = 0;

    m_BatteryIndicationFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_BatteryIndicationOutFlag.reset(new unsigned);
    *m_BatteryIndicationOutFlag.get() = 0;
    m_ValidityTime = "";

    m_ValidityTimeFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_ValidityTimeOutFlag.reset(new unsigned);
    *m_ValidityTimeOutFlag.get() = 0;
  };
  virtual ~ExpectedUeBehaviourData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : StationaryIndication
    // CommunicationDurationTime PeriodicTime ScheduledCommunicationTime
    // ScheduledCommunicationType ExpectedUmts TrafficProfile BatteryIndication
    // ValidityTime
    h->add_optional_property(
        "stationaryIndication", &this->m_StationaryIndication,
        m_StationaryIndicationFlag, m_StationaryIndicationOutFlag);
    h->add_optional_property(
        "communicationDurationTime", &this->m_CommunicationDurationTime,
        m_CommunicationDurationTimeFlag, m_CommunicationDurationTimeOutFlag);
    h->add_optional_property("periodicTime", &this->m_PeriodicTime,
                             m_PeriodicTimeFlag, m_PeriodicTimeOutFlag);
    h->add_optional_property(
        "scheduledCommunicationTime", &this->m_ScheduledCommunicationTime,
        m_ScheduledCommunicationTimeFlag, m_ScheduledCommunicationTimeOutFlag);
    h->add_optional_property(
        "scheduledCommunicationType", &this->m_ScheduledCommunicationType,
        m_ScheduledCommunicationTypeFlag, m_ScheduledCommunicationTypeOutFlag);
    h->add_optional_property("expectedUmts", &this->m_ExpectedUmts,
                             m_ExpectedUmtsFlag, m_ExpectedUmtsOutFlag);
    h->add_optional_property("trafficProfile", &this->m_TrafficProfile,
                             m_TrafficProfileFlag, m_TrafficProfileOutFlag);
    h->add_optional_property("batteryIndication", &this->m_BatteryIndication,
                             m_BatteryIndicationFlag,
                             m_BatteryIndicationOutFlag);
    h->add_optional_property("validityTime", &this->m_ValidityTime,
                             m_ValidityTimeFlag, m_ValidityTimeOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const ExpectedUeBehaviourData &obj) {

    o << "StationaryIndication, optional flag is : "
      << *m_StationaryIndicationOutFlag
      << ", content is : " << obj.m_StationaryIndication << std::endl;

    o << "CommunicationDurationTime, optional flag is : "
      << *m_CommunicationDurationTimeOutFlag
      << ", content is : " << obj.m_CommunicationDurationTime << std::endl;

    o << "PeriodicTime, optional flag is : " << *m_PeriodicTimeOutFlag
      << ", content is : " << obj.m_PeriodicTime << std::endl;

    o << "ScheduledCommunicationTime, optional flag is : "
      << *m_ScheduledCommunicationTimeOutFlag
      << ", content is : " << obj.m_ScheduledCommunicationTime << std::endl;

    o << "ScheduledCommunicationType, optional flag is : "
      << *m_ScheduledCommunicationTypeOutFlag
      << ", content is : " << obj.m_ScheduledCommunicationType << std::endl;
    o << "ExpectedUmts, optional flag is : " << *m_ExpectedUmtsOutFlag
      << std::endl;
    o << convert2string(std::string("ExpectedUmts"), obj.m_ExpectedUmts)
      << std::endl;

    o << "TrafficProfile, optional flag is : " << *m_TrafficProfileOutFlag
      << ", content is : " << obj.m_TrafficProfile << std::endl;

    o << "BatteryIndication, optional flag is : " << *m_BatteryIndicationOutFlag
      << ", content is : " << obj.m_BatteryIndication << std::endl;

    o << "ValidityTime, optional flag is : " << *m_ValidityTimeOutFlag
      << ", content is : " << obj.m_ValidityTime << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// ExpectedUeBehaviourData members vars : StationaryIndication
  /// CommunicationDurationTime PeriodicTime ScheduledCommunicationTime
  /// ScheduledCommunicationType ExpectedUmts TrafficProfile BatteryIndication
  /// ValidityTime

  StationaryIndication getStationaryIndication() const {
    return m_StationaryIndication;
  }
  void setStationaryIndication(StationaryIndication const &value) {
    m_StationaryIndication = value;
  }

  int32_t getCommunicationDurationTime() const {
    return m_CommunicationDurationTime;
  }
  void setCommunicationDurationTime(int32_t const value) {
    m_CommunicationDurationTime = value;
  }

  int32_t getPeriodicTime() const { return m_PeriodicTime; }
  void setPeriodicTime(int32_t const value) { m_PeriodicTime = value; }

  ScheduledCommunicationTime getScheduledCommunicationTime() const {
    return m_ScheduledCommunicationTime;
  }
  void setScheduledCommunicationTime(ScheduledCommunicationTime const &value) {
    m_ScheduledCommunicationTime = value;
  }

  ScheduledCommunicationType getScheduledCommunicationType() const {
    return m_ScheduledCommunicationType;
  }
  void setScheduledCommunicationType(ScheduledCommunicationType const &value) {
    m_ScheduledCommunicationType = value;
  }

  std::vector<LocationArea> &getExpectedUmts() { return m_ExpectedUmts; }
  void setExpectedUmts(std::vector<LocationArea> const &value) {
    m_ExpectedUmts = value;
  }

  TrafficProfile getTrafficProfile() const { return m_TrafficProfile; }
  void setTrafficProfile(TrafficProfile const &value) {
    m_TrafficProfile = value;
  }

  BatteryIndication getBatteryIndication() const { return m_BatteryIndication; }
  void setBatteryIndication(BatteryIndication const &value) {
    m_BatteryIndication = value;
  }

  std::string getValidityTime() const { return m_ValidityTime; }
  void setValidityTime(std::string const &value) { m_ValidityTime = value; }

public:
  StationaryIndication m_StationaryIndication;

  unsigned m_StationaryIndicationFlag;
  shared_ptr<unsigned> m_StationaryIndicationOutFlag;
  int32_t m_CommunicationDurationTime;

  unsigned m_CommunicationDurationTimeFlag;
  shared_ptr<unsigned> m_CommunicationDurationTimeOutFlag;
  int32_t m_PeriodicTime;

  unsigned m_PeriodicTimeFlag;
  shared_ptr<unsigned> m_PeriodicTimeOutFlag;
  ScheduledCommunicationTime m_ScheduledCommunicationTime;

  unsigned m_ScheduledCommunicationTimeFlag;
  shared_ptr<unsigned> m_ScheduledCommunicationTimeOutFlag;
  ScheduledCommunicationType m_ScheduledCommunicationType;

  unsigned m_ScheduledCommunicationTypeFlag;
  shared_ptr<unsigned> m_ScheduledCommunicationTypeOutFlag;
  std::vector<LocationArea> m_ExpectedUmts;

  unsigned m_ExpectedUmtsFlag;
  shared_ptr<unsigned> m_ExpectedUmtsOutFlag;
  TrafficProfile m_TrafficProfile;

  unsigned m_TrafficProfileFlag;
  shared_ptr<unsigned> m_TrafficProfileOutFlag;
  BatteryIndication m_BatteryIndication;

  unsigned m_BatteryIndicationFlag;
  shared_ptr<unsigned> m_BatteryIndicationOutFlag;
  std::string m_ValidityTime;

  unsigned m_ValidityTimeFlag;
  shared_ptr<unsigned> m_ValidityTimeOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ExpectedUeBehaviourData_H_ */
