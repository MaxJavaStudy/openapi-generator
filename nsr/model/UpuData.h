/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UpuData.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef UpuData_H_
#define UpuData_H_

#include "CSB_JsonParser.h"
#include "Snssai.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UpuData : public jsonParser::jsonParser<UpuData> {
public:
  explicit UpuData() {
    // constructor
    m_SecPacket = "";

    m_SecPacketFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_SecPacketOutFlag.reset(new unsigned);
    *m_SecPacketOutFlag.get() = 0;

    m_DefaultConfNssaiFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_DefaultConfNssaiOutFlag.reset(new unsigned);
    *m_DefaultConfNssaiOutFlag.get() = 0;
    m_RoutingId = "";

    m_RoutingIdFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_RoutingIdOutFlag.reset(new unsigned);
    *m_RoutingIdOutFlag.get() = 0;
  };
  virtual ~UpuData(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : SecPacket DefaultConfNssai RoutingId
    h->add_optional_property("secPacket", &this->m_SecPacket, m_SecPacketFlag,
                             m_SecPacketOutFlag);
    h->add_optional_property("defaultConfNssai", &this->m_DefaultConfNssai,
                             m_DefaultConfNssaiFlag, m_DefaultConfNssaiOutFlag);
    h->add_optional_property("routingId", &this->m_RoutingId, m_RoutingIdFlag,
                             m_RoutingIdOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const UpuData &obj) {

    o << "SecPacket, optional flag is : " << *m_SecPacketOutFlag
      << ", content is : " << obj.m_SecPacket << std::endl;
    o << "DefaultConfNssai, optional flag is : " << *m_DefaultConfNssaiOutFlag
      << std::endl;
    o << convert2string(std::string("DefaultConfNssai"), obj.m_DefaultConfNssai)
      << std::endl;

    o << "RoutingId, optional flag is : " << *m_RoutingIdOutFlag
      << ", content is : " << obj.m_RoutingId << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UpuData members vars : SecPacket DefaultConfNssai RoutingId

  std::string getSecPacket() const { return m_SecPacket; }
  void setSecPacket(std::string const &value) { m_SecPacket = value; }

  std::vector<Snssai> &getDefaultConfNssai() { return m_DefaultConfNssai; }
  void setDefaultConfNssai(std::vector<Snssai> const &value) {
    m_DefaultConfNssai = value;
  }

  std::string getRoutingId() const { return m_RoutingId; }
  void setRoutingId(std::string const &value) { m_RoutingId = value; }

public:
  std::string m_SecPacket;

  unsigned m_SecPacketFlag;
  shared_ptr<unsigned> m_SecPacketOutFlag;
  std::vector<Snssai> m_DefaultConfNssai;

  unsigned m_DefaultConfNssaiFlag;
  shared_ptr<unsigned> m_DefaultConfNssaiOutFlag;
  std::string m_RoutingId;

  unsigned m_RoutingIdFlag;
  shared_ptr<unsigned> m_RoutingIdOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UpuData_H_ */
