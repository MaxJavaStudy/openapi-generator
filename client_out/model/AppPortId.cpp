/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AppPortId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AppPortId::AppPortId()
{
    m_DestinationPort = 0;
    m_DestinationPortIsSet = false;
    m_OriginatorPort = 0;
    m_OriginatorPortIsSet = false;
}

AppPortId::~AppPortId()
{
}

void AppPortId::validate()
{
    // TODO: implement validation
}

web::json::value AppPortId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DestinationPortIsSet)
    {
        val[utility::conversions::to_string_t("destinationPort")] = ModelBase::toJson(m_DestinationPort);
    }
    if(m_OriginatorPortIsSet)
    {
        val[utility::conversions::to_string_t("originatorPort")] = ModelBase::toJson(m_OriginatorPort);
    }

    return val;
}

bool AppPortId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("destinationPort")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("destinationPort"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_destinationPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_destinationPort);
            setDestinationPort(refVal_destinationPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("originatorPort")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("originatorPort"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_originatorPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_originatorPort);
            setOriginatorPort(refVal_originatorPort);
        }
    }
    return ok;
}

void AppPortId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DestinationPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("destinationPort"), m_DestinationPort));
    }
    if(m_OriginatorPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("originatorPort"), m_OriginatorPort));
    }
}

bool AppPortId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("destinationPort")))
    {
        int32_t refVal_destinationPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("destinationPort")), refVal_destinationPort );
        setDestinationPort(refVal_destinationPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("originatorPort")))
    {
        int32_t refVal_originatorPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("originatorPort")), refVal_originatorPort );
        setOriginatorPort(refVal_originatorPort);
    }
    return ok;
}

int32_t AppPortId::getDestinationPort() const
{
    return m_DestinationPort;
}

void AppPortId::setDestinationPort(int32_t value)
{
    m_DestinationPort = value;
    m_DestinationPortIsSet = true;
}

bool AppPortId::destinationPortIsSet() const
{
    return m_DestinationPortIsSet;
}

void AppPortId::unsetDestinationPort()
{
    m_DestinationPortIsSet = false;
}
int32_t AppPortId::getOriginatorPort() const
{
    return m_OriginatorPort;
}

void AppPortId::setOriginatorPort(int32_t value)
{
    m_OriginatorPort = value;
    m_OriginatorPortIsSet = true;
}

bool AppPortId::originatorPortIsSet() const
{
    return m_OriginatorPortIsSet;
}

void AppPortId::unsetOriginatorPort()
{
    m_OriginatorPortIsSet = false;
}
}
}
}
}


