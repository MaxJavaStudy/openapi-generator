/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UcmfNotification.h
 *
 *
 */

#ifndef UcmfNotification_H_
#define UcmfNotification_H_

#include "EventType.h"
#include "ManAssOpRequestlist.h"
#include "jsonParser.hpp"
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UcmfNotification : public jsonParser::jsonParser<UcmfNotification> {
public:
  explicit UcmfNotification() {
    // constructor
    m_DicEntryId = 0;

    m_DicEntryIdFlag = staticjson::Flags::Default;

    m_EventTypeFlag = staticjson::Flags::Default;

    m_ManAssOpRequestlistFlag = (staticjson::Flags::Optional);
    m_VersionId = 0;

    m_VersionIdFlag = (staticjson::Flags::Optional);
  };
  virtual ~UcmfNotification(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DicEntryId EventType
    // ManAssOpRequestlist VersionId
    h->add_property("dicEntryId", &this->m_DicEntryId, m_DicEntryIdFlag);
    h->add_property("eventType", &this->m_EventType, m_EventTypeFlag);
    h->add_property("manAssOpRequestlist", &this->m_ManAssOpRequestlist,
                    m_ManAssOpRequestlistFlag);
    h->add_property("versionId", &this->m_VersionId, m_VersionIdFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const UcmfNotification &obj) {

    o << "DicEntryId : " << obj.m_DicEntryId << std::endl;

    o << "EventType : " << obj.m_EventType << std::endl;

    o << "ManAssOpRequestlist : " << obj.m_ManAssOpRequestlist << std::endl;

    o << "VersionId : " << obj.m_VersionId << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UcmfNotification members vars : DicEntryId EventType ManAssOpRequestlist
  /// VersionId

  int32_t getDicEntryId() const { return m_DicEntryId; }
  void setDicEntryId(int32_t const value) { m_DicEntryId = value; }

  EventType getEventType() const { return m_EventType; }
  void setEventType(EventType const &value) { m_EventType = value; }

  ManAssOpRequestlist getManAssOpRequestlist() const {
    return m_ManAssOpRequestlist;
  }
  void setManAssOpRequestlist(ManAssOpRequestlist const &value) {
    m_ManAssOpRequestlist = value;
  }

  int32_t getVersionId() const { return m_VersionId; }
  void setVersionId(int32_t const value) { m_VersionId = value; }

public:
  int32_t m_DicEntryId;

  unsigned m_DicEntryIdFlag;
  EventType m_EventType;

  unsigned m_EventTypeFlag;
  ManAssOpRequestlist m_ManAssOpRequestlist;

  unsigned m_ManAssOpRequestlistFlag;
  int32_t m_VersionId;

  unsigned m_VersionIdFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UcmfNotification_H_ */
