/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CagData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CagData::CagData()
{
    m_CagInfosIsSet = false;
    m_ProvisioningTime = utility::datetime();
    m_ProvisioningTimeIsSet = false;
}

CagData::~CagData()
{
}

void CagData::validate()
{
    // TODO: implement validation
}

web::json::value CagData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CagInfosIsSet)
    {
        val[utility::conversions::to_string_t("cagInfos")] = ModelBase::toJson(m_CagInfos);
    }
    if(m_ProvisioningTimeIsSet)
    {
        val[utility::conversions::to_string_t("provisioningTime")] = ModelBase::toJson(m_ProvisioningTime);
    }

    return val;
}

bool CagData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("cagInfos")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cagInfos"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<CagInfo>> refVal_cagInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_cagInfos);
            setCagInfos(refVal_cagInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("provisioningTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("provisioningTime"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_provisioningTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_provisioningTime);
            setProvisioningTime(refVal_provisioningTime);
        }
    }
    return ok;
}

void CagData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CagInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cagInfos"), m_CagInfos));
    }
    if(m_ProvisioningTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("provisioningTime"), m_ProvisioningTime));
    }
}

bool CagData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cagInfos")))
    {
        std::map<utility::string_t, std::shared_ptr<CagInfo>> refVal_cagInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cagInfos")), refVal_cagInfos );
        setCagInfos(refVal_cagInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("provisioningTime")))
    {
        utility::datetime refVal_provisioningTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("provisioningTime")), refVal_provisioningTime );
        setProvisioningTime(refVal_provisioningTime);
    }
    return ok;
}

std::map<utility::string_t, std::shared_ptr<CagInfo>>& CagData::getCagInfos()
{
    return m_CagInfos;
}

void CagData::setCagInfos(const std::map<utility::string_t, std::shared_ptr<CagInfo>>& value)
{
    m_CagInfos = value;
    m_CagInfosIsSet = true;
}

bool CagData::cagInfosIsSet() const
{
    return m_CagInfosIsSet;
}

void CagData::unsetCagInfos()
{
    m_CagInfosIsSet = false;
}
utility::datetime CagData::getProvisioningTime() const
{
    return m_ProvisioningTime;
}

void CagData::setProvisioningTime(const utility::datetime& value)
{
    m_ProvisioningTime = value;
    m_ProvisioningTimeIsSet = true;
}

bool CagData::provisioningTimeIsSet() const
{
    return m_ProvisioningTimeIsSet;
}

void CagData::unsetProvisioningTime()
{
    m_ProvisioningTimeIsSet = false;
}
}
}
}
}


