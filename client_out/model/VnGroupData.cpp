/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "VnGroupData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




VnGroupData::VnGroupData()
{
    m_PduSessionTypesIsSet = false;
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_SingleNssaiIsSet = false;
    m_AppDescriptorsIsSet = false;
}

VnGroupData::~VnGroupData()
{
}

void VnGroupData::validate()
{
    // TODO: implement validation
}

web::json::value VnGroupData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PduSessionTypesIsSet)
    {
        val[utility::conversions::to_string_t("pduSessionTypes")] = ModelBase::toJson(m_PduSessionTypes);
    }
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t("dnn")] = ModelBase::toJson(m_Dnn);
    }
    if(m_SingleNssaiIsSet)
    {
        val[utility::conversions::to_string_t("singleNssai")] = ModelBase::toJson(m_SingleNssai);
    }
    if(m_AppDescriptorsIsSet)
    {
        val[utility::conversions::to_string_t("appDescriptors")] = ModelBase::toJson(m_AppDescriptors);
    }

    return val;
}

bool VnGroupData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pduSessionTypes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pduSessionTypes"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PduSessionTypes> refVal_pduSessionTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_pduSessionTypes);
            setPduSessionTypes(refVal_pduSessionTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dnn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnn);
            setDnn(refVal_dnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("singleNssai")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("singleNssai"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_singleNssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_singleNssai);
            setSingleNssai(refVal_singleNssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("appDescriptors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("appDescriptors"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AppDescriptor>> refVal_appDescriptors;
            ok &= ModelBase::fromJson(fieldValue, refVal_appDescriptors);
            setAppDescriptors(refVal_appDescriptors);
        }
    }
    return ok;
}

void VnGroupData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PduSessionTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pduSessionTypes"), m_PduSessionTypes));
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnn"), m_Dnn));
    }
    if(m_SingleNssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("singleNssai"), m_SingleNssai));
    }
    if(m_AppDescriptorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("appDescriptors"), m_AppDescriptors));
    }
}

bool VnGroupData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pduSessionTypes")))
    {
        std::shared_ptr<PduSessionTypes> refVal_pduSessionTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pduSessionTypes")), refVal_pduSessionTypes );
        setPduSessionTypes(refVal_pduSessionTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dnn")))
    {
        utility::string_t refVal_dnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnn")), refVal_dnn );
        setDnn(refVal_dnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("singleNssai")))
    {
        std::shared_ptr<Snssai> refVal_singleNssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("singleNssai")), refVal_singleNssai );
        setSingleNssai(refVal_singleNssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("appDescriptors")))
    {
        std::vector<std::shared_ptr<AppDescriptor>> refVal_appDescriptors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("appDescriptors")), refVal_appDescriptors );
        setAppDescriptors(refVal_appDescriptors);
    }
    return ok;
}

std::shared_ptr<PduSessionTypes> VnGroupData::getPduSessionTypes() const
{
    return m_PduSessionTypes;
}

void VnGroupData::setPduSessionTypes(const std::shared_ptr<PduSessionTypes>& value)
{
    m_PduSessionTypes = value;
    m_PduSessionTypesIsSet = true;
}

bool VnGroupData::pduSessionTypesIsSet() const
{
    return m_PduSessionTypesIsSet;
}

void VnGroupData::unsetPduSessionTypes()
{
    m_PduSessionTypesIsSet = false;
}
utility::string_t VnGroupData::getDnn() const
{
    return m_Dnn;
}

void VnGroupData::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool VnGroupData::dnnIsSet() const
{
    return m_DnnIsSet;
}

void VnGroupData::unsetDnn()
{
    m_DnnIsSet = false;
}
std::shared_ptr<Snssai> VnGroupData::getSingleNssai() const
{
    return m_SingleNssai;
}

void VnGroupData::setSingleNssai(const std::shared_ptr<Snssai>& value)
{
    m_SingleNssai = value;
    m_SingleNssaiIsSet = true;
}

bool VnGroupData::singleNssaiIsSet() const
{
    return m_SingleNssaiIsSet;
}

void VnGroupData::unsetSingleNssai()
{
    m_SingleNssaiIsSet = false;
}
std::vector<std::shared_ptr<AppDescriptor>>& VnGroupData::getAppDescriptors()
{
    return m_AppDescriptors;
}

void VnGroupData::setAppDescriptors(const std::vector<std::shared_ptr<AppDescriptor>>& value)
{
    m_AppDescriptors = value;
    m_AppDescriptorsIsSet = true;
}

bool VnGroupData::appDescriptorsIsSet() const
{
    return m_AppDescriptorsIsSet;
}

void VnGroupData::unsetAppDescriptors()
{
    m_AppDescriptorsIsSet = false;
}
}
}
}
}


