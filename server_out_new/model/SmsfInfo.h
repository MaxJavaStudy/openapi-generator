/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SmsfInfo.h
 *
 * 
 */

#ifndef SmsfInfo_H_
#define SmsfInfo_H_


#include <string>
#include "PlmnId.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  SmsfInfo: public jsonParser::jsonParser<SmsfInfo>
{
public:
    explicit SmsfInfo(){
        // constructor
        m_SmsfInstanceId = "";
        
            m_SmsfInstanceIdFlag = staticjson::Flags::Default;

            m_PlmnIdFlag = staticjson::Flags::Default;
    };
    virtual ~SmsfInfo(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : SmsfInstanceId PlmnId 
        h->add_property("smsfInstanceId", &this->m_SmsfInstanceId, m_SmsfInstanceIdFlag);
        h->add_property("plmnId", &this->m_PlmnId, m_PlmnIdFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const SmsfInfo& obj)
    {
        
        o << "SmsfInstanceId : " << obj.m_SmsfInstanceId << std::endl;

        o << "PlmnId : " << obj.m_PlmnId << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// SmsfInfo members vars : SmsfInstanceId PlmnId 

    std::string  getSmsfInstanceId() const
    {
        return m_SmsfInstanceId;
    }
    void  setSmsfInstanceId(std::string const& value)
    {
        m_SmsfInstanceId = value;
    }

PlmnId  getPlmnId() const
    {
        return m_PlmnId;
    }
    void  setPlmnId(PlmnId const& value)
    {
        m_PlmnId = value;
    }



    
public:
    std::string m_SmsfInstanceId;
    
    unsigned m_SmsfInstanceIdFlag;
    PlmnId m_PlmnId;
    
    unsigned m_PlmnIdFlag;
  
};
}
}
}
}

#endif /* SmsfInfo_H_ */
