/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SharedData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SharedData::SharedData()
{
    m_SharedDataId = utility::conversions::to_string_t("");
    m_SharedDataIdIsSet = false;
    m_SharedAmDataIsSet = false;
    m_SharedSmsSubsDataIsSet = false;
    m_SharedSmsMngSubsDataIsSet = false;
    m_SharedDnnConfigurationsIsSet = false;
    m_SharedTraceDataIsSet = false;
    m_SharedSnssaiInfosIsSet = false;
    m_SharedVnGroupDatasIsSet = false;
}

SharedData::~SharedData()
{
}

void SharedData::validate()
{
    // TODO: implement validation
}

web::json::value SharedData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SharedDataIdIsSet)
    {
        val[utility::conversions::to_string_t("sharedDataId")] = ModelBase::toJson(m_SharedDataId);
    }
    if(m_SharedAmDataIsSet)
    {
        val[utility::conversions::to_string_t("sharedAmData")] = ModelBase::toJson(m_SharedAmData);
    }
    if(m_SharedSmsSubsDataIsSet)
    {
        val[utility::conversions::to_string_t("sharedSmsSubsData")] = ModelBase::toJson(m_SharedSmsSubsData);
    }
    if(m_SharedSmsMngSubsDataIsSet)
    {
        val[utility::conversions::to_string_t("sharedSmsMngSubsData")] = ModelBase::toJson(m_SharedSmsMngSubsData);
    }
    if(m_SharedDnnConfigurationsIsSet)
    {
        val[utility::conversions::to_string_t("sharedDnnConfigurations")] = ModelBase::toJson(m_SharedDnnConfigurations);
    }
    if(m_SharedTraceDataIsSet)
    {
        val[utility::conversions::to_string_t("sharedTraceData")] = ModelBase::toJson(m_SharedTraceData);
    }
    if(m_SharedSnssaiInfosIsSet)
    {
        val[utility::conversions::to_string_t("sharedSnssaiInfos")] = ModelBase::toJson(m_SharedSnssaiInfos);
    }
    if(m_SharedVnGroupDatasIsSet)
    {
        val[utility::conversions::to_string_t("sharedVnGroupDatas")] = ModelBase::toJson(m_SharedVnGroupDatas);
    }

    return val;
}

bool SharedData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("sharedDataId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedDataId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sharedDataId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedDataId);
            setSharedDataId(refVal_sharedDataId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedAmData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedAmData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessAndMobilitySubscriptionData> refVal_sharedAmData;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedAmData);
            setSharedAmData(refVal_sharedAmData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedSmsSubsData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedSmsSubsData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SmsSubscriptionData> refVal_sharedSmsSubsData;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedSmsSubsData);
            setSharedSmsSubsData(refVal_sharedSmsSubsData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedSmsMngSubsData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedSmsMngSubsData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SmsManagementSubscriptionData> refVal_sharedSmsMngSubsData;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedSmsMngSubsData);
            setSharedSmsMngSubsData(refVal_sharedSmsMngSubsData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedDnnConfigurations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedDnnConfigurations"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<DnnConfiguration>> refVal_sharedDnnConfigurations;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedDnnConfigurations);
            setSharedDnnConfigurations(refVal_sharedDnnConfigurations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedTraceData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedTraceData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TraceData> refVal_sharedTraceData;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedTraceData);
            setSharedTraceData(refVal_sharedTraceData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedSnssaiInfos")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedSnssaiInfos"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<SnssaiInfo>> refVal_sharedSnssaiInfos;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedSnssaiInfos);
            setSharedSnssaiInfos(refVal_sharedSnssaiInfos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sharedVnGroupDatas")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sharedVnGroupDatas"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<VnGroupData>> refVal_sharedVnGroupDatas;
            ok &= ModelBase::fromJson(fieldValue, refVal_sharedVnGroupDatas);
            setSharedVnGroupDatas(refVal_sharedVnGroupDatas);
        }
    }
    return ok;
}

void SharedData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_SharedDataIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedDataId"), m_SharedDataId));
    }
    if(m_SharedAmDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedAmData"), m_SharedAmData));
    }
    if(m_SharedSmsSubsDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedSmsSubsData"), m_SharedSmsSubsData));
    }
    if(m_SharedSmsMngSubsDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedSmsMngSubsData"), m_SharedSmsMngSubsData));
    }
    if(m_SharedDnnConfigurationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedDnnConfigurations"), m_SharedDnnConfigurations));
    }
    if(m_SharedTraceDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedTraceData"), m_SharedTraceData));
    }
    if(m_SharedSnssaiInfosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedSnssaiInfos"), m_SharedSnssaiInfos));
    }
    if(m_SharedVnGroupDatasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sharedVnGroupDatas"), m_SharedVnGroupDatas));
    }
}

bool SharedData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("sharedDataId")))
    {
        utility::string_t refVal_sharedDataId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedDataId")), refVal_sharedDataId );
        setSharedDataId(refVal_sharedDataId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedAmData")))
    {
        std::shared_ptr<AccessAndMobilitySubscriptionData> refVal_sharedAmData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedAmData")), refVal_sharedAmData );
        setSharedAmData(refVal_sharedAmData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedSmsSubsData")))
    {
        std::shared_ptr<SmsSubscriptionData> refVal_sharedSmsSubsData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedSmsSubsData")), refVal_sharedSmsSubsData );
        setSharedSmsSubsData(refVal_sharedSmsSubsData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedSmsMngSubsData")))
    {
        std::shared_ptr<SmsManagementSubscriptionData> refVal_sharedSmsMngSubsData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedSmsMngSubsData")), refVal_sharedSmsMngSubsData );
        setSharedSmsMngSubsData(refVal_sharedSmsMngSubsData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedDnnConfigurations")))
    {
        std::map<utility::string_t, std::shared_ptr<DnnConfiguration>> refVal_sharedDnnConfigurations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedDnnConfigurations")), refVal_sharedDnnConfigurations );
        setSharedDnnConfigurations(refVal_sharedDnnConfigurations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedTraceData")))
    {
        std::shared_ptr<TraceData> refVal_sharedTraceData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedTraceData")), refVal_sharedTraceData );
        setSharedTraceData(refVal_sharedTraceData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedSnssaiInfos")))
    {
        std::map<utility::string_t, std::shared_ptr<SnssaiInfo>> refVal_sharedSnssaiInfos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedSnssaiInfos")), refVal_sharedSnssaiInfos );
        setSharedSnssaiInfos(refVal_sharedSnssaiInfos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sharedVnGroupDatas")))
    {
        std::map<utility::string_t, std::shared_ptr<VnGroupData>> refVal_sharedVnGroupDatas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sharedVnGroupDatas")), refVal_sharedVnGroupDatas );
        setSharedVnGroupDatas(refVal_sharedVnGroupDatas);
    }
    return ok;
}

utility::string_t SharedData::getSharedDataId() const
{
    return m_SharedDataId;
}

void SharedData::setSharedDataId(const utility::string_t& value)
{
    m_SharedDataId = value;
    m_SharedDataIdIsSet = true;
}

bool SharedData::sharedDataIdIsSet() const
{
    return m_SharedDataIdIsSet;
}

void SharedData::unsetSharedDataId()
{
    m_SharedDataIdIsSet = false;
}
std::shared_ptr<AccessAndMobilitySubscriptionData> SharedData::getSharedAmData() const
{
    return m_SharedAmData;
}

void SharedData::setSharedAmData(const std::shared_ptr<AccessAndMobilitySubscriptionData>& value)
{
    m_SharedAmData = value;
    m_SharedAmDataIsSet = true;
}

bool SharedData::sharedAmDataIsSet() const
{
    return m_SharedAmDataIsSet;
}

void SharedData::unsetSharedAmData()
{
    m_SharedAmDataIsSet = false;
}
std::shared_ptr<SmsSubscriptionData> SharedData::getSharedSmsSubsData() const
{
    return m_SharedSmsSubsData;
}

void SharedData::setSharedSmsSubsData(const std::shared_ptr<SmsSubscriptionData>& value)
{
    m_SharedSmsSubsData = value;
    m_SharedSmsSubsDataIsSet = true;
}

bool SharedData::sharedSmsSubsDataIsSet() const
{
    return m_SharedSmsSubsDataIsSet;
}

void SharedData::unsetSharedSmsSubsData()
{
    m_SharedSmsSubsDataIsSet = false;
}
std::shared_ptr<SmsManagementSubscriptionData> SharedData::getSharedSmsMngSubsData() const
{
    return m_SharedSmsMngSubsData;
}

void SharedData::setSharedSmsMngSubsData(const std::shared_ptr<SmsManagementSubscriptionData>& value)
{
    m_SharedSmsMngSubsData = value;
    m_SharedSmsMngSubsDataIsSet = true;
}

bool SharedData::sharedSmsMngSubsDataIsSet() const
{
    return m_SharedSmsMngSubsDataIsSet;
}

void SharedData::unsetSharedSmsMngSubsData()
{
    m_SharedSmsMngSubsDataIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<DnnConfiguration>>& SharedData::getSharedDnnConfigurations()
{
    return m_SharedDnnConfigurations;
}

void SharedData::setSharedDnnConfigurations(const std::map<utility::string_t, std::shared_ptr<DnnConfiguration>>& value)
{
    m_SharedDnnConfigurations = value;
    m_SharedDnnConfigurationsIsSet = true;
}

bool SharedData::sharedDnnConfigurationsIsSet() const
{
    return m_SharedDnnConfigurationsIsSet;
}

void SharedData::unsetSharedDnnConfigurations()
{
    m_SharedDnnConfigurationsIsSet = false;
}
std::shared_ptr<TraceData> SharedData::getSharedTraceData() const
{
    return m_SharedTraceData;
}

void SharedData::setSharedTraceData(const std::shared_ptr<TraceData>& value)
{
    m_SharedTraceData = value;
    m_SharedTraceDataIsSet = true;
}

bool SharedData::sharedTraceDataIsSet() const
{
    return m_SharedTraceDataIsSet;
}

void SharedData::unsetSharedTraceData()
{
    m_SharedTraceDataIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<SnssaiInfo>>& SharedData::getSharedSnssaiInfos()
{
    return m_SharedSnssaiInfos;
}

void SharedData::setSharedSnssaiInfos(const std::map<utility::string_t, std::shared_ptr<SnssaiInfo>>& value)
{
    m_SharedSnssaiInfos = value;
    m_SharedSnssaiInfosIsSet = true;
}

bool SharedData::sharedSnssaiInfosIsSet() const
{
    return m_SharedSnssaiInfosIsSet;
}

void SharedData::unsetSharedSnssaiInfos()
{
    m_SharedSnssaiInfosIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<VnGroupData>>& SharedData::getSharedVnGroupDatas()
{
    return m_SharedVnGroupDatas;
}

void SharedData::setSharedVnGroupDatas(const std::map<utility::string_t, std::shared_ptr<VnGroupData>>& value)
{
    m_SharedVnGroupDatas = value;
    m_SharedVnGroupDatasIsSet = true;
}

bool SharedData::sharedVnGroupDatasIsSet() const
{
    return m_SharedVnGroupDatasIsSet;
}

void SharedData::unsetSharedVnGroupDatas()
{
    m_SharedVnGroupDatasIsSet = false;
}
}
}
}
}


