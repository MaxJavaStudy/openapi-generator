/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SharedData.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SharedData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SharedData_H_


#include "../ModelBase.h"

#include "VnGroupData.h"
#include "DnnConfiguration.h"
#include "SnssaiInfo.h"
#include "SmsSubscriptionData.h"
#include <cpprest/details/basic_types.h>
#include "SmsManagementSubscriptionData.h"
#include "AccessAndMobilitySubscriptionData.h"
#include <map>
#include "TraceData.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SharedData
    : public ModelBase
{
public:
    SharedData();
    virtual ~SharedData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SharedData members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSharedDataId() const;
    bool sharedDataIdIsSet() const;
    void unsetSharedDataId();

    void setSharedDataId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AccessAndMobilitySubscriptionData> getSharedAmData() const;
    bool sharedAmDataIsSet() const;
    void unsetSharedAmData();

    void setSharedAmData(const std::shared_ptr<AccessAndMobilitySubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SmsSubscriptionData> getSharedSmsSubsData() const;
    bool sharedSmsSubsDataIsSet() const;
    void unsetSharedSmsSubsData();

    void setSharedSmsSubsData(const std::shared_ptr<SmsSubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SmsManagementSubscriptionData> getSharedSmsMngSubsData() const;
    bool sharedSmsMngSubsDataIsSet() const;
    void unsetSharedSmsMngSubsData();

    void setSharedSmsMngSubsData(const std::shared_ptr<SmsManagementSubscriptionData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<DnnConfiguration>>& getSharedDnnConfigurations();
    bool sharedDnnConfigurationsIsSet() const;
    void unsetSharedDnnConfigurations();

    void setSharedDnnConfigurations(const std::map<utility::string_t, std::shared_ptr<DnnConfiguration>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TraceData> getSharedTraceData() const;
    bool sharedTraceDataIsSet() const;
    void unsetSharedTraceData();

    void setSharedTraceData(const std::shared_ptr<TraceData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<SnssaiInfo>>& getSharedSnssaiInfos();
    bool sharedSnssaiInfosIsSet() const;
    void unsetSharedSnssaiInfos();

    void setSharedSnssaiInfos(const std::map<utility::string_t, std::shared_ptr<SnssaiInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<VnGroupData>>& getSharedVnGroupDatas();
    bool sharedVnGroupDatasIsSet() const;
    void unsetSharedVnGroupDatas();

    void setSharedVnGroupDatas(const std::map<utility::string_t, std::shared_ptr<VnGroupData>>& value);


protected:
    utility::string_t m_SharedDataId;
    bool m_SharedDataIdIsSet;
    std::shared_ptr<AccessAndMobilitySubscriptionData> m_SharedAmData;
    bool m_SharedAmDataIsSet;
    std::shared_ptr<SmsSubscriptionData> m_SharedSmsSubsData;
    bool m_SharedSmsSubsDataIsSet;
    std::shared_ptr<SmsManagementSubscriptionData> m_SharedSmsMngSubsData;
    bool m_SharedSmsMngSubsDataIsSet;
    std::map<utility::string_t, std::shared_ptr<DnnConfiguration>> m_SharedDnnConfigurations;
    bool m_SharedDnnConfigurationsIsSet;
    std::shared_ptr<TraceData> m_SharedTraceData;
    bool m_SharedTraceDataIsSet;
    std::map<utility::string_t, std::shared_ptr<SnssaiInfo>> m_SharedSnssaiInfos;
    bool m_SharedSnssaiInfosIsSet;
    std::map<utility::string_t, std::shared_ptr<VnGroupData>> m_SharedVnGroupDatas;
    bool m_SharedVnGroupDatasIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SharedData_H_ */
