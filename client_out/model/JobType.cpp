/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JobType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



JobType::JobType()
{
}

JobType::~JobType()
{
}

void JobType::validate()
{
    // TODO: implement validation
}

web::json::value JobType::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eJobType::JobType_IMMEDIATE_MDT_ONLY) val = web::json::value::string(U(IMMEDIATE_MDT_ONLY));
    if (m_value == eJobType::JobType_LOGGED_MDT_ONLY) val = web::json::value::string(U(LOGGED_MDT_ONLY));
    if (m_value == eJobType::JobType_TRACE_ONLY) val = web::json::value::string(U(TRACE_ONLY));
    if (m_value == eJobType::JobType_IMMEDIATE_MDT_AND_TRACE) val = web::json::value::string(U(IMMEDIATE_MDT_AND_TRACE));
    if (m_value == eJobType::JobType_RLF_REPORTS_ONLY) val = web::json::value::string(U(RLF_REPORTS_ONLY));
    if (m_value == eJobType::JobType_RCEF_REPORTS_ONLY) val = web::json::value::string(U(RCEF_REPORTS_ONLY));
    if (m_value == eJobType::JobType_LOGGED_MBSFN_MDT) val = web::json::value::string(U(LOGGED_MBSFN_MDT));

    return val;
}

bool JobType::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(IMMEDIATE_MDT_ONLY)) m_value = eJobType::JobType_IMMEDIATE_MDT_ONLY;
    if (s == utility::conversions::to_string_t(LOGGED_MDT_ONLY)) m_value = eJobType::JobType_LOGGED_MDT_ONLY;
    if (s == utility::conversions::to_string_t(TRACE_ONLY)) m_value = eJobType::JobType_TRACE_ONLY;
    if (s == utility::conversions::to_string_t(IMMEDIATE_MDT_AND_TRACE)) m_value = eJobType::JobType_IMMEDIATE_MDT_AND_TRACE;
    if (s == utility::conversions::to_string_t(RLF_REPORTS_ONLY)) m_value = eJobType::JobType_RLF_REPORTS_ONLY;
    if (s == utility::conversions::to_string_t(RCEF_REPORTS_ONLY)) m_value = eJobType::JobType_RCEF_REPORTS_ONLY;
    if (s == utility::conversions::to_string_t(LOGGED_MBSFN_MDT)) m_value = eJobType::JobType_LOGGED_MBSFN_MDT;
    return true;
}

void JobType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eJobType::JobType_IMMEDIATE_MDT_ONLY) s = utility::conversions::to_string_t(IMMEDIATE_MDT_ONLY);
    if (m_value == eJobType::JobType_LOGGED_MDT_ONLY) s = utility::conversions::to_string_t(LOGGED_MDT_ONLY);
    if (m_value == eJobType::JobType_TRACE_ONLY) s = utility::conversions::to_string_t(TRACE_ONLY);
    if (m_value == eJobType::JobType_IMMEDIATE_MDT_AND_TRACE) s = utility::conversions::to_string_t(IMMEDIATE_MDT_AND_TRACE);
    if (m_value == eJobType::JobType_RLF_REPORTS_ONLY) s = utility::conversions::to_string_t(RLF_REPORTS_ONLY);
    if (m_value == eJobType::JobType_RCEF_REPORTS_ONLY) s = utility::conversions::to_string_t(RCEF_REPORTS_ONLY);
    if (m_value == eJobType::JobType_LOGGED_MBSFN_MDT) s = utility::conversions::to_string_t(LOGGED_MBSFN_MDT);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool JobType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eJobType v;

        
        if (s == utility::conversions::to_string_t(IMMEDIATE_MDT_ONLY)) v = eJobType::JobType_IMMEDIATE_MDT_ONLY;
        if (s == utility::conversions::to_string_t(LOGGED_MDT_ONLY)) v = eJobType::JobType_LOGGED_MDT_ONLY;
        if (s == utility::conversions::to_string_t(TRACE_ONLY)) v = eJobType::JobType_TRACE_ONLY;
        if (s == utility::conversions::to_string_t(IMMEDIATE_MDT_AND_TRACE)) v = eJobType::JobType_IMMEDIATE_MDT_AND_TRACE;
        if (s == utility::conversions::to_string_t(RLF_REPORTS_ONLY)) v = eJobType::JobType_RLF_REPORTS_ONLY;
        if (s == utility::conversions::to_string_t(RCEF_REPORTS_ONLY)) v = eJobType::JobType_RCEF_REPORTS_ONLY;
        if (s == utility::conversions::to_string_t(LOGGED_MBSFN_MDT)) v = eJobType::JobType_LOGGED_MBSFN_MDT;

        setValue(v);
    }
    return ok;
}

JobType::eJobType JobType::getValue() const
{
   return m_value;
}

void JobType::setValue(JobType::eJobType const value)
{
   m_value = value;
}


}
}
}
}


