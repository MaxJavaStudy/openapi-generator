/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocationArea.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef LocationArea_H_
#define LocationArea_H_

#include "CSB_JsonParser.h"
#include "CivicAddress.h"
#include "GeographicArea.h"
#include "NetworkAreaInfo.h"
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class LocationArea : public jsonParser::jsonParser<LocationArea> {
public:
  explicit LocationArea() {
    // constructor

    m_GeographicAreasFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_GeographicAreasOutFlag.reset(new unsigned);
    *m_GeographicAreasOutFlag.get() = 0;

    m_CivicAddressesFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CivicAddressesOutFlag.reset(new unsigned);
    *m_CivicAddressesOutFlag.get() = 0;

    m_NwAreaInfoFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_NwAreaInfoOutFlag.reset(new unsigned);
    *m_NwAreaInfoOutFlag.get() = 0;
  };
  virtual ~LocationArea(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : GeographicAreas CivicAddresses
    // NwAreaInfo
    h->add_optional_property("geographicAreas", &this->m_GeographicAreas,
                             m_GeographicAreasFlag, m_GeographicAreasOutFlag);
    h->add_optional_property("civicAddresses", &this->m_CivicAddresses,
                             m_CivicAddressesFlag, m_CivicAddressesOutFlag);
    h->add_optional_property("nwAreaInfo", &this->m_NwAreaInfo,
                             m_NwAreaInfoFlag, m_NwAreaInfoOutFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const LocationArea &obj) {
    o << "GeographicAreas, optional flag is : " << *m_GeographicAreasOutFlag
      << std::endl;
    o << convert2string(std::string("GeographicAreas"), obj.m_GeographicAreas)
      << std::endl;
    o << "CivicAddresses, optional flag is : " << *m_CivicAddressesOutFlag
      << std::endl;
    o << convert2string(std::string("CivicAddresses"), obj.m_CivicAddresses)
      << std::endl;

    o << "NwAreaInfo, optional flag is : " << *m_NwAreaInfoOutFlag
      << ", content is : " << obj.m_NwAreaInfo << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// LocationArea members vars : GeographicAreas CivicAddresses NwAreaInfo

  std::vector<GeographicArea> &getGeographicAreas() {
    return m_GeographicAreas;
  }
  void setGeographicAreas(std::vector<GeographicArea> const &value) {
    m_GeographicAreas = value;
  }

  std::vector<CivicAddress> &getCivicAddresses() { return m_CivicAddresses; }
  void setCivicAddresses(std::vector<CivicAddress> const &value) {
    m_CivicAddresses = value;
  }

  NetworkAreaInfo getNwAreaInfo() const { return m_NwAreaInfo; }
  void setNwAreaInfo(NetworkAreaInfo const &value) { m_NwAreaInfo = value; }

public:
  std::vector<GeographicArea> m_GeographicAreas;

  unsigned m_GeographicAreasFlag;
  shared_ptr<unsigned> m_GeographicAreasOutFlag;
  std::vector<CivicAddress> m_CivicAddresses;

  unsigned m_CivicAddressesFlag;
  shared_ptr<unsigned> m_CivicAddressesOutFlag;
  NetworkAreaInfo m_NwAreaInfo;

  unsigned m_NwAreaInfoFlag;
  shared_ptr<unsigned> m_NwAreaInfoOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LocationArea_H_ */
