/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MeasurementNrForMdt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MeasurementNrForMdt::MeasurementNrForMdt()
{
}

MeasurementNrForMdt::~MeasurementNrForMdt()
{
}

void MeasurementNrForMdt::validate()
{
    // TODO: implement validation
}

web::json::value MeasurementNrForMdt::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M1) val = web::json::value::string(U(M1));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M2) val = web::json::value::string(U(M2));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M3) val = web::json::value::string(U(M3));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M4_DL) val = web::json::value::string(U(M4_DL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M4_UL) val = web::json::value::string(U(M4_UL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M5_DL) val = web::json::value::string(U(M5_DL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M5_UL) val = web::json::value::string(U(M5_UL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M6_DL) val = web::json::value::string(U(M6_DL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M6_UL) val = web::json::value::string(U(M6_UL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M7_DL) val = web::json::value::string(U(M7_DL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M7_UL) val = web::json::value::string(U(M7_UL));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M8) val = web::json::value::string(U(M8));
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M9) val = web::json::value::string(U(M9));

    return val;
}

bool MeasurementNrForMdt::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(M1)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M1;
    if (s == utility::conversions::to_string_t(M2)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M2;
    if (s == utility::conversions::to_string_t(M3)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M3;
    if (s == utility::conversions::to_string_t(M4_DL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M4_DL;
    if (s == utility::conversions::to_string_t(M4_UL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M4_UL;
    if (s == utility::conversions::to_string_t(M5_DL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M5_DL;
    if (s == utility::conversions::to_string_t(M5_UL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M5_UL;
    if (s == utility::conversions::to_string_t(M6_DL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M6_DL;
    if (s == utility::conversions::to_string_t(M6_UL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M6_UL;
    if (s == utility::conversions::to_string_t(M7_DL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M7_DL;
    if (s == utility::conversions::to_string_t(M7_UL)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M7_UL;
    if (s == utility::conversions::to_string_t(M8)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M8;
    if (s == utility::conversions::to_string_t(M9)) m_value = eMeasurementNrForMdt::MeasurementNrForMdt_M9;
    return true;
}

void MeasurementNrForMdt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M1) s = utility::conversions::to_string_t(M1);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M2) s = utility::conversions::to_string_t(M2);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M3) s = utility::conversions::to_string_t(M3);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M4_DL) s = utility::conversions::to_string_t(M4_DL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M4_UL) s = utility::conversions::to_string_t(M4_UL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M5_DL) s = utility::conversions::to_string_t(M5_DL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M5_UL) s = utility::conversions::to_string_t(M5_UL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M6_DL) s = utility::conversions::to_string_t(M6_DL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M6_UL) s = utility::conversions::to_string_t(M6_UL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M7_DL) s = utility::conversions::to_string_t(M7_DL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M7_UL) s = utility::conversions::to_string_t(M7_UL);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M8) s = utility::conversions::to_string_t(M8);
    if (m_value == eMeasurementNrForMdt::MeasurementNrForMdt_M9) s = utility::conversions::to_string_t(M9);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool MeasurementNrForMdt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eMeasurementNrForMdt v;

        
        if (s == utility::conversions::to_string_t(M1)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M1;
        if (s == utility::conversions::to_string_t(M2)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M2;
        if (s == utility::conversions::to_string_t(M3)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M3;
        if (s == utility::conversions::to_string_t(M4_DL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M4_DL;
        if (s == utility::conversions::to_string_t(M4_UL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M4_UL;
        if (s == utility::conversions::to_string_t(M5_DL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M5_DL;
        if (s == utility::conversions::to_string_t(M5_UL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M5_UL;
        if (s == utility::conversions::to_string_t(M6_DL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M6_DL;
        if (s == utility::conversions::to_string_t(M6_UL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M6_UL;
        if (s == utility::conversions::to_string_t(M7_DL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M7_DL;
        if (s == utility::conversions::to_string_t(M7_UL)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M7_UL;
        if (s == utility::conversions::to_string_t(M8)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M8;
        if (s == utility::conversions::to_string_t(M9)) v = eMeasurementNrForMdt::MeasurementNrForMdt_M9;

        setValue(v);
    }
    return ok;
}

MeasurementNrForMdt::eMeasurementNrForMdt MeasurementNrForMdt::getValue() const
{
   return m_value;
}

void MeasurementNrForMdt::setValue(MeasurementNrForMdt::eMeasurementNrForMdt const value)
{
   m_value = value;
}


}
}
}
}


