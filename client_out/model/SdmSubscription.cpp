/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SdmSubscription.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SdmSubscription::SdmSubscription()
{
    m_NfInstanceId = utility::conversions::to_string_t("");
    m_NfInstanceIdIsSet = false;
    m_ImplicitUnsubscribe = false;
    m_ImplicitUnsubscribeIsSet = false;
    m_Expires = utility::datetime();
    m_ExpiresIsSet = false;
    m_CallbackReference = utility::conversions::to_string_t("");
    m_CallbackReferenceIsSet = false;
    m_AmfServiceName = utility::conversions::to_string_t("");
    m_AmfServiceNameIsSet = false;
    m_MonitoredResourceUrisIsSet = false;
    m_SingleNssaiIsSet = false;
    m_Dnn = utility::conversions::to_string_t("");
    m_DnnIsSet = false;
    m_SubscriptionId = utility::conversions::to_string_t("");
    m_SubscriptionIdIsSet = false;
    m_PlmnIdIsSet = false;
    m_ImmediateReport = false;
    m_ImmediateReportIsSet = false;
    m_ReportIsSet = false;
    m_SupportedFeatures = utility::conversions::to_string_t("");
    m_SupportedFeaturesIsSet = false;
    m_ContextInfoIsSet = false;
}

SdmSubscription::~SdmSubscription()
{
}

void SdmSubscription::validate()
{
    // TODO: implement validation
}

web::json::value SdmSubscription::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NfInstanceIdIsSet)
    {
        val[utility::conversions::to_string_t("nfInstanceId")] = ModelBase::toJson(m_NfInstanceId);
    }
    if(m_ImplicitUnsubscribeIsSet)
    {
        val[utility::conversions::to_string_t("implicitUnsubscribe")] = ModelBase::toJson(m_ImplicitUnsubscribe);
    }
    if(m_ExpiresIsSet)
    {
        val[utility::conversions::to_string_t("expires")] = ModelBase::toJson(m_Expires);
    }
    if(m_CallbackReferenceIsSet)
    {
        val[utility::conversions::to_string_t("callbackReference")] = ModelBase::toJson(m_CallbackReference);
    }
    if(m_AmfServiceNameIsSet)
    {
        val[utility::conversions::to_string_t("amfServiceName")] = ModelBase::toJson(m_AmfServiceName);
    }
    if(m_MonitoredResourceUrisIsSet)
    {
        val[utility::conversions::to_string_t("monitoredResourceUris")] = ModelBase::toJson(m_MonitoredResourceUris);
    }
    if(m_SingleNssaiIsSet)
    {
        val[utility::conversions::to_string_t("singleNssai")] = ModelBase::toJson(m_SingleNssai);
    }
    if(m_DnnIsSet)
    {
        val[utility::conversions::to_string_t("dnn")] = ModelBase::toJson(m_Dnn);
    }
    if(m_SubscriptionIdIsSet)
    {
        val[utility::conversions::to_string_t("subscriptionId")] = ModelBase::toJson(m_SubscriptionId);
    }
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t("plmnId")] = ModelBase::toJson(m_PlmnId);
    }
    if(m_ImmediateReportIsSet)
    {
        val[utility::conversions::to_string_t("immediateReport")] = ModelBase::toJson(m_ImmediateReport);
    }
    if(m_ReportIsSet)
    {
        val[utility::conversions::to_string_t("report")] = ModelBase::toJson(m_Report);
    }
    if(m_SupportedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t("supportedFeatures")] = ModelBase::toJson(m_SupportedFeatures);
    }
    if(m_ContextInfoIsSet)
    {
        val[utility::conversions::to_string_t("contextInfo")] = ModelBase::toJson(m_ContextInfo);
    }

    return val;
}

bool SdmSubscription::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("nfInstanceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nfInstanceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nfInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nfInstanceId);
            setNfInstanceId(refVal_nfInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("implicitUnsubscribe")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("implicitUnsubscribe"));
        if(!fieldValue.is_null())
        {
            bool refVal_implicitUnsubscribe;
            ok &= ModelBase::fromJson(fieldValue, refVal_implicitUnsubscribe);
            setImplicitUnsubscribe(refVal_implicitUnsubscribe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expires")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expires"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expires;
            ok &= ModelBase::fromJson(fieldValue, refVal_expires);
            setExpires(refVal_expires);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("callbackReference")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("callbackReference"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_callbackReference;
            ok &= ModelBase::fromJson(fieldValue, refVal_callbackReference);
            setCallbackReference(refVal_callbackReference);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amfServiceName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("amfServiceName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_amfServiceName;
            ok &= ModelBase::fromJson(fieldValue, refVal_amfServiceName);
            setAmfServiceName(refVal_amfServiceName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("monitoredResourceUris")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("monitoredResourceUris"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_monitoredResourceUris;
            ok &= ModelBase::fromJson(fieldValue, refVal_monitoredResourceUris);
            setMonitoredResourceUris(refVal_monitoredResourceUris);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("singleNssai")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("singleNssai"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Snssai> refVal_singleNssai;
            ok &= ModelBase::fromJson(fieldValue, refVal_singleNssai);
            setSingleNssai(refVal_singleNssai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dnn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dnn"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dnn;
            ok &= ModelBase::fromJson(fieldValue, refVal_dnn);
            setDnn(refVal_dnn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscriptionId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscriptionId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subscriptionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscriptionId);
            setSubscriptionId(refVal_subscriptionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plmnId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("plmnId"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_plmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_plmnId);
            setPlmnId(refVal_plmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("immediateReport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("immediateReport"));
        if(!fieldValue.is_null())
        {
            bool refVal_immediateReport;
            ok &= ModelBase::fromJson(fieldValue, refVal_immediateReport);
            setImmediateReport(refVal_immediateReport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("report")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("report"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscriptionDataSets> refVal_report;
            ok &= ModelBase::fromJson(fieldValue, refVal_report);
            setReport(refVal_report);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supportedFeatures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supportedFeatures"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supportedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_supportedFeatures);
            setSupportedFeatures(refVal_supportedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contextInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("contextInfo"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ContextInfo> refVal_contextInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_contextInfo);
            setContextInfo(refVal_contextInfo);
        }
    }
    return ok;
}

void SdmSubscription::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NfInstanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nfInstanceId"), m_NfInstanceId));
    }
    if(m_ImplicitUnsubscribeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("implicitUnsubscribe"), m_ImplicitUnsubscribe));
    }
    if(m_ExpiresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expires"), m_Expires));
    }
    if(m_CallbackReferenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("callbackReference"), m_CallbackReference));
    }
    if(m_AmfServiceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amfServiceName"), m_AmfServiceName));
    }
    if(m_MonitoredResourceUrisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("monitoredResourceUris"), m_MonitoredResourceUris));
    }
    if(m_SingleNssaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("singleNssai"), m_SingleNssai));
    }
    if(m_DnnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dnn"), m_Dnn));
    }
    if(m_SubscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscriptionId"), m_SubscriptionId));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("plmnId"), m_PlmnId));
    }
    if(m_ImmediateReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("immediateReport"), m_ImmediateReport));
    }
    if(m_ReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("report"), m_Report));
    }
    if(m_SupportedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supportedFeatures"), m_SupportedFeatures));
    }
    if(m_ContextInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contextInfo"), m_ContextInfo));
    }
}

bool SdmSubscription::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("nfInstanceId")))
    {
        utility::string_t refVal_nfInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nfInstanceId")), refVal_nfInstanceId );
        setNfInstanceId(refVal_nfInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("implicitUnsubscribe")))
    {
        bool refVal_implicitUnsubscribe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("implicitUnsubscribe")), refVal_implicitUnsubscribe );
        setImplicitUnsubscribe(refVal_implicitUnsubscribe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expires")))
    {
        utility::datetime refVal_expires;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expires")), refVal_expires );
        setExpires(refVal_expires);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("callbackReference")))
    {
        utility::string_t refVal_callbackReference;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("callbackReference")), refVal_callbackReference );
        setCallbackReference(refVal_callbackReference);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amfServiceName")))
    {
        utility::string_t refVal_amfServiceName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("amfServiceName")), refVal_amfServiceName );
        setAmfServiceName(refVal_amfServiceName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("monitoredResourceUris")))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_monitoredResourceUris;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("monitoredResourceUris")), refVal_monitoredResourceUris );
        setMonitoredResourceUris(refVal_monitoredResourceUris);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("singleNssai")))
    {
        std::shared_ptr<Snssai> refVal_singleNssai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("singleNssai")), refVal_singleNssai );
        setSingleNssai(refVal_singleNssai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dnn")))
    {
        utility::string_t refVal_dnn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dnn")), refVal_dnn );
        setDnn(refVal_dnn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscriptionId")))
    {
        utility::string_t refVal_subscriptionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscriptionId")), refVal_subscriptionId );
        setSubscriptionId(refVal_subscriptionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plmnId")))
    {
        std::shared_ptr<PlmnId> refVal_plmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("plmnId")), refVal_plmnId );
        setPlmnId(refVal_plmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("immediateReport")))
    {
        bool refVal_immediateReport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("immediateReport")), refVal_immediateReport );
        setImmediateReport(refVal_immediateReport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("report")))
    {
        std::shared_ptr<SubscriptionDataSets> refVal_report;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("report")), refVal_report );
        setReport(refVal_report);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supportedFeatures")))
    {
        utility::string_t refVal_supportedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supportedFeatures")), refVal_supportedFeatures );
        setSupportedFeatures(refVal_supportedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contextInfo")))
    {
        std::shared_ptr<ContextInfo> refVal_contextInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("contextInfo")), refVal_contextInfo );
        setContextInfo(refVal_contextInfo);
    }
    return ok;
}

utility::string_t SdmSubscription::getNfInstanceId() const
{
    return m_NfInstanceId;
}

void SdmSubscription::setNfInstanceId(const utility::string_t& value)
{
    m_NfInstanceId = value;
    m_NfInstanceIdIsSet = true;
}

bool SdmSubscription::nfInstanceIdIsSet() const
{
    return m_NfInstanceIdIsSet;
}

void SdmSubscription::unsetNfInstanceId()
{
    m_NfInstanceIdIsSet = false;
}
bool SdmSubscription::isImplicitUnsubscribe() const
{
    return m_ImplicitUnsubscribe;
}

void SdmSubscription::setImplicitUnsubscribe(bool value)
{
    m_ImplicitUnsubscribe = value;
    m_ImplicitUnsubscribeIsSet = true;
}

bool SdmSubscription::implicitUnsubscribeIsSet() const
{
    return m_ImplicitUnsubscribeIsSet;
}

void SdmSubscription::unsetImplicitUnsubscribe()
{
    m_ImplicitUnsubscribeIsSet = false;
}
utility::datetime SdmSubscription::getExpires() const
{
    return m_Expires;
}

void SdmSubscription::setExpires(const utility::datetime& value)
{
    m_Expires = value;
    m_ExpiresIsSet = true;
}

bool SdmSubscription::expiresIsSet() const
{
    return m_ExpiresIsSet;
}

void SdmSubscription::unsetExpires()
{
    m_ExpiresIsSet = false;
}
utility::string_t SdmSubscription::getCallbackReference() const
{
    return m_CallbackReference;
}

void SdmSubscription::setCallbackReference(const utility::string_t& value)
{
    m_CallbackReference = value;
    m_CallbackReferenceIsSet = true;
}

bool SdmSubscription::callbackReferenceIsSet() const
{
    return m_CallbackReferenceIsSet;
}

void SdmSubscription::unsetCallbackReference()
{
    m_CallbackReferenceIsSet = false;
}
utility::string_t SdmSubscription::getAmfServiceName() const
{
    return m_AmfServiceName;
}

void SdmSubscription::setAmfServiceName(const utility::string_t& value)
{
    m_AmfServiceName = value;
    m_AmfServiceNameIsSet = true;
}

bool SdmSubscription::amfServiceNameIsSet() const
{
    return m_AmfServiceNameIsSet;
}

void SdmSubscription::unsetAmfServiceName()
{
    m_AmfServiceNameIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& SdmSubscription::getMonitoredResourceUris()
{
    return m_MonitoredResourceUris;
}

void SdmSubscription::setMonitoredResourceUris(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_MonitoredResourceUris = value;
    m_MonitoredResourceUrisIsSet = true;
}

bool SdmSubscription::monitoredResourceUrisIsSet() const
{
    return m_MonitoredResourceUrisIsSet;
}

void SdmSubscription::unsetMonitoredResourceUris()
{
    m_MonitoredResourceUrisIsSet = false;
}
std::shared_ptr<Snssai> SdmSubscription::getSingleNssai() const
{
    return m_SingleNssai;
}

void SdmSubscription::setSingleNssai(const std::shared_ptr<Snssai>& value)
{
    m_SingleNssai = value;
    m_SingleNssaiIsSet = true;
}

bool SdmSubscription::singleNssaiIsSet() const
{
    return m_SingleNssaiIsSet;
}

void SdmSubscription::unsetSingleNssai()
{
    m_SingleNssaiIsSet = false;
}
utility::string_t SdmSubscription::getDnn() const
{
    return m_Dnn;
}

void SdmSubscription::setDnn(const utility::string_t& value)
{
    m_Dnn = value;
    m_DnnIsSet = true;
}

bool SdmSubscription::dnnIsSet() const
{
    return m_DnnIsSet;
}

void SdmSubscription::unsetDnn()
{
    m_DnnIsSet = false;
}
utility::string_t SdmSubscription::getSubscriptionId() const
{
    return m_SubscriptionId;
}

void SdmSubscription::setSubscriptionId(const utility::string_t& value)
{
    m_SubscriptionId = value;
    m_SubscriptionIdIsSet = true;
}

bool SdmSubscription::subscriptionIdIsSet() const
{
    return m_SubscriptionIdIsSet;
}

void SdmSubscription::unsetSubscriptionId()
{
    m_SubscriptionIdIsSet = false;
}
std::shared_ptr<PlmnId> SdmSubscription::getPlmnId() const
{
    return m_PlmnId;
}

void SdmSubscription::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool SdmSubscription::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void SdmSubscription::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
bool SdmSubscription::isImmediateReport() const
{
    return m_ImmediateReport;
}

void SdmSubscription::setImmediateReport(bool value)
{
    m_ImmediateReport = value;
    m_ImmediateReportIsSet = true;
}

bool SdmSubscription::immediateReportIsSet() const
{
    return m_ImmediateReportIsSet;
}

void SdmSubscription::unsetImmediateReport()
{
    m_ImmediateReportIsSet = false;
}
std::shared_ptr<SubscriptionDataSets> SdmSubscription::getReport() const
{
    return m_Report;
}

void SdmSubscription::setReport(const std::shared_ptr<SubscriptionDataSets>& value)
{
    m_Report = value;
    m_ReportIsSet = true;
}

bool SdmSubscription::reportIsSet() const
{
    return m_ReportIsSet;
}

void SdmSubscription::unsetReport()
{
    m_ReportIsSet = false;
}
utility::string_t SdmSubscription::getSupportedFeatures() const
{
    return m_SupportedFeatures;
}

void SdmSubscription::setSupportedFeatures(const utility::string_t& value)
{
    m_SupportedFeatures = value;
    m_SupportedFeaturesIsSet = true;
}

bool SdmSubscription::supportedFeaturesIsSet() const
{
    return m_SupportedFeaturesIsSet;
}

void SdmSubscription::unsetSupportedFeatures()
{
    m_SupportedFeaturesIsSet = false;
}
std::shared_ptr<ContextInfo> SdmSubscription::getContextInfo() const
{
    return m_ContextInfo;
}

void SdmSubscription::setContextInfo(const std::shared_ptr<ContextInfo>& value)
{
    m_ContextInfo = value;
    m_ContextInfoIsSet = true;
}

bool SdmSubscription::contextInfoIsSet() const
{
    return m_ContextInfoIsSet;
}

void SdmSubscription::unsetContextInfo()
{
    m_ContextInfoIsSet = false;
}
}
}
}
}


