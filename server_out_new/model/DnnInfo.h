/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DnnInfo.h
 *
 * 
 */

#ifndef DnnInfo_H_
#define DnnInfo_H_


#include <string>
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  DnnInfo: public jsonParser::jsonParser<DnnInfo>
{
public:
    explicit DnnInfo(){
        // constructor
        m_Dnn = "";
        
            m_DnnFlag = staticjson::Flags::Default;
m_DefaultDnnIndicator = false;
        
            m_DefaultDnnIndicatorFlag = (staticjson::Flags::Optional);
m_LboRoamingAllowed = false;
        
            m_LboRoamingAllowedFlag = (staticjson::Flags::Optional);
m_IwkEpsInd = false;
        
            m_IwkEpsIndFlag = (staticjson::Flags::Optional);
m_DnnBarred = false;
        
            m_DnnBarredFlag = (staticjson::Flags::Optional);
m_InvokeNefInd = false;
        
            m_InvokeNefIndFlag = (staticjson::Flags::Optional);

            m_SmfListFlag = (staticjson::Flags::Optional);
m_SameSmfInd = false;
        
            m_SameSmfIndFlag = (staticjson::Flags::Optional);
    };
    virtual ~DnnInfo(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : Dnn DefaultDnnIndicator LboRoamingAllowed IwkEpsInd DnnBarred InvokeNefInd SmfList SameSmfInd 
        h->add_property("dnn", &this->m_Dnn, m_DnnFlag);
        h->add_property("defaultDnnIndicator", &this->m_DefaultDnnIndicator, m_DefaultDnnIndicatorFlag);
        h->add_property("lboRoamingAllowed", &this->m_LboRoamingAllowed, m_LboRoamingAllowedFlag);
        h->add_property("iwkEpsInd", &this->m_IwkEpsInd, m_IwkEpsIndFlag);
        h->add_property("dnnBarred", &this->m_DnnBarred, m_DnnBarredFlag);
        h->add_property("invokeNefInd", &this->m_InvokeNefInd, m_InvokeNefIndFlag);
        h->add_property("smfList", &this->m_SmfList, m_SmfListFlag);
        h->add_property("sameSmfInd", &this->m_SameSmfInd, m_SameSmfIndFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const DnnInfo& obj)
    {
        
        o << "Dnn : " << obj.m_Dnn << std::endl;

        o << "DefaultDnnIndicator : " << obj.m_DefaultDnnIndicator << std::endl;

        o << "LboRoamingAllowed : " << obj.m_LboRoamingAllowed << std::endl;

        o << "IwkEpsInd : " << obj.m_IwkEpsInd << std::endl;

        o << "DnnBarred : " << obj.m_DnnBarred << std::endl;

        o << "InvokeNefInd : " << obj.m_InvokeNefInd << std::endl;
        o<< convert2string(std::string("SmfList"), obj.m_SmfList) <<std::endl;
       
        o << "SameSmfInd : " << obj.m_SameSmfInd << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// DnnInfo members vars : Dnn DefaultDnnIndicator LboRoamingAllowed IwkEpsInd DnnBarred InvokeNefInd SmfList SameSmfInd 

    std::string  getDnn() const
    {
        return m_Dnn;
    }
    void  setDnn(std::string const& value)
    {
        m_Dnn = value;
    }

bool  isDefaultDnnIndicator() const
    {
        return m_DefaultDnnIndicator;
    }
    void  setDefaultDnnIndicator(bool const value)
    {
        m_DefaultDnnIndicator = value;
    }

bool  isLboRoamingAllowed() const
    {
        return m_LboRoamingAllowed;
    }
    void  setLboRoamingAllowed(bool const value)
    {
        m_LboRoamingAllowed = value;
    }

bool  isIwkEpsInd() const
    {
        return m_IwkEpsInd;
    }
    void  setIwkEpsInd(bool const value)
    {
        m_IwkEpsInd = value;
    }

bool  isDnnBarred() const
    {
        return m_DnnBarred;
    }
    void  setDnnBarred(bool const value)
    {
        m_DnnBarred = value;
    }

bool  isInvokeNefInd() const
    {
        return m_InvokeNefInd;
    }
    void  setInvokeNefInd(bool const value)
    {
        m_InvokeNefInd = value;
    }

std::vector<std::string>&  getSmfList()
    {
        return m_SmfList;
    }
    void  setSmfList(std::vector<std::string> const& value)
    {
        m_SmfList = value;
    }

bool  isSameSmfInd() const
    {
        return m_SameSmfInd;
    }
    void  setSameSmfInd(bool const value)
    {
        m_SameSmfInd = value;
    }



    
public:
    std::string m_Dnn;
    
    unsigned m_DnnFlag;
    bool m_DefaultDnnIndicator;
    
    unsigned m_DefaultDnnIndicatorFlag;
    bool m_LboRoamingAllowed;
    
    unsigned m_LboRoamingAllowedFlag;
    bool m_IwkEpsInd;
    
    unsigned m_IwkEpsIndFlag;
    bool m_DnnBarred;
    
    unsigned m_DnnBarredFlag;
    bool m_InvokeNefInd;
    
    unsigned m_InvokeNefIndFlag;
    std::vector<std::string> m_SmfList;
    
    unsigned m_SmfListFlag;
    bool m_SameSmfInd;
    
    unsigned m_SameSmfIndFlag;
  
};
}
}
}
}

#endif /* DnnInfo_H_ */
