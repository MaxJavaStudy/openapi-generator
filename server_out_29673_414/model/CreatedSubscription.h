/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CreatedSubscription.h
 *
 *
 */

#ifndef CreatedSubscription_H_
#define CreatedSubscription_H_

#include "jsonParser.hpp"
#include <string>
#include <type_traits>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class CreatedSubscription : public jsonParser::jsonParser<CreatedSubscription> {
public:
  explicit CreatedSubscription() {
    // constructor
    m_DicEntryId = 0;

    m_DicEntryIdFlag = staticjson::Flags::Default;
    m_ConfirmedExpires = "";

    m_ConfirmedExpiresFlag = (staticjson::Flags::Optional);
    m_SupportedFeatures = "";

    m_SupportedFeaturesFlag = (staticjson::Flags::Optional);
  };
  virtual ~CreatedSubscription(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : DicEntryId ConfirmedExpires
    // SupportedFeatures
    h->add_property("dicEntryId", &this->m_DicEntryId, m_DicEntryIdFlag);
    h->add_property("confirmedExpires", &this->m_ConfirmedExpires,
                    m_ConfirmedExpiresFlag);
    h->add_property("supportedFeatures", &this->m_SupportedFeatures,
                    m_SupportedFeaturesFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o,
                                  const CreatedSubscription &obj) {

    o << "DicEntryId : " << obj.m_DicEntryId << std::endl;

    o << "ConfirmedExpires : " << obj.m_ConfirmedExpires << std::endl;

    o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// CreatedSubscription members vars : DicEntryId ConfirmedExpires
  /// SupportedFeatures

  int32_t getDicEntryId() const { return m_DicEntryId; }
  void setDicEntryId(int32_t const value) { m_DicEntryId = value; }

  std::string getConfirmedExpires() const { return m_ConfirmedExpires; }
  void setConfirmedExpires(std::string const &value) {
    m_ConfirmedExpires = value;
  }

  std::string getSupportedFeatures() const { return m_SupportedFeatures; }
  void setSupportedFeatures(std::string const &value) {
    m_SupportedFeatures = value;
  }

public:
  int32_t m_DicEntryId;

  unsigned m_DicEntryIdFlag;
  std::string m_ConfirmedExpires;

  unsigned m_ConfirmedExpiresFlag;
  std::string m_SupportedFeatures;

  unsigned m_SupportedFeaturesFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CreatedSubscription_H_ */
