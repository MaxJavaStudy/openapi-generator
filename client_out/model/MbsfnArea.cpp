/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MbsfnArea.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




MbsfnArea::MbsfnArea()
{
    m_MbsfnAreaId = 0;
    m_MbsfnAreaIdIsSet = false;
    m_CarrierFrequency = 0;
    m_CarrierFrequencyIsSet = false;
}

MbsfnArea::~MbsfnArea()
{
}

void MbsfnArea::validate()
{
    // TODO: implement validation
}

web::json::value MbsfnArea::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MbsfnAreaIdIsSet)
    {
        val[utility::conversions::to_string_t("mbsfnAreaId")] = ModelBase::toJson(m_MbsfnAreaId);
    }
    if(m_CarrierFrequencyIsSet)
    {
        val[utility::conversions::to_string_t("carrierFrequency")] = ModelBase::toJson(m_CarrierFrequency);
    }

    return val;
}

bool MbsfnArea::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("mbsfnAreaId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mbsfnAreaId"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_mbsfnAreaId;
            ok &= ModelBase::fromJson(fieldValue, refVal_mbsfnAreaId);
            setMbsfnAreaId(refVal_mbsfnAreaId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("carrierFrequency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("carrierFrequency"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_carrierFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_carrierFrequency);
            setCarrierFrequency(refVal_carrierFrequency);
        }
    }
    return ok;
}

void MbsfnArea::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MbsfnAreaIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mbsfnAreaId"), m_MbsfnAreaId));
    }
    if(m_CarrierFrequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("carrierFrequency"), m_CarrierFrequency));
    }
}

bool MbsfnArea::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mbsfnAreaId")))
    {
        int32_t refVal_mbsfnAreaId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mbsfnAreaId")), refVal_mbsfnAreaId );
        setMbsfnAreaId(refVal_mbsfnAreaId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("carrierFrequency")))
    {
        int32_t refVal_carrierFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("carrierFrequency")), refVal_carrierFrequency );
        setCarrierFrequency(refVal_carrierFrequency);
    }
    return ok;
}

int32_t MbsfnArea::getMbsfnAreaId() const
{
    return m_MbsfnAreaId;
}

void MbsfnArea::setMbsfnAreaId(int32_t value)
{
    m_MbsfnAreaId = value;
    m_MbsfnAreaIdIsSet = true;
}

bool MbsfnArea::mbsfnAreaIdIsSet() const
{
    return m_MbsfnAreaIdIsSet;
}

void MbsfnArea::unsetMbsfnAreaId()
{
    m_MbsfnAreaIdIsSet = false;
}
int32_t MbsfnArea::getCarrierFrequency() const
{
    return m_CarrierFrequency;
}

void MbsfnArea::setCarrierFrequency(int32_t value)
{
    m_CarrierFrequency = value;
    m_CarrierFrequencyIsSet = true;
}

bool MbsfnArea::carrierFrequencyIsSet() const
{
    return m_CarrierFrequencyIsSet;
}

void MbsfnArea::unsetCarrierFrequency()
{
    m_CarrierFrequencyIsSet = false;
}
}
}
}
}


