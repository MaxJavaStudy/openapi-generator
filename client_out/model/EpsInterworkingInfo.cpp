/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EpsInterworkingInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EpsInterworkingInfo::EpsInterworkingInfo()
{
    m_EpsIwkPgwsIsSet = false;
}

EpsInterworkingInfo::~EpsInterworkingInfo()
{
}

void EpsInterworkingInfo::validate()
{
    // TODO: implement validation
}

web::json::value EpsInterworkingInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EpsIwkPgwsIsSet)
    {
        val[utility::conversions::to_string_t("epsIwkPgws")] = ModelBase::toJson(m_EpsIwkPgws);
    }

    return val;
}

bool EpsInterworkingInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("epsIwkPgws")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("epsIwkPgws"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<EpsIwkPgw>> refVal_epsIwkPgws;
            ok &= ModelBase::fromJson(fieldValue, refVal_epsIwkPgws);
            setEpsIwkPgws(refVal_epsIwkPgws);
        }
    }
    return ok;
}

void EpsInterworkingInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EpsIwkPgwsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("epsIwkPgws"), m_EpsIwkPgws));
    }
}

bool EpsInterworkingInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("epsIwkPgws")))
    {
        std::map<utility::string_t, std::shared_ptr<EpsIwkPgw>> refVal_epsIwkPgws;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("epsIwkPgws")), refVal_epsIwkPgws );
        setEpsIwkPgws(refVal_epsIwkPgws);
    }
    return ok;
}

std::map<utility::string_t, std::shared_ptr<EpsIwkPgw>>& EpsInterworkingInfo::getEpsIwkPgws()
{
    return m_EpsIwkPgws;
}

void EpsInterworkingInfo::setEpsIwkPgws(const std::map<utility::string_t, std::shared_ptr<EpsIwkPgw>>& value)
{
    m_EpsIwkPgws = value;
    m_EpsIwkPgwsIsSet = true;
}

bool EpsInterworkingInfo::epsIwkPgwsIsSet() const
{
    return m_EpsIwkPgwsIsSet;
}

void EpsInterworkingInfo::unsetEpsIwkPgws()
{
    m_EpsIwkPgwsIsSet = false;
}
}
}
}
}


