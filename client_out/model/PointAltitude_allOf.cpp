/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 2.1.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PointAltitude_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




PointAltitude_allOf::PointAltitude_allOf()
{
    m_PointIsSet = false;
    m_Altitude = 0.0;
    m_AltitudeIsSet = false;
}

PointAltitude_allOf::~PointAltitude_allOf()
{
}

void PointAltitude_allOf::validate()
{
    // TODO: implement validation
}

web::json::value PointAltitude_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PointIsSet)
    {
        val[utility::conversions::to_string_t("point")] = ModelBase::toJson(m_Point);
    }
    if(m_AltitudeIsSet)
    {
        val[utility::conversions::to_string_t("altitude")] = ModelBase::toJson(m_Altitude);
    }

    return val;
}

bool PointAltitude_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("point")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("point"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GeographicalCoordinates> refVal_point;
            ok &= ModelBase::fromJson(fieldValue, refVal_point);
            setPoint(refVal_point);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("altitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("altitude"));
        if(!fieldValue.is_null())
        {
            double refVal_altitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_altitude);
            setAltitude(refVal_altitude);
        }
    }
    return ok;
}

void PointAltitude_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("point"), m_Point));
    }
    if(m_AltitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("altitude"), m_Altitude));
    }
}

bool PointAltitude_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("point")))
    {
        std::shared_ptr<GeographicalCoordinates> refVal_point;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("point")), refVal_point );
        setPoint(refVal_point);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("altitude")))
    {
        double refVal_altitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("altitude")), refVal_altitude );
        setAltitude(refVal_altitude);
    }
    return ok;
}

std::shared_ptr<GeographicalCoordinates> PointAltitude_allOf::getPoint() const
{
    return m_Point;
}

void PointAltitude_allOf::setPoint(const std::shared_ptr<GeographicalCoordinates>& value)
{
    m_Point = value;
    m_PointIsSet = true;
}

bool PointAltitude_allOf::pointIsSet() const
{
    return m_PointIsSet;
}

void PointAltitude_allOf::unsetPoint()
{
    m_PointIsSet = false;
}
double PointAltitude_allOf::getAltitude() const
{
    return m_Altitude;
}

void PointAltitude_allOf::setAltitude(double value)
{
    m_Altitude = value;
    m_AltitudeIsSet = true;
}

bool PointAltitude_allOf::altitudeIsSet() const
{
    return m_AltitudeIsSet;
}

void PointAltitude_allOf::unsetAltitude()
{
    m_AltitudeIsSet = false;
}
}
}
}
}


