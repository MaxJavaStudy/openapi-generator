/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CivicAddress.h
 *
 * 
 */

#ifndef CivicAddress_H_
#define CivicAddress_H_


#include <string>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  CivicAddress: public jsonParser::jsonParser<CivicAddress>
{
public:
    explicit CivicAddress(){
        // constructor
        m_Country = "";
        
            m_CountryFlag = (staticjson::Flags::Optional);
m_A1 = "";
        
            m_A1Flag = (staticjson::Flags::Optional);
m_A2 = "";
        
            m_A2Flag = (staticjson::Flags::Optional);
m_A3 = "";
        
            m_A3Flag = (staticjson::Flags::Optional);
m_A4 = "";
        
            m_A4Flag = (staticjson::Flags::Optional);
m_A5 = "";
        
            m_A5Flag = (staticjson::Flags::Optional);
m_A6 = "";
        
            m_A6Flag = (staticjson::Flags::Optional);
m_PRD = "";
        
            m_PRDFlag = (staticjson::Flags::Optional);
m_POD = "";
        
            m_PODFlag = (staticjson::Flags::Optional);
m_STS = "";
        
            m_STSFlag = (staticjson::Flags::Optional);
m_HNO = "";
        
            m_HNOFlag = (staticjson::Flags::Optional);
m_HNS = "";
        
            m_HNSFlag = (staticjson::Flags::Optional);
m_LMK = "";
        
            m_LMKFlag = (staticjson::Flags::Optional);
m_LOC = "";
        
            m_LOCFlag = (staticjson::Flags::Optional);
m_NAM = "";
        
            m_NAMFlag = (staticjson::Flags::Optional);
m_PC = "";
        
            m_PCFlag = (staticjson::Flags::Optional);
m_BLD = "";
        
            m_BLDFlag = (staticjson::Flags::Optional);
m_UNIT = "";
        
            m_UNITFlag = (staticjson::Flags::Optional);
m_FLR = "";
        
            m_FLRFlag = (staticjson::Flags::Optional);
m_ROOM = "";
        
            m_ROOMFlag = (staticjson::Flags::Optional);
m_PLC = "";
        
            m_PLCFlag = (staticjson::Flags::Optional);
m_PCN = "";
        
            m_PCNFlag = (staticjson::Flags::Optional);
m_POBOX = "";
        
            m_POBOXFlag = (staticjson::Flags::Optional);
m_ADDCODE = "";
        
            m_ADDCODEFlag = (staticjson::Flags::Optional);
m_SEAT = "";
        
            m_SEATFlag = (staticjson::Flags::Optional);
m_RD = "";
        
            m_RDFlag = (staticjson::Flags::Optional);
m_RDSEC = "";
        
            m_RDSECFlag = (staticjson::Flags::Optional);
m_RDBR = "";
        
            m_RDBRFlag = (staticjson::Flags::Optional);
m_RDSUBBR = "";
        
            m_RDSUBBRFlag = (staticjson::Flags::Optional);
m_PRM = "";
        
            m_PRMFlag = (staticjson::Flags::Optional);
m_POM = "";
        
            m_POMFlag = (staticjson::Flags::Optional);
    };
    virtual ~CivicAddress(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : Country A1 A2 A3 A4 A5 A6 PRD POD STS HNO HNS LMK LOC NAM PC BLD UNIT FLR ROOM PLC PCN POBOX ADDCODE SEAT RD RDSEC RDBR RDSUBBR PRM POM 
        h->add_property("country", &this->m_Country, m_CountryFlag);
        h->add_property("a1", &this->m_A1, m_A1Flag);
        h->add_property("a2", &this->m_A2, m_A2Flag);
        h->add_property("a3", &this->m_A3, m_A3Flag);
        h->add_property("a4", &this->m_A4, m_A4Flag);
        h->add_property("a5", &this->m_A5, m_A5Flag);
        h->add_property("a6", &this->m_A6, m_A6Flag);
        h->add_property("pRD", &this->m_PRD, m_PRDFlag);
        h->add_property("pOD", &this->m_POD, m_PODFlag);
        h->add_property("sTS", &this->m_STS, m_STSFlag);
        h->add_property("hNO", &this->m_HNO, m_HNOFlag);
        h->add_property("hNS", &this->m_HNS, m_HNSFlag);
        h->add_property("lMK", &this->m_LMK, m_LMKFlag);
        h->add_property("lOC", &this->m_LOC, m_LOCFlag);
        h->add_property("nAM", &this->m_NAM, m_NAMFlag);
        h->add_property("pC", &this->m_PC, m_PCFlag);
        h->add_property("bLD", &this->m_BLD, m_BLDFlag);
        h->add_property("uNIT", &this->m_UNIT, m_UNITFlag);
        h->add_property("fLR", &this->m_FLR, m_FLRFlag);
        h->add_property("rOOM", &this->m_ROOM, m_ROOMFlag);
        h->add_property("pLC", &this->m_PLC, m_PLCFlag);
        h->add_property("pCN", &this->m_PCN, m_PCNFlag);
        h->add_property("pOBOX", &this->m_POBOX, m_POBOXFlag);
        h->add_property("aDDCODE", &this->m_ADDCODE, m_ADDCODEFlag);
        h->add_property("sEAT", &this->m_SEAT, m_SEATFlag);
        h->add_property("rD", &this->m_RD, m_RDFlag);
        h->add_property("rDSEC", &this->m_RDSEC, m_RDSECFlag);
        h->add_property("rDBR", &this->m_RDBR, m_RDBRFlag);
        h->add_property("rDSUBBR", &this->m_RDSUBBR, m_RDSUBBRFlag);
        h->add_property("pRM", &this->m_PRM, m_PRMFlag);
        h->add_property("pOM", &this->m_POM, m_POMFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const CivicAddress& obj)
    {
        
        o << "Country : " << obj.m_Country << std::endl;

        o << "A1 : " << obj.m_A1 << std::endl;

        o << "A2 : " << obj.m_A2 << std::endl;

        o << "A3 : " << obj.m_A3 << std::endl;

        o << "A4 : " << obj.m_A4 << std::endl;

        o << "A5 : " << obj.m_A5 << std::endl;

        o << "A6 : " << obj.m_A6 << std::endl;

        o << "PRD : " << obj.m_PRD << std::endl;

        o << "POD : " << obj.m_POD << std::endl;

        o << "STS : " << obj.m_STS << std::endl;

        o << "HNO : " << obj.m_HNO << std::endl;

        o << "HNS : " << obj.m_HNS << std::endl;

        o << "LMK : " << obj.m_LMK << std::endl;

        o << "LOC : " << obj.m_LOC << std::endl;

        o << "NAM : " << obj.m_NAM << std::endl;

        o << "PC : " << obj.m_PC << std::endl;

        o << "BLD : " << obj.m_BLD << std::endl;

        o << "UNIT : " << obj.m_UNIT << std::endl;

        o << "FLR : " << obj.m_FLR << std::endl;

        o << "ROOM : " << obj.m_ROOM << std::endl;

        o << "PLC : " << obj.m_PLC << std::endl;

        o << "PCN : " << obj.m_PCN << std::endl;

        o << "POBOX : " << obj.m_POBOX << std::endl;

        o << "ADDCODE : " << obj.m_ADDCODE << std::endl;

        o << "SEAT : " << obj.m_SEAT << std::endl;

        o << "RD : " << obj.m_RD << std::endl;

        o << "RDSEC : " << obj.m_RDSEC << std::endl;

        o << "RDBR : " << obj.m_RDBR << std::endl;

        o << "RDSUBBR : " << obj.m_RDSUBBR << std::endl;

        o << "PRM : " << obj.m_PRM << std::endl;

        o << "POM : " << obj.m_POM << std::endl;

     
        return o;
    }

    /////////////////////////////////////////////
    /// CivicAddress members vars : Country A1 A2 A3 A4 A5 A6 PRD POD STS HNO HNS LMK LOC NAM PC BLD UNIT FLR ROOM PLC PCN POBOX ADDCODE SEAT RD RDSEC RDBR RDSUBBR PRM POM 

    std::string  getCountry() const
    {
        return m_Country;
    }
    void  setCountry(std::string const& value)
    {
        m_Country = value;
    }

std::string  getA1() const
    {
        return m_A1;
    }
    void  setA1(std::string const& value)
    {
        m_A1 = value;
    }

std::string  getA2() const
    {
        return m_A2;
    }
    void  setA2(std::string const& value)
    {
        m_A2 = value;
    }

std::string  getA3() const
    {
        return m_A3;
    }
    void  setA3(std::string const& value)
    {
        m_A3 = value;
    }

std::string  getA4() const
    {
        return m_A4;
    }
    void  setA4(std::string const& value)
    {
        m_A4 = value;
    }

std::string  getA5() const
    {
        return m_A5;
    }
    void  setA5(std::string const& value)
    {
        m_A5 = value;
    }

std::string  getA6() const
    {
        return m_A6;
    }
    void  setA6(std::string const& value)
    {
        m_A6 = value;
    }

std::string  getPRD() const
    {
        return m_PRD;
    }
    void  setPRD(std::string const& value)
    {
        m_PRD = value;
    }

std::string  getPOD() const
    {
        return m_POD;
    }
    void  setPOD(std::string const& value)
    {
        m_POD = value;
    }

std::string  getSTS() const
    {
        return m_STS;
    }
    void  setSTS(std::string const& value)
    {
        m_STS = value;
    }

std::string  getHNO() const
    {
        return m_HNO;
    }
    void  setHNO(std::string const& value)
    {
        m_HNO = value;
    }

std::string  getHNS() const
    {
        return m_HNS;
    }
    void  setHNS(std::string const& value)
    {
        m_HNS = value;
    }

std::string  getLMK() const
    {
        return m_LMK;
    }
    void  setLMK(std::string const& value)
    {
        m_LMK = value;
    }

std::string  getLOC() const
    {
        return m_LOC;
    }
    void  setLOC(std::string const& value)
    {
        m_LOC = value;
    }

std::string  getNAM() const
    {
        return m_NAM;
    }
    void  setNAM(std::string const& value)
    {
        m_NAM = value;
    }

std::string  getPC() const
    {
        return m_PC;
    }
    void  setPC(std::string const& value)
    {
        m_PC = value;
    }

std::string  getBLD() const
    {
        return m_BLD;
    }
    void  setBLD(std::string const& value)
    {
        m_BLD = value;
    }

std::string  getUNIT() const
    {
        return m_UNIT;
    }
    void  setUNIT(std::string const& value)
    {
        m_UNIT = value;
    }

std::string  getFLR() const
    {
        return m_FLR;
    }
    void  setFLR(std::string const& value)
    {
        m_FLR = value;
    }

std::string  getROOM() const
    {
        return m_ROOM;
    }
    void  setROOM(std::string const& value)
    {
        m_ROOM = value;
    }

std::string  getPLC() const
    {
        return m_PLC;
    }
    void  setPLC(std::string const& value)
    {
        m_PLC = value;
    }

std::string  getPCN() const
    {
        return m_PCN;
    }
    void  setPCN(std::string const& value)
    {
        m_PCN = value;
    }

std::string  getPOBOX() const
    {
        return m_POBOX;
    }
    void  setPOBOX(std::string const& value)
    {
        m_POBOX = value;
    }

std::string  getADDCODE() const
    {
        return m_ADDCODE;
    }
    void  setADDCODE(std::string const& value)
    {
        m_ADDCODE = value;
    }

std::string  getSEAT() const
    {
        return m_SEAT;
    }
    void  setSEAT(std::string const& value)
    {
        m_SEAT = value;
    }

std::string  getRD() const
    {
        return m_RD;
    }
    void  setRD(std::string const& value)
    {
        m_RD = value;
    }

std::string  getRDSEC() const
    {
        return m_RDSEC;
    }
    void  setRDSEC(std::string const& value)
    {
        m_RDSEC = value;
    }

std::string  getRDBR() const
    {
        return m_RDBR;
    }
    void  setRDBR(std::string const& value)
    {
        m_RDBR = value;
    }

std::string  getRDSUBBR() const
    {
        return m_RDSUBBR;
    }
    void  setRDSUBBR(std::string const& value)
    {
        m_RDSUBBR = value;
    }

std::string  getPRM() const
    {
        return m_PRM;
    }
    void  setPRM(std::string const& value)
    {
        m_PRM = value;
    }

std::string  getPOM() const
    {
        return m_POM;
    }
    void  setPOM(std::string const& value)
    {
        m_POM = value;
    }



    
public:
    std::string m_Country;
    
    unsigned m_CountryFlag;
    std::string m_A1;
    
    unsigned m_A1Flag;
    std::string m_A2;
    
    unsigned m_A2Flag;
    std::string m_A3;
    
    unsigned m_A3Flag;
    std::string m_A4;
    
    unsigned m_A4Flag;
    std::string m_A5;
    
    unsigned m_A5Flag;
    std::string m_A6;
    
    unsigned m_A6Flag;
    std::string m_PRD;
    
    unsigned m_PRDFlag;
    std::string m_POD;
    
    unsigned m_PODFlag;
    std::string m_STS;
    
    unsigned m_STSFlag;
    std::string m_HNO;
    
    unsigned m_HNOFlag;
    std::string m_HNS;
    
    unsigned m_HNSFlag;
    std::string m_LMK;
    
    unsigned m_LMKFlag;
    std::string m_LOC;
    
    unsigned m_LOCFlag;
    std::string m_NAM;
    
    unsigned m_NAMFlag;
    std::string m_PC;
    
    unsigned m_PCFlag;
    std::string m_BLD;
    
    unsigned m_BLDFlag;
    std::string m_UNIT;
    
    unsigned m_UNITFlag;
    std::string m_FLR;
    
    unsigned m_FLRFlag;
    std::string m_ROOM;
    
    unsigned m_ROOMFlag;
    std::string m_PLC;
    
    unsigned m_PLCFlag;
    std::string m_PCN;
    
    unsigned m_PCNFlag;
    std::string m_POBOX;
    
    unsigned m_POBOXFlag;
    std::string m_ADDCODE;
    
    unsigned m_ADDCODEFlag;
    std::string m_SEAT;
    
    unsigned m_SEATFlag;
    std::string m_RD;
    
    unsigned m_RDFlag;
    std::string m_RDSEC;
    
    unsigned m_RDSECFlag;
    std::string m_RDBR;
    
    unsigned m_RDBRFlag;
    std::string m_RDSUBBR;
    
    unsigned m_RDSUBBRFlag;
    std::string m_PRM;
    
    unsigned m_PRMFlag;
    std::string m_POM;
    
    unsigned m_POMFlag;
  
};
}
}
}
}

#endif /* CivicAddress_H_ */
