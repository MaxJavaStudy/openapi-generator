/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PduSessionTypes.h
 *
 * 
 */

#ifndef PduSessionTypes_H_
#define PduSessionTypes_H_


#include "PduSessionType.h"
#include <vector>
#include "jsonParser/jsonParser.hpp"
#include <type_traits>
	
namespace org {
namespace openapitools {
namespace server {
namespace model {


    

/// <summary>
/// 
/// </summary>
class  PduSessionTypes: public jsonParser::jsonParser<PduSessionTypes>
{
public:
    explicit PduSessionTypes(){
        // constructor
        
            m_DefaultSessionTypeFlag = staticjson::Flags::Default;

            m_AllowedSessionTypesFlag = (staticjson::Flags::Optional);
    };
    virtual ~PduSessionTypes(){};

  

    void staticjson_init(staticjson::ObjectHandler *h)
    {

        // static json settings members vars : DefaultSessionType AllowedSessionTypes 
        h->add_property("defaultSessionType", &this->m_DefaultSessionType, m_DefaultSessionTypeFlag);
        h->add_property("allowedSessionTypes", &this->m_AllowedSessionTypes, m_AllowedSessionTypesFlag);



        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
    }
    template<typename T>
    static std::string convert2string(std::string name ,const std::vector<T>& obj){
         std::stringstream o;
         o << "name : ";
            for(auto it : obj)
            {
                o<< it;
            }
            o<<std::endl;

            return o.str();

    }

    template<typename T, typename T1>
    static std::string convert2string(std::string name ,const std::map<T,T1>& obj){
        std::stringstream out;
            out<<"name : ";
            for(auto it : obj)
            {
                out<< it.first<<":"<<it.second<<" ";
            }
            out<<std::endl;
            return out.str();

    }

    friend std::ostream& operator<<(std::ostream& o, const PduSessionTypes& obj)
    {
        
        o << "DefaultSessionType : " << obj.m_DefaultSessionType << std::endl;
        o<< convert2string(std::string("AllowedSessionTypes"), obj.m_AllowedSessionTypes) <<std::endl;
       
     
        return o;
    }

    /////////////////////////////////////////////
    /// PduSessionTypes members vars : DefaultSessionType AllowedSessionTypes 

    PduSessionType  getDefaultSessionType() const
    {
        return m_DefaultSessionType;
    }
    void  setDefaultSessionType(PduSessionType const& value)
    {
        m_DefaultSessionType = value;
    }

std::vector<PduSessionType>&  getAllowedSessionTypes()
    {
        return m_AllowedSessionTypes;
    }
    void  setAllowedSessionTypes(std::vector<PduSessionType> const& value)
    {
        m_AllowedSessionTypes = value;
    }



    
public:
    PduSessionType m_DefaultSessionType;
    
    unsigned m_DefaultSessionTypeFlag;
    std::vector<PduSessionType> m_AllowedSessionTypes;
    
    unsigned m_AllowedSessionTypesFlag;
  
};
}
}
}
}

#endif /* PduSessionTypes_H_ */
