/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AccessAndMobilitySubscriptionData.h
 *
 * 
 */

#ifndef AccessAndMobilitySubscriptionData_H_
#define AccessAndMobilitySubscriptionData_H_

#include "SorInfo.h"
#include "CoreNetworkType.h"
#include "ExpectedUeBehaviourData.h"
#include "UpuInfo.h"
#include "Area.h"
#include "OdbPacketServices.h"
#include "WirelineServiceAreaRestriction.h"
#include "CagData.h"
#include "PtwParameters.h"
#include "RatType.h"
#include <string>
#include "SorUpdateIndicator.h"
#include "TraceData.h"
#include <vector>
#include "MdtUserConsent.h"
#include "EdrxParameters.h"
#include "Nssai.h"
#include "EcRestrictionDataWb.h"
#include "AmbrRm.h"
#include "MdtConfiguration.h"
#include "ServiceAreaRestriction.h"
#include <map>
#include "WirelineArea.h"
#include "jsonParser/jsonParser.hpp"
#include <type_traits>

namespace org
{
    namespace openapitools
    {
        namespace server
        {
            namespace model
            {

                /// <summary>
                ///
                /// </summary>
                class AccessAndMobilitySubscriptionData : public jsonParser::jsonParser<AccessAndMobilitySubscriptionData>
                {
                public:
                    explicit AccessAndMobilitySubscriptionData()
                    {
                        // constructor
                        m_SupportedFeatures = "";

                        m_SupportedFeaturesFlag = (staticjson::Flags::Optional);

                        m_GpsisFlag = (staticjson::Flags::Optional);

                        m_InternalGroupIdsFlag = (staticjson::Flags::Optional);

                        m_SharedVnGroupDataIdsFlag = (staticjson::Flags::Optional);

                        m_SubscribedUeAmbrFlag = (staticjson::Flags::Optional);

                        m_NssaiFlag = (staticjson::Flags::Optional);

                        m_RatRestrictionsFlag = (staticjson::Flags::Optional);

                        m_ForbiddenAreasFlag = (staticjson::Flags::Optional);

                        m_ServiceAreaRestrictionFlag = (staticjson::Flags::Optional);

                        m_CoreNetworkTypeRestrictionsFlag = (staticjson::Flags::Optional);
                        m_RfspIndex = 0;

                        m_RfspIndexFlag = (staticjson::Flags::Optional);
                        m_SubsRegTimer = 0;

                        m_SubsRegTimerFlag = (staticjson::Flags::Optional);
                        m_UeUsageType = 0;

                        m_UeUsageTypeFlag = (staticjson::Flags::Optional);
                        m_MpsPriority = false;

                        m_MpsPriorityFlag = (staticjson::Flags::Optional);
                        m_McsPriority = false;

                        m_McsPriorityFlag = (staticjson::Flags::Optional);
                        m_ActiveTime = 0;

                        m_ActiveTimeFlag = (staticjson::Flags::Optional);

                        m_SorInfoFlag = (staticjson::Flags::Optional);
                        m_SorInfoExpectInd = false;

                        m_SorInfoExpectIndFlag = (staticjson::Flags::Optional);
                        m_SorafRetrieval = false;

                        m_SorafRetrievalFlag = (staticjson::Flags::Optional);

                        m_SorUpdateIndicatorListFlag = (staticjson::Flags::Optional);

                        m_UpuInfoFlag = (staticjson::Flags::Optional);
                        m_MicoAllowed = false;

                        m_MicoAllowedFlag = (staticjson::Flags::Optional);

                        m_SharedAmDataIdsFlag = (staticjson::Flags::Optional);

                        m_OdbPacketServicesFlag = (staticjson::Flags::Optional);

                        m_SubscribedDnnListFlag = (staticjson::Flags::Optional);
                        m_ServiceGapTime = 0;

                        m_ServiceGapTimeFlag = (staticjson::Flags::Optional);

                        m_MdtUserConsentFlag = (staticjson::Flags::Optional);

                        m_MdtConfigurationFlag = (staticjson::Flags::Optional);

                        m_TraceDataFlag = (staticjson::Flags::Optional);

                        m_CagDataFlag = (staticjson::Flags::Optional);
                        m_StnSr = "";

                        m_StnSrFlag = (staticjson::Flags::Optional);
                        m_CMsisdn = "";

                        m_CMsisdnFlag = (staticjson::Flags::Optional);
                        m_NbIoTUePriority = 0;

                        m_NbIoTUePriorityFlag = (staticjson::Flags::Optional);
                        m_NssaiInclusionAllowed = false;

                        m_NssaiInclusionAllowedFlag = (staticjson::Flags::Optional);

                        m_RgWirelineCharacteristicsFlag = (staticjson::Flags::Optional);

                        m_EcRestrictionDataWbFlag = (staticjson::Flags::Optional);
                        m_EcRestrictionDataNb = false;

                        m_EcRestrictionDataNbFlag = (staticjson::Flags::Optional);

                        m_ExpectedUeBehaviourListFlag = (staticjson::Flags::Optional);

                        m_PrimaryRatRestrictionsFlag = (staticjson::Flags::Optional);

                        m_SecondaryRatRestrictionsFlag = (staticjson::Flags::Optional);

                        m_EdrxParametersListFlag = (staticjson::Flags::Optional);

                        m_PtwParametersListFlag = (staticjson::Flags::Optional);
                        m_IabOperationAllowed = false;

                        m_IabOperationAllowedFlag = (staticjson::Flags::Optional);

                        m_WirelineForbiddenAreasFlag = (staticjson::Flags::Optional);

                        m_WirelineServiceAreaRestrictionFlag = (staticjson::Flags::Optional);
                    };
                    virtual ~AccessAndMobilitySubscriptionData(){};

                    void staticjson_init(staticjson::ObjectHandler *h)
                    {

                        // static json settings members vars : SupportedFeatures Gpsis InternalGroupIds SharedVnGroupDataIds SubscribedUeAmbr Nssai RatRestrictions ForbiddenAreas ServiceAreaRestriction CoreNetworkTypeRestrictions RfspIndex SubsRegTimer UeUsageType MpsPriority McsPriority ActiveTime SorInfo SorInfoExpectInd SorafRetrieval SorUpdateIndicatorList UpuInfo MicoAllowed SharedAmDataIds OdbPacketServices SubscribedDnnList ServiceGapTime MdtUserConsent MdtConfiguration TraceData CagData StnSr CMsisdn NbIoTUePriority NssaiInclusionAllowed RgWirelineCharacteristics EcRestrictionDataWb EcRestrictionDataNb ExpectedUeBehaviourList PrimaryRatRestrictions SecondaryRatRestrictions EdrxParametersList PtwParametersList IabOperationAllowed WirelineForbiddenAreas WirelineServiceAreaRestriction
                        h->add_property("supportedFeatures", &this->m_SupportedFeatures, m_SupportedFeaturesFlag);
                        h->add_property("gpsis", &this->m_Gpsis, m_GpsisFlag);
                        h->add_property("internalGroupIds", &this->m_InternalGroupIds, m_InternalGroupIdsFlag);
                        h->add_property("sharedVnGroupDataIds", &this->m_SharedVnGroupDataIds, m_SharedVnGroupDataIdsFlag);
                        h->add_property("subscribedUeAmbr", &this->m_SubscribedUeAmbr, m_SubscribedUeAmbrFlag);
                        h->add_property("nssai", &this->m_Nssai, m_NssaiFlag);
                        h->add_property("ratRestrictions", &this->m_RatRestrictions, m_RatRestrictionsFlag);
                        h->add_property("forbiddenAreas", &this->m_ForbiddenAreas, m_ForbiddenAreasFlag);
                        h->add_property("serviceAreaRestriction", &this->m_ServiceAreaRestriction, m_ServiceAreaRestrictionFlag);
                        h->add_property("coreNetworkTypeRestrictions", &this->m_CoreNetworkTypeRestrictions, m_CoreNetworkTypeRestrictionsFlag);
                        h->add_property("rfspIndex", &this->m_RfspIndex, m_RfspIndexFlag);
                        h->add_property("subsRegTimer", &this->m_SubsRegTimer, m_SubsRegTimerFlag);
                        h->add_property("ueUsageType", &this->m_UeUsageType, m_UeUsageTypeFlag);
                        h->add_property("mpsPriority", &this->m_MpsPriority, m_MpsPriorityFlag);
                        h->add_property("mcsPriority", &this->m_McsPriority, m_McsPriorityFlag);
                        h->add_property("activeTime", &this->m_ActiveTime, m_ActiveTimeFlag);
                        h->add_property("sorInfo", &this->m_SorInfo, m_SorInfoFlag);
                        h->add_property("sorInfoExpectInd", &this->m_SorInfoExpectInd, m_SorInfoExpectIndFlag);
                        h->add_property("sorafRetrieval", &this->m_SorafRetrieval, m_SorafRetrievalFlag);
                        h->add_property("sorUpdateIndicatorList", &this->m_SorUpdateIndicatorList, m_SorUpdateIndicatorListFlag);
                        h->add_property("upuInfo", &this->m_UpuInfo, m_UpuInfoFlag);
                        h->add_property("micoAllowed", &this->m_MicoAllowed, m_MicoAllowedFlag);
                        h->add_property("sharedAmDataIds", &this->m_SharedAmDataIds, m_SharedAmDataIdsFlag);
                        h->add_property("odbPacketServices", &this->m_OdbPacketServices, m_OdbPacketServicesFlag);
                        h->add_property("subscribedDnnList", &this->m_SubscribedDnnList, m_SubscribedDnnListFlag);
                        h->add_property("serviceGapTime", &this->m_ServiceGapTime, m_ServiceGapTimeFlag);
                        h->add_property("mdtUserConsent", &this->m_MdtUserConsent, m_MdtUserConsentFlag);
                        h->add_property("mdtConfiguration", &this->m_MdtConfiguration, m_MdtConfigurationFlag);
                        h->add_property("traceData", &this->m_TraceData, m_TraceDataFlag);
                        h->add_property("cagData", &this->m_CagData, m_CagDataFlag);
                        h->add_property("stnSr", &this->m_StnSr, m_StnSrFlag);
                        h->add_property("cMsisdn", &this->m_CMsisdn, m_CMsisdnFlag);
                        h->add_property("nbIoTUePriority", &this->m_NbIoTUePriority, m_NbIoTUePriorityFlag);
                        h->add_property("nssaiInclusionAllowed", &this->m_NssaiInclusionAllowed, m_NssaiInclusionAllowedFlag);
                        h->add_property("rgWirelineCharacteristics", &this->m_RgWirelineCharacteristics, m_RgWirelineCharacteristicsFlag);
                        h->add_property("ecRestrictionDataWb", &this->m_EcRestrictionDataWb, m_EcRestrictionDataWbFlag);
                        h->add_property("ecRestrictionDataNb", &this->m_EcRestrictionDataNb, m_EcRestrictionDataNbFlag);
                        h->add_property("expectedUeBehaviourList", &this->m_ExpectedUeBehaviourList, m_ExpectedUeBehaviourListFlag);
                        h->add_property("primaryRatRestrictions", &this->m_PrimaryRatRestrictions, m_PrimaryRatRestrictionsFlag);
                        h->add_property("secondaryRatRestrictions", &this->m_SecondaryRatRestrictions, m_SecondaryRatRestrictionsFlag);
                        h->add_property("edrxParametersList", &this->m_EdrxParametersList, m_EdrxParametersListFlag);
                        h->add_property("ptwParametersList", &this->m_PtwParametersList, m_PtwParametersListFlag);
                        h->add_property("iabOperationAllowed", &this->m_IabOperationAllowed, m_IabOperationAllowedFlag);
                        h->add_property("wirelineForbiddenAreas", &this->m_WirelineForbiddenAreas, m_WirelineForbiddenAreasFlag);
                        h->add_property("wirelineServiceAreaRestriction", &this->m_WirelineServiceAreaRestriction, m_WirelineServiceAreaRestrictionFlag);

                        h->set_flags(staticjson::Flags::Default | staticjson::Flags::DisallowUnknownKey);
                    }
                    template <typename T>
                    static std::string convert2string(std::string name, const std::vector<T> &obj)
                    {
                        std::stringstream o;
                        o << "name : ";
                        for (auto it : obj)
                        {
                            o << it;
                        }
                        o << std::endl;

                        return o.str();
                    }

                    template <typename T, typename T1>
                    static std::string convert2string(std::string name, const std::map<T, T1> &obj)
                    {
                        std::stringstream out;
                        out << "name : ";
                        for (auto it : obj)
                        {
                            out << it.first << ":" << it.second << " ";
                        }
                        out << std::endl;
                        return out.str();
                    }

                    friend std::ostream &operator<<(std::ostream &o, const AccessAndMobilitySubscriptionData &obj)
                    {

                        o << "SupportedFeatures : " << obj.m_SupportedFeatures << std::endl;
                        o << convert2string(std::string("Gpsis"), obj.m_Gpsis) << std::endl;
                        o << convert2string(std::string("InternalGroupIds"), obj.m_InternalGroupIds) << std::endl;
                        o << convert2string(std::string("SharedVnGroupDataIds"), obj.m_SharedVnGroupDataIds) << std::endl;

                        o << "SubscribedUeAmbr : " << obj.m_SubscribedUeAmbr << std::endl;

                        o << "Nssai : " << obj.m_Nssai << std::endl;
                        o << convert2string(std::string("RatRestrictions"), obj.m_RatRestrictions) << std::endl;
                        o << convert2string(std::string("ForbiddenAreas"), obj.m_ForbiddenAreas) << std::endl;

                        o << "ServiceAreaRestriction : " << obj.m_ServiceAreaRestriction << std::endl;
                        o << convert2string(std::string("CoreNetworkTypeRestrictions"), obj.m_CoreNetworkTypeRestrictions) << std::endl;

                        o << "RfspIndex : " << obj.m_RfspIndex << std::endl;

                        o << "SubsRegTimer : " << obj.m_SubsRegTimer << std::endl;

                        o << "UeUsageType : " << obj.m_UeUsageType << std::endl;

                        o << "MpsPriority : " << obj.m_MpsPriority << std::endl;

                        o << "McsPriority : " << obj.m_McsPriority << std::endl;

                        o << "ActiveTime : " << obj.m_ActiveTime << std::endl;

                        o << "SorInfo : " << obj.m_SorInfo << std::endl;

                        o << "SorInfoExpectInd : " << obj.m_SorInfoExpectInd << std::endl;

                        o << "SorafRetrieval : " << obj.m_SorafRetrieval << std::endl;
                        o << convert2string(std::string("SorUpdateIndicatorList"), obj.m_SorUpdateIndicatorList) << std::endl;

                        o << "UpuInfo : " << obj.m_UpuInfo << std::endl;

                        o << "MicoAllowed : " << obj.m_MicoAllowed << std::endl;
                        o << convert2string(std::string("SharedAmDataIds"), obj.m_SharedAmDataIds) << std::endl;

                        o << "OdbPacketServices : " << obj.m_OdbPacketServices << std::endl;
                        o << convert2string(std::string("SubscribedDnnList"), obj.m_SubscribedDnnList) << std::endl;

                        o << "ServiceGapTime : " << obj.m_ServiceGapTime << std::endl;

                        o << "MdtUserConsent : " << obj.m_MdtUserConsent << std::endl;

                        o << "MdtConfiguration : " << obj.m_MdtConfiguration << std::endl;

                        o << "TraceData : " << obj.m_TraceData << std::endl;

                        o << "CagData : " << obj.m_CagData << std::endl;

                        o << "StnSr : " << obj.m_StnSr << std::endl;

                        o << "CMsisdn : " << obj.m_CMsisdn << std::endl;

                        o << "NbIoTUePriority : " << obj.m_NbIoTUePriority << std::endl;

                        o << "NssaiInclusionAllowed : " << obj.m_NssaiInclusionAllowed << std::endl;

                        o << "RgWirelineCharacteristics : " << obj.m_RgWirelineCharacteristics << std::endl;

                        o << "EcRestrictionDataWb : " << obj.m_EcRestrictionDataWb << std::endl;

                        o << "EcRestrictionDataNb : " << obj.m_EcRestrictionDataNb << std::endl;

                        o << "ExpectedUeBehaviourList : " << obj.m_ExpectedUeBehaviourList << std::endl;
                        o << convert2string(std::string("PrimaryRatRestrictions"), obj.m_PrimaryRatRestrictions) << std::endl;
                        o << convert2string(std::string("SecondaryRatRestrictions"), obj.m_SecondaryRatRestrictions) << std::endl;
                        o << convert2string(std::string("EdrxParametersList"), obj.m_EdrxParametersList) << std::endl;
                        o << convert2string(std::string("PtwParametersList"), obj.m_PtwParametersList) << std::endl;

                        o << "IabOperationAllowed : " << obj.m_IabOperationAllowed << std::endl;
                        o << convert2string(std::string("WirelineForbiddenAreas"), obj.m_WirelineForbiddenAreas) << std::endl;

                        o << "WirelineServiceAreaRestriction : " << obj.m_WirelineServiceAreaRestriction << std::endl;

                        return o;
                    }

                    /////////////////////////////////////////////
                    /// AccessAndMobilitySubscriptionData members vars : SupportedFeatures Gpsis InternalGroupIds SharedVnGroupDataIds SubscribedUeAmbr Nssai RatRestrictions ForbiddenAreas ServiceAreaRestriction CoreNetworkTypeRestrictions RfspIndex SubsRegTimer UeUsageType MpsPriority McsPriority ActiveTime SorInfo SorInfoExpectInd SorafRetrieval SorUpdateIndicatorList UpuInfo MicoAllowed SharedAmDataIds OdbPacketServices SubscribedDnnList ServiceGapTime MdtUserConsent MdtConfiguration TraceData CagData StnSr CMsisdn NbIoTUePriority NssaiInclusionAllowed RgWirelineCharacteristics EcRestrictionDataWb EcRestrictionDataNb ExpectedUeBehaviourList PrimaryRatRestrictions SecondaryRatRestrictions EdrxParametersList PtwParametersList IabOperationAllowed WirelineForbiddenAreas WirelineServiceAreaRestriction

                    std::string getSupportedFeatures() const
                    {
                        return m_SupportedFeatures;
                    }
                    void setSupportedFeatures(std::string const &value)
                    {
                        m_SupportedFeatures = value;
                    }

                    std::vector<std::string> &getGpsis()
                    {
                        return m_Gpsis;
                    }
                    void setGpsis(std::vector<std::string> const &value)
                    {
                        m_Gpsis = value;
                    }

                    std::vector<std::string> &getInternalGroupIds()
                    {
                        return m_InternalGroupIds;
                    }
                    void setInternalGroupIds(std::vector<std::string> const &value)
                    {
                        m_InternalGroupIds = value;
                    }

                    std::map<std::string, std::string> &getSharedVnGroupDataIds()
                    {
                        return m_SharedVnGroupDataIds;
                    }
                    void setSharedVnGroupDataIds(std::map<std::string, std::string> const &value)
                    {
                        m_SharedVnGroupDataIds = value;
                    }

                    AmbrRm getSubscribedUeAmbr() const
                    {
                        return m_SubscribedUeAmbr;
                    }
                    void setSubscribedUeAmbr(AmbrRm const &value)
                    {
                        m_SubscribedUeAmbr = value;
                    }

                    Nssai getNssai() const
                    {
                        return m_Nssai;
                    }
                    void setNssai(Nssai const &value)
                    {
                        m_Nssai = value;
                    }

                    std::vector<RatType> &getRatRestrictions()
                    {
                        return m_RatRestrictions;
                    }
                    void setRatRestrictions(std::vector<RatType> const &value)
                    {
                        m_RatRestrictions = value;
                    }

                    std::vector<Area> &getForbiddenAreas()
                    {
                        return m_ForbiddenAreas;
                    }
                    void setForbiddenAreas(std::vector<Area> const &value)
                    {
                        m_ForbiddenAreas = value;
                    }

                    ServiceAreaRestriction getServiceAreaRestriction() const
                    {
                        return m_ServiceAreaRestriction;
                    }
                    void setServiceAreaRestriction(ServiceAreaRestriction const &value)
                    {
                        m_ServiceAreaRestriction = value;
                    }

                    std::vector<CoreNetworkType> &getCoreNetworkTypeRestrictions()
                    {
                        return m_CoreNetworkTypeRestrictions;
                    }
                    void setCoreNetworkTypeRestrictions(std::vector<CoreNetworkType> const &value)
                    {
                        m_CoreNetworkTypeRestrictions = value;
                    }

                    int32_t getRfspIndex() const
                    {
                        return m_RfspIndex;
                    }
                    void setRfspIndex(int32_t const value)
                    {
                        m_RfspIndex = value;
                    }

                    int32_t getSubsRegTimer() const
                    {
                        return m_SubsRegTimer;
                    }
                    void setSubsRegTimer(int32_t const value)
                    {
                        m_SubsRegTimer = value;
                    }

                    int32_t getUeUsageType() const
                    {
                        return m_UeUsageType;
                    }
                    void setUeUsageType(int32_t const value)
                    {
                        m_UeUsageType = value;
                    }

                    bool isMpsPriority() const
                    {
                        return m_MpsPriority;
                    }
                    void setMpsPriority(bool const value)
                    {
                        m_MpsPriority = value;
                    }

                    bool isMcsPriority() const
                    {
                        return m_McsPriority;
                    }
                    void setMcsPriority(bool const value)
                    {
                        m_McsPriority = value;
                    }

                    int32_t getActiveTime() const
                    {
                        return m_ActiveTime;
                    }
                    void setActiveTime(int32_t const value)
                    {
                        m_ActiveTime = value;
                    }

                    SorInfo getSorInfo() const
                    {
                        return m_SorInfo;
                    }
                    void setSorInfo(SorInfo const &value)
                    {
                        m_SorInfo = value;
                    }

                    bool isSorInfoExpectInd() const
                    {
                        return m_SorInfoExpectInd;
                    }
                    void setSorInfoExpectInd(bool const value)
                    {
                        m_SorInfoExpectInd = value;
                    }

                    bool isSorafRetrieval() const
                    {
                        return m_SorafRetrieval;
                    }
                    void setSorafRetrieval(bool const value)
                    {
                        m_SorafRetrieval = value;
                    }

                    std::vector<SorUpdateIndicator> &getSorUpdateIndicatorList()
                    {
                        return m_SorUpdateIndicatorList;
                    }
                    void setSorUpdateIndicatorList(std::vector<SorUpdateIndicator> const &value)
                    {
                        m_SorUpdateIndicatorList = value;
                    }

                    UpuInfo getUpuInfo() const
                    {
                        return m_UpuInfo;
                    }
                    void setUpuInfo(UpuInfo const &value)
                    {
                        m_UpuInfo = value;
                    }

                    bool isMicoAllowed() const
                    {
                        return m_MicoAllowed;
                    }
                    void setMicoAllowed(bool const value)
                    {
                        m_MicoAllowed = value;
                    }

                    std::vector<std::string> &getSharedAmDataIds()
                    {
                        return m_SharedAmDataIds;
                    }
                    void setSharedAmDataIds(std::vector<std::string> const &value)
                    {
                        m_SharedAmDataIds = value;
                    }

                    OdbPacketServices getOdbPacketServices() const
                    {
                        return m_OdbPacketServices;
                    }
                    void setOdbPacketServices(OdbPacketServices const &value)
                    {
                        m_OdbPacketServices = value;
                    }

                    std::vector<std::string> &getSubscribedDnnList()
                    {
                        return m_SubscribedDnnList;
                    }
                    void setSubscribedDnnList(std::vector<std::string> const &value)
                    {
                        m_SubscribedDnnList = value;
                    }

                    int32_t getServiceGapTime() const
                    {
                        return m_ServiceGapTime;
                    }
                    void setServiceGapTime(int32_t const value)
                    {
                        m_ServiceGapTime = value;
                    }

                    MdtUserConsent getMdtUserConsent() const
                    {
                        return m_MdtUserConsent;
                    }
                    void setMdtUserConsent(MdtUserConsent const &value)
                    {
                        m_MdtUserConsent = value;
                    }

                    MdtConfiguration getMdtConfiguration() const
                    {
                        return m_MdtConfiguration;
                    }
                    void setMdtConfiguration(MdtConfiguration const &value)
                    {
                        m_MdtConfiguration = value;
                    }

                    TraceData getTraceData() const
                    {
                        return m_TraceData;
                    }
                    void setTraceData(TraceData const &value)
                    {
                        m_TraceData = value;
                    }

                    CagData getCagData() const
                    {
                        return m_CagData;
                    }
                    void setCagData(CagData const &value)
                    {
                        m_CagData = value;
                    }

                    std::string getStnSr() const
                    {
                        return m_StnSr;
                    }
                    void setStnSr(std::string const &value)
                    {
                        m_StnSr = value;
                    }

                    std::string getCMsisdn() const
                    {
                        return m_CMsisdn;
                    }
                    void setCMsisdn(std::string const &value)
                    {
                        m_CMsisdn = value;
                    }

                    int32_t getNbIoTUePriority() const
                    {
                        return m_NbIoTUePriority;
                    }
                    void setNbIoTUePriority(int32_t const value)
                    {
                        m_NbIoTUePriority = value;
                    }

                    bool isNssaiInclusionAllowed() const
                    {
                        return m_NssaiInclusionAllowed;
                    }
                    void setNssaiInclusionAllowed(bool const value)
                    {
                        m_NssaiInclusionAllowed = value;
                    }

                    std::string getRgWirelineCharacteristics() const
                    {
                        return m_RgWirelineCharacteristics;
                    }
                    void setRgWirelineCharacteristics(std::string const &value)
                    {
                        m_RgWirelineCharacteristics = value;
                    }

                    EcRestrictionDataWb getEcRestrictionDataWb() const
                    {
                        return m_EcRestrictionDataWb;
                    }
                    void setEcRestrictionDataWb(EcRestrictionDataWb const &value)
                    {
                        m_EcRestrictionDataWb = value;
                    }

                    bool isEcRestrictionDataNb() const
                    {
                        return m_EcRestrictionDataNb;
                    }
                    void setEcRestrictionDataNb(bool const value)
                    {
                        m_EcRestrictionDataNb = value;
                    }

                    ExpectedUeBehaviourData getExpectedUeBehaviourList() const
                    {
                        return m_ExpectedUeBehaviourList;
                    }
                    void setExpectedUeBehaviourList(ExpectedUeBehaviourData const &value)
                    {
                        m_ExpectedUeBehaviourList = value;
                    }

                    std::vector<RatType> &getPrimaryRatRestrictions()
                    {
                        return m_PrimaryRatRestrictions;
                    }
                    void setPrimaryRatRestrictions(std::vector<RatType> const &value)
                    {
                        m_PrimaryRatRestrictions = value;
                    }

                    std::vector<RatType> &getSecondaryRatRestrictions()
                    {
                        return m_SecondaryRatRestrictions;
                    }
                    void setSecondaryRatRestrictions(std::vector<RatType> const &value)
                    {
                        m_SecondaryRatRestrictions = value;
                    }

                    std::vector<EdrxParameters> &getEdrxParametersList()
                    {
                        return m_EdrxParametersList;
                    }
                    void setEdrxParametersList(std::vector<EdrxParameters> const &value)
                    {
                        m_EdrxParametersList = value;
                    }

                    std::vector<PtwParameters> &getPtwParametersList()
                    {
                        return m_PtwParametersList;
                    }
                    void setPtwParametersList(std::vector<PtwParameters> const &value)
                    {
                        m_PtwParametersList = value;
                    }

                    bool isIabOperationAllowed() const
                    {
                        return m_IabOperationAllowed;
                    }
                    void setIabOperationAllowed(bool const value)
                    {
                        m_IabOperationAllowed = value;
                    }

                    std::vector<WirelineArea> &getWirelineForbiddenAreas()
                    {
                        return m_WirelineForbiddenAreas;
                    }
                    void setWirelineForbiddenAreas(std::vector<WirelineArea> const &value)
                    {
                        m_WirelineForbiddenAreas = value;
                    }

                    WirelineServiceAreaRestriction getWirelineServiceAreaRestriction() const
                    {
                        return m_WirelineServiceAreaRestriction;
                    }
                    void setWirelineServiceAreaRestriction(WirelineServiceAreaRestriction const &value)
                    {
                        m_WirelineServiceAreaRestriction = value;
                    }

                public:
                    std::string m_SupportedFeatures;

                    unsigned m_SupportedFeaturesFlag;
                    std::vector<std::string> m_Gpsis;

                    unsigned m_GpsisFlag;
                    std::vector<std::string> m_InternalGroupIds;

                    unsigned m_InternalGroupIdsFlag;
                    std::map<std::string, std::string> m_SharedVnGroupDataIds;

                    unsigned m_SharedVnGroupDataIdsFlag;
                    AmbrRm m_SubscribedUeAmbr;

                    unsigned m_SubscribedUeAmbrFlag;
                    Nssai m_Nssai;

                    unsigned m_NssaiFlag;
                    std::vector<RatType> m_RatRestrictions;

                    unsigned m_RatRestrictionsFlag;
                    std::vector<Area> m_ForbiddenAreas;

                    unsigned m_ForbiddenAreasFlag;
                    ServiceAreaRestriction m_ServiceAreaRestriction;

                    unsigned m_ServiceAreaRestrictionFlag;
                    std::vector<CoreNetworkType> m_CoreNetworkTypeRestrictions;

                    unsigned m_CoreNetworkTypeRestrictionsFlag;
                    int32_t m_RfspIndex;

                    unsigned m_RfspIndexFlag;
                    int32_t m_SubsRegTimer;

                    unsigned m_SubsRegTimerFlag;
                    int32_t m_UeUsageType;

                    unsigned m_UeUsageTypeFlag;
                    bool m_MpsPriority;

                    unsigned m_MpsPriorityFlag;
                    bool m_McsPriority;

                    unsigned m_McsPriorityFlag;
                    int32_t m_ActiveTime;

                    unsigned m_ActiveTimeFlag;
                    SorInfo m_SorInfo;

                    unsigned m_SorInfoFlag;
                    bool m_SorInfoExpectInd;

                    unsigned m_SorInfoExpectIndFlag;
                    bool m_SorafRetrieval;

                    unsigned m_SorafRetrievalFlag;
                    std::vector<SorUpdateIndicator> m_SorUpdateIndicatorList;

                    unsigned m_SorUpdateIndicatorListFlag;
                    UpuInfo m_UpuInfo;

                    unsigned m_UpuInfoFlag;
                    bool m_MicoAllowed;

                    unsigned m_MicoAllowedFlag;
                    std::vector<std::string> m_SharedAmDataIds;

                    unsigned m_SharedAmDataIdsFlag;
                    OdbPacketServices m_OdbPacketServices;

                    unsigned m_OdbPacketServicesFlag;
                    std::vector<std::string> m_SubscribedDnnList;

                    unsigned m_SubscribedDnnListFlag;
                    int32_t m_ServiceGapTime;

                    unsigned m_ServiceGapTimeFlag;
                    MdtUserConsent m_MdtUserConsent;

                    unsigned m_MdtUserConsentFlag;
                    MdtConfiguration m_MdtConfiguration;

                    unsigned m_MdtConfigurationFlag;
                    TraceData m_TraceData;

                    unsigned m_TraceDataFlag;
                    CagData m_CagData;

                    unsigned m_CagDataFlag;
                    std::string m_StnSr;

                    unsigned m_StnSrFlag;
                    std::string m_CMsisdn;

                    unsigned m_CMsisdnFlag;
                    int32_t m_NbIoTUePriority;

                    unsigned m_NbIoTUePriorityFlag;
                    bool m_NssaiInclusionAllowed;

                    unsigned m_NssaiInclusionAllowedFlag;
                    std::string m_RgWirelineCharacteristics;

                    unsigned m_RgWirelineCharacteristicsFlag;
                    EcRestrictionDataWb m_EcRestrictionDataWb;

                    unsigned m_EcRestrictionDataWbFlag;
                    bool m_EcRestrictionDataNb;

                    unsigned m_EcRestrictionDataNbFlag;
                    ExpectedUeBehaviourData m_ExpectedUeBehaviourList;

                    unsigned m_ExpectedUeBehaviourListFlag;
                    std::vector<RatType> m_PrimaryRatRestrictions;

                    unsigned m_PrimaryRatRestrictionsFlag;
                    std::vector<RatType> m_SecondaryRatRestrictions;

                    unsigned m_SecondaryRatRestrictionsFlag;
                    std::vector<EdrxParameters> m_EdrxParametersList;

                    unsigned m_EdrxParametersListFlag;
                    std::vector<PtwParameters> m_PtwParametersList;

                    unsigned m_PtwParametersListFlag;
                    bool m_IabOperationAllowed;

                    unsigned m_IabOperationAllowedFlag;
                    std::vector<WirelineArea> m_WirelineForbiddenAreas;

                    unsigned m_WirelineForbiddenAreasFlag;
                    WirelineServiceAreaRestriction m_WirelineServiceAreaRestriction;

                    unsigned m_WirelineServiceAreaRestrictionFlag;
                };
            }
        }
    }
}

#endif /* AccessAndMobilitySubscriptionData_H_ */
