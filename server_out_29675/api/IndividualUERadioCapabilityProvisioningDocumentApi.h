/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualUERadioCapabilityProvisioningDocumentApi.h
 *
 *
 */

#ifndef IndividualUERadioCapabilityProvisioningDocumentApi_H_
#define IndividualUERadioCapabilityProvisioningDocumentApi_H_

#include "IndividualUERadioCapabilityProvisioningDocumentApiImpl.h"

#include "ProblemDetails.h"
#include "RacsData.h"
#include "RacsDataPatch.h"
#include "RacsFailureReport.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualUERadioCapabilityProvisioningDocumentApi {
public:
  IndividualUERadioCapabilityProvisioningDocumentApi();
  virtual ~IndividualUERadioCapabilityProvisioningDocumentApi() {}

private:
  static void get_provisioning_handler(request &requestIn,
                                       response responseIn) {
    // Getting the path params
    std::string provisioningId;

    if (request.param.count("provisioningId")) {
      provisioningId = request.param["provisioningId"];
    }

    try {
      /// <param name="provisioningId">Provisioning ID</param>
      IndividualUERadioCapabilityProvisioningDocumentApiImpl::get_provisioning(
          provisioningId, response);

    } catch (std::exception &e) {
      responseIn.write_head(500);
      responseIn.end(e.what());
      // send a 500 error
      return;
    }
  }
  static void remove_provisioning_handler(request &requestIn,
                                          response responseIn) {
    // Getting the path params
    std::string provisioningId;

    if (request.param.count("provisioningId")) {
      provisioningId = request.param["provisioningId"];
    }

    try {
      /// <param name="provisioningId">Provisioning ID</param>
      IndividualUERadioCapabilityProvisioningDocumentApiImpl::
          remove_provisioning(provisioningId, response);

    } catch (std::exception &e) {
      responseIn.write_head(500);
      responseIn.end(e.what());
      // send a 500 error
      return;
    }
  }
  static void replace_provisioning_handler(request &requestIn,
                                           response responseIn) {
    // Getting the path params
    std::string provisioningId;

    if (request.param.count("provisioningId")) {
      provisioningId = request.param["provisioningId"];
    }

    // Getting the body param

    RacsData racsData;

    try {
      // nlohmann::json::parse(request.body()).get_to(racsData);
      staticjson::ParseStatus result;
      racsData.decode(request.body(), result);
      /// <param name="provisioningId">Provisioning ID</param>
      /// <param name="racsData">update an existing parameter
      /// provisioning.</param>
      IndividualUERadioCapabilityProvisioningDocumentApiImpl::
          replace_provisioning(provisioningId, racsData, response);

    } catch (std::exception &e) {
      responseIn.write_head(500);
      responseIn.end(e.what());
      // send a 500 error
      return;
    }
  }
  static void update_provisioning_handler(request &requestIn,
                                          response responseIn) {
    // Getting the path params
    std::string provisioningId;

    if (request.param.count("provisioningId")) {
      provisioningId = request.param["provisioningId"];
    }

    // Getting the body param

    RacsDataPatch racsDataPatch;

    try {
      // nlohmann::json::parse(request.body()).get_to(racsDataPatch);
      staticjson::ParseStatus result;
      racsDataPatch.decode(request.body(), result);
      /// <param name="provisioningId">Provisioning ID</param>
      /// <param name="racsDataPatch">update an existing parameter
      /// provisioning.</param>
      IndividualUERadioCapabilityProvisioningDocumentApiImpl::
          update_provisioning(provisioningId, racsDataPatch, response);

    } catch (std::exception &e) {
      responseIn.write_head(500);
      responseIn.end(e.what());
      // send a 500 error
      return;
    }
  }
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualUERadioCapabilityProvisioningDocumentApi_H_ */
