/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2020, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UpuInfo.h
 *
 *
 * if you need to add new attribure, please contact max.cong@nokia-sbell.com to
 * generate new code.
 */

#ifndef UpuInfo_H_
#define UpuInfo_H_

#include "CSB_JsonParser.h"
#include "UpuData.h"
#include <string>
#include <type_traits>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UpuInfo : public jsonParser::jsonParser<UpuInfo> {
public:
  explicit UpuInfo() {
    // constructor

    m_UpuDataListFlag = staticjson::Flags::Default;
    m_UpuDataListOutFlag.reset(new unsigned);
    *m_UpuDataListOutFlag.get() = 0;
    m_UpuRegInd = false;

    m_UpuRegIndFlag = staticjson::Flags::Default;
    m_UpuRegIndOutFlag.reset(new unsigned);
    *m_UpuRegIndOutFlag.get() = 0;
    m_UpuAckInd = false;

    m_UpuAckIndFlag = staticjson::Flags::Default;
    m_UpuAckIndOutFlag.reset(new unsigned);
    *m_UpuAckIndOutFlag.get() = 0;
    m_UpuMacIausf = "";

    m_UpuMacIausfFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_UpuMacIausfOutFlag.reset(new unsigned);
    *m_UpuMacIausfOutFlag.get() = 0;
    m_CounterUpu = "";

    m_CounterUpuFlag =
        (staticjson::Flags::Optional | staticjson::Flags::IgnoreWrite);
    m_CounterUpuOutFlag.reset(new unsigned);
    *m_CounterUpuOutFlag.get() = 0;
    m_ProvisioningTime = "";

    m_ProvisioningTimeFlag = staticjson::Flags::Default;
    m_ProvisioningTimeOutFlag.reset(new unsigned);
    *m_ProvisioningTimeOutFlag.get() = 0;
  };
  virtual ~UpuInfo(){};

  void staticjson_init(staticjson::ObjectHandler *h) {

    // static json settings members vars : UpuDataList UpuRegInd UpuAckInd
    // UpuMacIausf CounterUpu ProvisioningTime
    h->add_property("upuDataList", &this->m_UpuDataList, m_UpuDataListFlag);
    h->add_property("upuRegInd", &this->m_UpuRegInd, m_UpuRegIndFlag);
    h->add_property("upuAckInd", &this->m_UpuAckInd, m_UpuAckIndFlag);
    h->add_optional_property("upuMacIausf", &this->m_UpuMacIausf,
                             m_UpuMacIausfFlag, m_UpuMacIausfOutFlag);
    h->add_optional_property("counterUpu", &this->m_CounterUpu,
                             m_CounterUpuFlag, m_CounterUpuOutFlag);
    h->add_property("provisioningTime", &this->m_ProvisioningTime,
                    m_ProvisioningTimeFlag);

    h->set_flags(staticjson::Flags::Default |
                 staticjson::Flags::DisallowUnknownKey);
  }
  template <typename T>
  static std::string convert2string(std::string name,
                                    const std::vector<T> &obj) {
    std::stringstream o;
    o << "name : ";
    for (auto it : obj) {
      o << it;
    }
    o << std::endl;

    return o.str();
  }

  template <typename T, typename T1>
  static std::string convert2string(std::string name,
                                    const std::map<T, T1> &obj) {
    std::stringstream out;
    out << "name : ";
    for (auto it : obj) {
      out << it.first << ":" << it.second << " ";
    }
    out << std::endl;
    return out.str();
  }

  friend std::ostream &operator<<(std::ostream &o, const UpuInfo &obj) {
    o << convert2string(std::string("UpuDataList"), obj.m_UpuDataList)
      << std::endl;

    o << "UpuRegInd : " << obj.m_UpuRegInd << std::endl;

    o << "UpuAckInd : " << obj.m_UpuAckInd << std::endl;

    o << "UpuMacIausf, optional flag is : " << *m_UpuMacIausfOutFlag
      << ", content is : " << obj.m_UpuMacIausf << std::endl;

    o << "CounterUpu, optional flag is : " << *m_CounterUpuOutFlag
      << ", content is : " << obj.m_CounterUpu << std::endl;

    o << "ProvisioningTime : " << obj.m_ProvisioningTime << std::endl;

    return o;
  }

  /////////////////////////////////////////////
  /// UpuInfo members vars : UpuDataList UpuRegInd UpuAckInd UpuMacIausf
  /// CounterUpu ProvisioningTime

  std::vector<UpuData> &getUpuDataList() { return m_UpuDataList; }
  void setUpuDataList(std::vector<UpuData> const &value) {
    m_UpuDataList = value;
  }

  bool isUpuRegInd() const { return m_UpuRegInd; }
  void setUpuRegInd(bool const value) { m_UpuRegInd = value; }

  bool isUpuAckInd() const { return m_UpuAckInd; }
  void setUpuAckInd(bool const value) { m_UpuAckInd = value; }

  std::string getUpuMacIausf() const { return m_UpuMacIausf; }
  void setUpuMacIausf(std::string const &value) { m_UpuMacIausf = value; }

  std::string getCounterUpu() const { return m_CounterUpu; }
  void setCounterUpu(std::string const &value) { m_CounterUpu = value; }

  std::string getProvisioningTime() const { return m_ProvisioningTime; }
  void setProvisioningTime(std::string const &value) {
    m_ProvisioningTime = value;
  }

public:
  std::vector<UpuData> m_UpuDataList;

  unsigned m_UpuDataListFlag;
  shared_ptr<unsigned> m_UpuDataListOutFlag;
  bool m_UpuRegInd;

  unsigned m_UpuRegIndFlag;
  shared_ptr<unsigned> m_UpuRegIndOutFlag;
  bool m_UpuAckInd;

  unsigned m_UpuAckIndFlag;
  shared_ptr<unsigned> m_UpuAckIndOutFlag;
  std::string m_UpuMacIausf;

  unsigned m_UpuMacIausfFlag;
  shared_ptr<unsigned> m_UpuMacIausfOutFlag;
  std::string m_CounterUpu;

  unsigned m_CounterUpuFlag;
  shared_ptr<unsigned> m_CounterUpuOutFlag;
  std::string m_ProvisioningTime;

  unsigned m_ProvisioningTimeFlag;
  shared_ptr<unsigned> m_ProvisioningTimeOutFlag;
};
} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UpuInfo_H_ */
