/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DictionaryEntryStoreApi.c
 *
 *
 */

#include "jsonParser.hpp"

#include <nghttp2/asio_http2_server.h>

#include "DictionaryEntryStoreApi.h"
#include "DictionaryEntryStoreApiImpl.h"

using namespace nghttp2::asio_http2::server;
using namespace nghttp2::asio_http2;

#include "Inline_response_200.h"
#include "ProblemDetails.h"
#include "RacFormat.h"
#include "UeRadioCapaId.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

void DictionaryEntryStoreApi::retrieve_dictionary_entry_handler(
    request &requestIn, response &responseIn) {

  // Getting the query params
  std::map<std::string, std::string> queryMap;
  if (!requestIn.uri().raw_query.empty()) {
    queryMap = getQueryMap::get(requestIn.uri().raw_query);
  }

  std::string ueRadioCapaIdQuery;

  if (queryMap.count("ue-radio-capa-id")) {
    ueRadioCapaIdQuery = (queryMap).at("ue-radio-capa-id");
  }
  UeRadioCapaId ueRadioCapaId;

  //<param name="ueRadioCapaId">UE Radio Capability ID, either PLMN Assigned or
  //Manufacturer Assigned parameter type UeRadioCapaId </param>

  if (!ueRadioCapaIdQuery.empty()) {
    staticjson::ParseStatus result;
    auto ret = ueRadioCapaId.decode(ueRadioCapaIdQuery, result);
    std::cout << "validation report is :" << ret.second << std::endl;
    std::cout << "parse result: " << (int)ret.first << std::endl;
    // std::move(ueRadioCapaIdQuery)
  }

  std::string racFormatQuery;

  if (queryMap.count("rac-format")) {
    racFormatQuery = (queryMap).at("rac-format");
  }
  std::optional<RacFormat> racFormat;

  //<param name="racFormat">Encoding format of RAC Info parameter type RacFormat
  //(optional, default to RacFormat())</param>

  if (!racFormatQuery.empty()) {
    staticjson::ParseStatus result;
    auto ret = (*racFormat).decode(racFormatQuery, result);
    std::cout << "validation report is :" << ret.second << std::endl;
    std::cout << "parse result: " << (int)ret.first << std::endl;
    // std::move(racFormatQuery)
  }

  std::string supportedFeaturesQuery;

  if (queryMap.count("supported-features")) {
    supportedFeaturesQuery = (queryMap).at("supported-features");
  }
  std::optional<std::string> supportedFeatures;

  //<param name="supportedFeatures">supported features of the NF consumer
  //parameter type std::string   (optional, default to &quot;&quot;)</param>

  // PrimitiveType
  if (!supportedFeaturesQuery.empty()) {
    supportedFeatures.emplace(supportedFeaturesQuery);
  }

  try {
    /// <param name="ueRadioCapaId">UE Radio Capability ID, either PLMN Assigned
    /// or Manufacturer Assigned</param> <param name="racFormat">Encoding format
    /// of RAC Info (optional, default to RacFormat())</param> <param
    /// name="supportedFeatures">supported features of the NF consumer
    /// (optional, default to &quot;&quot;)</param>
    DictionaryEntryStoreApiImpl::retrieve_dictionary_entry(
        ueRadioCapaId, racFormat, supportedFeatures, requestIn, responseIn);

  } catch (std::exception &e) {
    responseIn.write_head(500);
    responseIn.end(e.what());
    // send a 500 error
    return;
  }
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
